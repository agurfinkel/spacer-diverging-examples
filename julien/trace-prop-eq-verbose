-------- [spacer] reset ../src/muz/spacer/spacer_context.cpp:1871 ---------

------------------------------------------------
-------- [spacer] query ../src/muz/spacer/spacer_dl_interface.cpp:103 ---------
query: (and (query!0 (:var 5) (:var 4) (:var 3) (:var 2) (:var 1) (:var 0)))
rules:
; rule count: 13
; predicate count: 11
; output: query!0
<null>:
assign_15_1_75(#4,#6,#5,#7,#1,#0) :- 
 L1(#4,#8,#5,#9,#1,#0),
 (<= (:var 1) (:var 0)),
 (= (:var 6) (select (:var 3) (:var 4))),
 (= (:var 7) (select (:var 2) (:var 5))),
 (= (:var 8) (select (:var 3) (:var 4))),
 (= (:var 9) (select (:var 2) (:var 5))).
<null>:
start(#4,#6,#5,#7,#1,#0) :- 
 (= (:var 6) (select (:var 3) (:var 4))),
 (= (:var 7) (select (:var 2) (:var 5))).
<null>:
L1(#4,#6,#5,#7,#2,0) :- 
 assign_9_1_35(#4,#8,#5,#9,#2,#3),
 (= (:var 6) (select (:var 0) (:var 4))),
 (= (:var 7) (select (:var 1) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 4))),
 (= (:var 9) (select (:var 1) (:var 5))).
<null>:
L1(#5,#7,#6,#8,#2,#4) :- 
 assign_12_5_66(#5,#9,#6,#10,#2,#3),
 (= (:var 4) (+ 1 (:var 3))),
 (= (:var 7) (select (:var 0) (:var 5))),
 (= (:var 8) (select (:var 1) (:var 6))),
 (= (:var 9) (select (:var 0) (:var 5))),
 (= (:var 10) (select (:var 1) (:var 6))).
<null>:
assert_17_5_101(#4,#6,#5,#7,#1,#0) :- 
 L2(#4,#8,#5,#9,#1,#0),
 (not (<= (:var 1) (:var 0))),
 (= (:var 6) (select (:var 3) (:var 4))),
 (= (:var 7) (select (:var 2) (:var 5))),
 (= (:var 8) (select (:var 3) (:var 4))),
 (= (:var 9) (select (:var 2) (:var 5))).
<null>:
assign_12_5_66(#5,#7,#6,#8,#2,#3) :- 
 arrayassign_11_5_57(#5,#9,#3,#10,#2,#3),
 arrayassign_11_5_57(#5,#11,#6,#12,#2,#3),
 (= (:var 7) (select (:var 4) (:var 5))),
 (= (:var 8) (select (:var 1) (:var 6))),
 (= (:var 9) (select (:var 0) (:var 5))),
 (= (:var 10) (select (:var 1) (:var 3))),
 (= (:var 11) (select (:var 0) (:var 5))),
 (= (:var 12) (select (:var 1) (:var 6))),
 (= (:var 4) (store (:var 0) (:var 3) (select (:var 1) (:var 3)))).
<null>:
assign_18_5_110(#4,#6,#5,#7,#2,#3) :- 
 assert_17_5_101(#4,#8,#5,#9,#2,#3),
 (= (:var 6) (select (:var 0) (:var 4))),
 (= (:var 7) (select (:var 1) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 4))),
 (= (:var 9) (select (:var 1) (:var 5))).
<null>:
query!0(#3,#2,#4,#6,#5,#7) :- 
 assert_17_5_101(#3,#8,#3,#9,#2,#3),
 assert_17_5_101(#5,#10,#4,#11,#2,#3),
 assert_17_5_101(#5,#12,#3,#13,#2,#3),
 assert_17_5_101(#3,#14,#4,#15,#2,#3),
 (= (:var 6) (select (:var 1) (:var 4))),
 (= (:var 7) (select (:var 0) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 3))),
 (= (:var 9) (select (:var 1) (:var 3))),
 (= (:var 10) (select (:var 0) (:var 5))),
 (= (:var 11) (select (:var 1) (:var 4))),
 (= (:var 12) (select (:var 0) (:var 5))),
 (= (:var 13) (select (:var 1) (:var 3))),
 (= (:var 14) (select (:var 0) (:var 3))),
 (= (:var 15) (select (:var 1) (:var 4))),
 (not (= (select (:var 1) (:var 3)) (select (:var 0) (:var 3)))).
<null>:
L2(#4,#6,#5,#7,#2,0) :- 
 assign_15_1_75(#4,#8,#5,#9,#2,#3),
 (= (:var 6) (select (:var 0) (:var 4))),
 (= (:var 7) (select (:var 1) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 4))),
 (= (:var 9) (select (:var 1) (:var 5))).
<null>:
L2(#5,#7,#6,#8,#2,#4) :- 
 assign_18_5_110(#5,#9,#6,#10,#2,#3),
 (= (:var 4) (+ 1 (:var 3))),
 (= (:var 7) (select (:var 0) (:var 5))),
 (= (:var 8) (select (:var 1) (:var 6))),
 (= (:var 9) (select (:var 0) (:var 5))),
 (= (:var 10) (select (:var 1) (:var 6))).
<null>:
assign_9_1_35(#4,#6,#5,#7,#2,#3) :- 
 start(#4,#8,#5,#9,#2,#3),
 (= (:var 6) (select (:var 0) (:var 4))),
 (= (:var 7) (select (:var 1) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 4))),
 (= (:var 9) (select (:var 1) (:var 5))).
<null>:
query!0(#5,#4,#3,#2,#1,#0) :- 
 query!0(#5,#4,#3,#2,#1,#0).
<null>:
arrayassign_11_5_57(#4,#6,#5,#7,#1,#0) :- 
 L1(#4,#8,#5,#9,#1,#0),
 (not (<= (:var 1) (:var 0))),
 (= (:var 6) (select (:var 3) (:var 4))),
 (= (:var 7) (select (:var 2) (:var 5))),
 (= (:var 8) (select (:var 3) (:var 4))),
 (= (:var 9) (select (:var 2) (:var 5))).
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1891 ---------
(declare-fun query!0 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1891 ---------
(declare-fun L2 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1891 ---------
(declare-fun L1 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1921 ---------
(declare-fun query!0 (Int Int Int Int Int Int) Bool) (declare-fun L2 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1921 ---------
(declare-fun L2 (Int Int Int Int Int Int) Bool) (declare-fun L2 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1921 ---------
(declare-fun L2 (Int Int Int Int Int Int) Bool) (declare-fun L1 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1921 ---------
(declare-fun L1 (Int Int Int Int Int Int) Bool) (declare-fun L1 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
query!0
aux!1_n aux!2_n query!0_3_n query!0_5_n aux!3_n aux!4_n L2_1_0 L2_3_0 aux!5_n aux!6_n L2_1_1 L2_3_1 aux!7_n aux!8_n query!0_4_n L2_1_2 L2_3_2 query!0_1_n aux!9_n aux!10_n query!0_0_n query!0_2_n L2_1_3 L2_3_3 
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n)))))
  (and (or (not query!0_dummy) a!1) (or query!0_dummy query!0_ext0_n)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not query!0_dummy) |query!0#level_0!11|)
------------------------------------------------
-------- [spacer] initialize ../src/muz/spacer/spacer_context.cpp:944 ---------
Initial state: (not query!0_dummy)
Transition:    (let ((a!1 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n)))))
  (and (or (not query!0_dummy) a!1) (or query!0_dummy query!0_ext0_n)))
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1932 ---------
rules
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
transition
(let ((a!1 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n)))))
  (and (or (not query!0_dummy) a!1) (or query!0_dummy query!0_ext0_n)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
L2
aux!12_n aux!13_n L2_1_n L2_3_n L1_5_0 L2_4_n aux!14_n aux!15_n L2_0_n L2_2_n L1_1_0 L1_3_0 
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
L2
aux!16_n aux!17_n L2_5_n L2_1_n L2_3_n aux!18_n aux!19_n L2_5_0 L2_4_n aux!20_n aux!21_n L2_0_n L2_2_n L2_1_0 L2_3_0 
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not L2_tr0)
               (and (= L2_5_n 0)
                    (= L1_0_0 L2_0_n)
                    (= L1_2_0 L2_2_n)
                    (= L1_4_0 L2_4_n)
                    (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                    (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                    (= L1_1_0 (select aux!15_n L2_0_n))
                    (= L1_3_0 (select aux!14_n L2_2_n))
                    (= L2_1_n (select aux!12_n L2_0_n))
                    (= L2_3_n (select aux!13_n L2_2_n))
                    (<= L2_4_n L1_5_0))))
      (a!2 (or (not L2_tr1)
               (and (= L2_0_0 L2_0_n)
                    (= L2_2_0 L2_2_n)
                    (= L2_4_0 L2_4_n)
                    (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                    (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                    (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                    (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                    (= L2_1_0 (select aux!21_n L2_0_n))
                    (= L2_3_0 (select aux!20_n L2_2_n))
                    (= L2_5_n (+ 1 L2_5_0))
                    (= L2_1_n (select aux!16_n L2_0_n))
                    (= L2_3_n (select aux!17_n L2_2_n))
                    (not (<= L2_4_n L2_5_0))))))
  (and a!1 a!2 (or L2_ext0_n L2_tr0 L2_tr1)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (and (not L2_tr0) (not L2_tr1)) |L2#level_0!22|)
------------------------------------------------
-------- [spacer] initialize ../src/muz/spacer/spacer_context.cpp:944 ---------
Initial state: (and (not L2_tr0) (not L2_tr1))
Transition:    (let ((a!1 (or (not L2_tr0)
               (and (= L2_5_n 0)
                    (= L1_0_0 L2_0_n)
                    (= L1_2_0 L2_2_n)
                    (= L1_4_0 L2_4_n)
                    (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                    (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                    (= L1_1_0 (select aux!15_n L2_0_n))
                    (= L1_3_0 (select aux!14_n L2_2_n))
                    (= L2_1_n (select aux!12_n L2_0_n))
                    (= L2_3_n (select aux!13_n L2_2_n))
                    (<= L2_4_n L1_5_0))))
      (a!2 (or (not L2_tr1)
               (and (= L2_0_0 L2_0_n)
                    (= L2_2_0 L2_2_n)
                    (= L2_4_0 L2_4_n)
                    (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                    (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                    (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                    (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                    (= L2_1_0 (select aux!21_n L2_0_n))
                    (= L2_3_0 (select aux!20_n L2_2_n))
                    (= L2_5_n (+ 1 L2_5_0))
                    (= L2_1_n (select aux!16_n L2_0_n))
                    (= L2_3_n (select aux!17_n L2_2_n))
                    (not (<= L2_4_n L2_5_0))))))
  (and a!1 a!2 (or L2_ext0_n L2_tr0 L2_tr1)))
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1932 ---------
rules
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
transition
(let ((a!1 (or (not L2_tr0)
               (and (= L2_5_n 0)
                    (= L1_0_0 L2_0_n)
                    (= L1_2_0 L2_2_n)
                    (= L1_4_0 L2_4_n)
                    (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                    (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                    (= L1_1_0 (select aux!15_n L2_0_n))
                    (= L1_3_0 (select aux!14_n L2_2_n))
                    (= L2_1_n (select aux!12_n L2_0_n))
                    (= L2_3_n (select aux!13_n L2_2_n))
                    (<= L2_4_n L1_5_0))))
      (a!2 (or (not L2_tr1)
               (and (= L2_0_0 L2_0_n)
                    (= L2_2_0 L2_2_n)
                    (= L2_4_0 L2_4_n)
                    (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                    (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                    (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                    (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                    (= L2_1_0 (select aux!21_n L2_0_n))
                    (= L2_3_0 (select aux!20_n L2_2_n))
                    (= L2_5_n (+ 1 L2_5_0))
                    (= L2_1_n (select aux!16_n L2_0_n))
                    (= L2_3_n (select aux!17_n L2_2_n))
                    (not (<= L2_4_n L2_5_0))))))
  (and a!1 a!2 (or L2_ext0_n L2_tr0 L2_tr1)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(and (= L1_5_n 0)
     (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
     (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
     (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
     (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
     (= L1_1_n (select aux!23_n L1_0_n))
     (= L1_3_n (select aux!24_n L1_2_n)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
L1
aux!23_n aux!24_n L1_1_n L1_3_n aux!25_n aux!26_n L1_4_n aux!27_n aux!28_n L1_0_n L1_2_n 
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
L1
aux!29_n aux!30_n L1_5_n L1_1_n L1_3_n aux!31_n aux!32_n aux!33_n aux!34_n L1_1_0 L1_3_0 L1_2_0 L1_4_n aux!35_n aux!36_n L1_0_n L1_2_n L1_1_1 L1_3_1 
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not L1_tr0)
               (and (= L1_5_n 0)
                    (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                    (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                    (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                    (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                    (= L1_1_n (select aux!23_n L1_0_n))
                    (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!2 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
(let ((a!3 (or (not L1_tr1)
               (and (= L1_0_0 L1_0_n)
                    (= L1_4_0 L1_4_n)
                    (= L1_5_0 L1_2_0)
                    (= L1_0_1 L1_0_n)
                    (= L1_2_1 L1_2_n)
                    (= L1_4_1 L1_4_n)
                    (= L1_5_1 L1_2_0)
                    a!2
                    (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                    (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                    (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                    (= L1_3_1 (select aux!35_n L1_2_n))
                    (= L1_1_1 (select aux!36_n L1_0_n))
                    (= L1_3_0 (select aux!33_n L1_2_0))
                    (= L1_5_n (+ 1 L1_2_0))
                    (= L1_1_n (select aux!29_n L1_0_n))
                    (= L1_1_0 (select aux!34_n L1_0_n))
                    (= L1_3_n (select aux!30_n L1_2_n))
                    (not (<= L1_4_n L1_2_0))))))
  (and a!1 a!3 (or L1_ext0_n L1_tr0 L1_tr1))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not L1_tr1) |L1#level_0!37|)
------------------------------------------------
-------- [spacer] initialize ../src/muz/spacer/spacer_context.cpp:944 ---------
Initial state: (not L1_tr1)
Transition:    (let ((a!1 (or (not L1_tr0)
               (and (= L1_5_n 0)
                    (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                    (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                    (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                    (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                    (= L1_1_n (select aux!23_n L1_0_n))
                    (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!2 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
(let ((a!3 (or (not L1_tr1)
               (and (= L1_0_0 L1_0_n)
                    (= L1_4_0 L1_4_n)
                    (= L1_5_0 L1_2_0)
                    (= L1_0_1 L1_0_n)
                    (= L1_2_1 L1_2_n)
                    (= L1_4_1 L1_4_n)
                    (= L1_5_1 L1_2_0)
                    a!2
                    (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                    (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                    (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                    (= L1_3_1 (select aux!35_n L1_2_n))
                    (= L1_1_1 (select aux!36_n L1_0_n))
                    (= L1_3_0 (select aux!33_n L1_2_0))
                    (= L1_5_n (+ 1 L1_2_0))
                    (= L1_1_n (select aux!29_n L1_0_n))
                    (= L1_1_0 (select aux!34_n L1_0_n))
                    (= L1_3_n (select aux!30_n L1_2_n))
                    (not (<= L1_4_n L1_2_0))))))
  (and a!1 a!3 (or L1_ext0_n L1_tr0 L1_tr1))))
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1932 ---------
rules
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
transition
(let ((a!1 (or (not L1_tr0)
               (and (= L1_5_n 0)
                    (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                    (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                    (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                    (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                    (= L1_1_n (select aux!23_n L1_0_n))
                    (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!2 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
(let ((a!3 (or (not L1_tr1)
               (and (= L1_0_0 L1_0_n)
                    (= L1_4_0 L1_4_n)
                    (= L1_5_0 L1_2_0)
                    (= L1_0_1 L1_0_n)
                    (= L1_2_1 L1_2_n)
                    (= L1_4_1 L1_4_n)
                    (= L1_5_1 L1_2_0)
                    a!2
                    (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                    (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                    (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                    (= L1_3_1 (select aux!35_n L1_2_n))
                    (= L1_1_1 (select aux!36_n L1_0_n))
                    (= L1_3_0 (select aux!33_n L1_2_0))
                    (= L1_5_n (+ 1 L1_2_0))
                    (= L1_1_n (select aux!29_n L1_0_n))
                    (= L1_1_0 (select aux!34_n L1_0_n))
                    (= L1_3_n (select aux!30_n L1_2_n))
                    (not (<= L1_4_n L1_2_0))))))
  (and a!1 a!3 (or L1_ext0_n L1_tr0 L1_tr1))))
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:504 ---------
add_reach_fact: L1 INIT (and (= L1_5_n 0)
     (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
     (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
     (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
     (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
     (= L1_1_n (select aux!23_n L1_0_n))
     (= L1_3_n (select aux!24_n L1_2_n)))
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:540 ---------
updating reach ctx: (or (and (= L1_5_n 0)
         (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
         (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
         (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
         (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
         (= L1_1_n (select aux!23_n L1_0_n))
         (= L1_3_n (select aux!24_n L1_2_n)))
    |L1#reach_case_0_n|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (and (= L1_5_0 0)
                    (= (select aux!26_0 L1_2_0) (select aux!24_0 L1_2_0))
                    (= (select aux!28_0 L1_0_0) (select aux!25_0 L1_0_0))
                    (= (select aux!27_0 L1_2_0) (select aux!26_0 L1_2_0))
                    (= (select aux!25_0 L1_0_0) (select aux!23_0 L1_0_0))
                    (= L1_1_0 (select aux!23_0 L1_0_0))
                    (= L1_3_0 (select aux!24_0 L1_2_0)))
               |L1#reach_case_0_0|)))
  (=> L2_tr0 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (and (= L1_5_0 0)
                    (= (select aux!26_0 L1_2_0) (select aux!24_0 L1_2_0))
                    (= (select aux!28_0 L1_0_0) (select aux!25_0 L1_0_0))
                    (= (select aux!27_0 L1_2_0) (select aux!26_0 L1_2_0))
                    (= (select aux!25_0 L1_0_0) (select aux!23_0 L1_0_0))
                    (= L1_1_0 (select aux!23_0 L1_0_0))
                    (= L1_3_0 (select aux!24_0 L1_2_0)))
               |L1#reach_case_0_0|)))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (and (= L1_5_1 0)
                    (= (select aux!26_1 L1_2_1) (select aux!24_1 L1_2_1))
                    (= (select aux!28_1 L1_0_1) (select aux!25_1 L1_0_1))
                    (= (select aux!27_1 L1_2_1) (select aux!26_1 L1_2_1))
                    (= (select aux!25_1 L1_0_1) (select aux!23_1 L1_0_1))
                    (= L1_1_1 (select aux!23_1 L1_0_1))
                    (= L1_3_1 (select aux!24_1 L1_2_1)))
               |L1#reach_case_0_1|)))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] reset ../src/muz/spacer/spacer_context.cpp:1871 ---------

------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 0 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 0 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(unit-resolution (asserted (or (not query!0_dummy) |query!0#level_0!11|))
                 (unit-resolution (asserted (or query!0_dummy query!0_ext0_n))
                                  (asserted (not query!0_ext0_n))
                                  query!0_dummy)
                 (asserted (not |query!0#level_0!11|))
                 false)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 0 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 0 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_0!11|)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 1 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 1 depth: 1
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!41))
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_3_2 () Int
  7)
(define-fun L2_1_0 () Int
  4)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  false)
(define-fun query!0_5_n () Int
  6)
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  7)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  false)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun L2_0_1 () Int
  2)
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!42))
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!43))
(define-fun L2_1_3 () Int
  4)
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!47))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun query!0_4_n () Int
  2)
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  6)
(define-fun query!0_0_n () Int
  (- 1))
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!44))
(define-fun L2_3_3 () Int
  5)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_0_0 () Int
  (- 1))
(define-fun L2_2_3 () Int
  3)
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!49))
(define-fun L2_4_1 () Int
  0)
(define-fun L2_1_2 () Int
  6)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!40))
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!46))
(define-fun query!0_3_n () Int
  5)
(define-fun L2_3_1 () Int
  5)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  3)
(define-fun L2_2_0 () Int
  (- 1))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_0_2 () Int
  2)
(define-fun L2_2_1 () Int
  3)
(define-fun L2_4_0 () Int
  0)
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!45))
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!48))
(define-fun k!47 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!44 ((x!0 Int)) Int
  (ite (= x!0 3) 5
  (ite (= x!0 (- 1)) 7
    5)))
(define-fun k!41 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
  (ite (= x!0 2) 6
    4)))
(define-fun k!49 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!46 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!43 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!40 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!48 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!45 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!42 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 0 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 0 depth: 1
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (asserted (or (and (not L2_tr0) (not L2_tr1)) |L2#level_0!22|)))
      (a!2 (rewrite (= (and (not L2_tr0) (not L2_tr1)) (not (or L2_tr0 L2_tr1)))))
      (a!3 (= (or (and (not L2_tr0) (not L2_tr1)) |L2#level_0!22|)
              (or (not (or L2_tr0 L2_tr1)) |L2#level_0!22|))))
(let ((a!4 (mp a!1
               (monotonicity a!2 a!3)
               (or (not (or L2_tr0 L2_tr1)) |L2#level_0!22|))))
(let ((a!5 (unit-resolution (def-axiom (or (or L2_tr0 L2_tr1) (not L2_tr1)))
                            (unit-resolution a!4
                                             (asserted (not |L2#level_0!22|))
                                             (not (or L2_tr0 L2_tr1)))
                            (not L2_tr1)))
      (a!6 (unit-resolution (def-axiom (or (or L2_tr0 L2_tr1) (not L2_tr0)))
                            (unit-resolution a!4
                                             (asserted (not |L2#level_0!22|))
                                             (not (or L2_tr0 L2_tr1)))
                            (not L2_tr0))))
  (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                   a!5
                   a!6
                   (asserted (not L2_ext0_n))
                   false))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 0 L2 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 0 L2 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |L2#level_0!22|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> L2_tr1 false) |L2#level_1!62|)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 1 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 1 depth: 1
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (monotonicity (rewrite (= (=> query!0_dummy false)
                                     (not query!0_dummy)))
                         (= (or (=> query!0_dummy false) |query!0#level_1!38|)
                            (or (not query!0_dummy) |query!0#level_1!38|)))))
(let ((a!2 (mp (asserted (or (=> query!0_dummy false) |query!0#level_1!38|))
               a!1
               (or (not query!0_dummy) |query!0#level_1!38|))))
  (unit-resolution a!2
                   (unit-resolution (asserted (or query!0_dummy query!0_ext0_n))
                                    (asserted (not query!0_ext0_n))
                                    query!0_dummy)
                   (asserted (not |query!0#level_1!38|))
                   false)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 2 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 2 depth: 2
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!83))
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_3_2 () Int
  7)
(define-fun L2_1_0 () Int
  4)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  6)
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  7)
(define-fun |query!0#level_4!80| () Bool
  false)
(define-fun |query!0#level_3!68| () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  false)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun L2_0_1 () Int
  2)
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!84))
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!85))
(define-fun L2_1_3 () Int
  4)
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!89))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun query!0_4_n () Int
  2)
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  6)
(define-fun query!0_0_n () Int
  (- 1))
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!86))
(define-fun L2_3_3 () Int
  5)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_0_0 () Int
  (- 1))
(define-fun L2_2_3 () Int
  3)
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!91))
(define-fun L2_4_1 () Int
  0)
(define-fun L2_1_2 () Int
  6)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!82))
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!88))
(define-fun query!0_3_n () Int
  5)
(define-fun L2_3_1 () Int
  5)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  3)
(define-fun L2_2_0 () Int
  (- 1))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_0_2 () Int
  2)
(define-fun L2_2_1 () Int
  3)
(define-fun L2_4_0 () Int
  0)
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!87))
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!90))
(define-fun k!87 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!84 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!89 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!86 ((x!0 Int)) Int
  (ite (= x!0 3) 5
  (ite (= x!0 (- 1)) 7
    5)))
(define-fun k!83 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
  (ite (= x!0 2) 6
    4)))
(define-fun k!91 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!88 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!85 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!82 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!90 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 1 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 1 depth: 2
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  false)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun L1_0_0 () Int
  0)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  1796)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  0)
(define-fun L2_4_n () Int
  1)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!104))
(define-fun L1_5_0 () Int
  1)
(define-fun L1_1_0 () Int
  1796)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!107))
(define-fun |L2#level_2!63| () Bool
  false)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!106))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  1797)
(define-fun L2_0_n () Int
  0)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!105))
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun L2_3_n () Int
  1797)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L1_4_0 () Int
  1)
(define-fun L2_tr0 () Bool
  true)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun k!107 ((x!0 Int)) Int
  (ite (= x!0 0) 1797
    1797))
(define-fun k!104 ((x!0 Int)) Int
  (ite (= x!0 0) 1796
    1796))
(define-fun k!105 ((x!0 Int)) Int
  (ite (= x!0 0) 1796
    1796))
(define-fun k!106 ((x!0 Int)) Int
  (ite (= x!0 0) 1797
    1797))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (<= L2_4_n L1_5_0)
       a!1
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (not (<= L1_4_0 0)) (<= L1_4_0 L1_5_0) a!1 (= L1_2_0 0) (= L1_0_0 0)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 0 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 0 depth: 2
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (asserted (or (not spacer_proxy!4) (not (<= L1_4_n 0)))))
      (a!2 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!4 (or (not (= L1_5_n 0))
               (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
               (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
               (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
               (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
               (not (= L1_1_n (select aux!23_n L1_0_n)))
               (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!5 (and (= L1_5_n 0)
                (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                (= L1_1_n (select aux!23_n L1_0_n))
                (= L1_3_n (select aux!24_n L1_2_n))))
      (a!8 (unit-resolution (asserted (or (not L1_tr1) |L1#level_0!37|))
                            (asserted (not |L1#level_0!37|))
                            (not L1_tr1))))
(let ((a!3 (unit-resolution (asserted a!2)
                            (asserted spacer_proxy!1)
                            (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!6 (monotonicity (rewrite (= a!5 (not a!4)))
                         (= (or (not L1_tr0) a!5) (or (not L1_tr0) (not a!4))))))
(let ((a!7 (mp (asserted (or (not L1_tr0) a!5)) a!6 (or (not L1_tr0) (not a!4)))))
(let ((a!9 (unit-resolution a!7
                            (unit-resolution (asserted (or L1_ext0_n
                                                           L1_tr0
                                                           L1_tr1))
                                             (asserted (not L1_ext0_n))
                                             a!8
                                             L1_tr0)
                            (not a!4))))
(let ((a!10 (unit-resolution (def-axiom (or a!4 (= L1_5_n 0))) a!9 (= L1_5_n 0))))
  (th-lemma (unit-resolution a!1 (asserted spacer_proxy!4) (not (<= L1_4_n 0)))
            a!3
            (th-lemma a!10 (<= L1_5_n 0))
            false))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (<= L1_5_n 0)
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 0 L1 (<= L1_5_n 0)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 0 L1 (<= L1_5_n 0)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (<= L1_5_n 0) |L1#level_0!37|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> L2_tr0 (<= L1_5_0 0)) |L2#level_1!62|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> L1_tr1 (<= L1_5_0 0)) |L1#level_1!112|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 1 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 1 depth: 2
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!3 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= L2_4_n L1_5_0)))
      (a!4 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!5 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!9 (monotonicity (rewrite (= (=> L2_tr1 false) (not L2_tr1)))
                         (= (or (=> L2_tr1 false) |L2#level_1!62|)
                            (or (not L2_tr1) |L2#level_1!62|))))
      (a!14 (asserted (or (=> L2_tr0 (<= L1_5_0 0)) |L2#level_1!62|)))
      (a!15 (rewrite (= (=> L2_tr0 (<= L1_5_0 0))
                        (or (not L2_tr0) (<= L1_5_0 0)))))
      (a!16 (= (or (=> L2_tr0 (<= L1_5_0 0)) |L2#level_1!62|)
               (or (or (not L2_tr0) (<= L1_5_0 0)) |L2#level_1!62|)))
      (a!17 (= (or (or (not L2_tr0) (<= L1_5_0 0)) |L2#level_1!62|)
               (or (not L2_tr0) (<= L1_5_0 0) |L2#level_1!62|)))
      (a!18 (= (or (=> L2_tr0 (<= L1_5_0 0)) |L2#level_1!62|)
               (or (not L2_tr0) (<= L1_5_0 0) |L2#level_1!62|)))
      (a!20 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
(let ((a!2 (or (not (= L2_5_n 0))
               (not (= L1_0_0 L2_0_n))
               (not (= L1_2_0 L2_2_n))
               (not (= L1_4_0 L2_4_n))
               (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
               (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
               (not (= L1_1_0 (select aux!15_n L2_0_n)))
               (not (= L1_3_0 (select aux!14_n L2_2_n)))
               (not (= L2_1_n (select aux!12_n L2_0_n)))
               (not (= L2_3_n (select aux!13_n L2_2_n)))
               a!1))
      (a!6 (monotonicity (monotonicity (rewrite a!4) (= a!3 a!5))
                         (= (or (not L2_tr0) a!3) (or (not L2_tr0) a!5))))
      (a!10 (mp (asserted (or (=> L2_tr1 false) |L2#level_1!62|))
                a!9
                (or (not L2_tr1) |L2#level_1!62|)))
      (a!21 (unit-resolution (asserted (or (not spacer_proxy!3) a!20))
                             (asserted spacer_proxy!3)
                             a!20)))
(let ((a!7 (mp (asserted (or (not L2_tr0) a!3)) a!6 (or (not L2_tr0) a!5)))
      (a!8 (monotonicity (rewrite (= a!5 (not a!2)))
                         (= (or (not L2_tr0) a!5) (or (not L2_tr0) (not a!2)))))
      (a!11 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (unit-resolution a!10
                                              (asserted (not |L2#level_1!62|))
                                              (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0))
      (a!22 (or a!2 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!12 (unit-resolution (mp a!7 a!8 (or (not L2_tr0) (not a!2)))
                             a!11
                             (not a!2)))
      (a!19 (unit-resolution (mp a!14
                                 (trans (monotonicity a!15 a!16)
                                        (rewrite a!17)
                                        a!18)
                                 (or (not L2_tr0) (<= L1_5_0 0) |L2#level_1!62|))
                             a!11
                             (asserted (not |L2#level_1!62|))
                             (<= L1_5_0 0))))
(let ((a!13 (unit-resolution (def-axiom (or a!2 (= L2_5_n 0)))
                             a!12
                             (= L2_5_n 0)))
      (a!23 (unit-resolution (def-axiom a!22)
                             a!12
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
  (th-lemma a!13 (th-lemma a!19 a!21 a!23 (not (>= L2_5_n 0))) false))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 L2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 L2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0) |L2#level_1!62|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0))))
  (or a!1 |query!0#level_2!39|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0))))
  (or a!1 |query!0#level_2!39|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0))))
  (or a!1 |query!0#level_2!39|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0))))
  (or a!1 |query!0#level_2!39|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0))))
  (or a!1 |L2#level_2!63|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 2 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 2 depth: 2
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (=> query!0_dummy (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (rewrite (= (+ L2_4_3 (* (- 1) L2_5_3)) (+ (* (- 1) L2_5_3) L2_4_3))))
      (a!3 (= (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
              (<= (+ (* (- 1) L2_5_3) L2_4_3) 0)))
      (a!4 (=> query!0_dummy (<= (+ (* (- 1) L2_5_3) L2_4_3) 0)))
      (a!5 (or (not query!0_dummy) (<= (+ (* (- 1) L2_5_3) L2_4_3) 0)))
      (a!7 (= (<= (+ (* (- 1) L2_5_3) L2_4_3) 0)
              (>= (+ L2_5_3 (* (- 1) L2_4_3)) 0)))
      (a!8 (or (not query!0_dummy) (>= (+ L2_5_3 (* (- 1) L2_4_3)) 0)))
      (a!9 (or (not query!0_dummy)
               (>= (+ L2_5_3 (* (- 1) L2_4_3)) 0)
               |query!0#level_2!39|))
      (a!13 (or (not (= L2_0_0 query!0_0_n))
                (not (= L2_2_0 query!0_0_n))
                (not (= L2_4_0 query!0_1_n))
                (not (= L2_5_0 query!0_0_n))
                (not (= L2_0_1 query!0_4_n))
                (not (= L2_2_1 query!0_2_n))
                (not (= L2_4_1 query!0_1_n))
                (not (= L2_5_1 query!0_0_n))
                (not (= L2_0_2 query!0_4_n))
                (not (= L2_2_2 query!0_0_n))
                (not (= L2_4_2 query!0_1_n))
                (not (= L2_5_2 query!0_0_n))
                (not (= L2_0_3 query!0_0_n))
                (not (= L2_2_3 query!0_2_n))
                (not (= L2_4_3 query!0_1_n))
                (not (= L2_5_3 query!0_0_n))
                (not (= (select aux!10_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (not (= (select aux!4_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (not (= (select aux!7_n query!0_0_n)
                        (select aux!2_n query!0_0_n)))
                (not (= (select aux!9_n query!0_2_n)
                        (select aux!2_n query!0_2_n)))
                (not (= (select aux!6_n query!0_4_n)
                        (select aux!1_n query!0_4_n)))
                (not (= (select aux!5_n query!0_2_n)
                        (select aux!2_n query!0_2_n)))
                (not (= (select aux!8_n query!0_4_n)
                        (select aux!1_n query!0_4_n)))
                (not (= (select aux!3_n query!0_0_n)
                        (select aux!2_n query!0_0_n)))
                (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
                (not (= L2_1_3 (select aux!10_n query!0_0_n)))
                (not (= L2_3_3 (select aux!9_n query!0_2_n)))
                (not (= L2_3_2 (select aux!7_n query!0_0_n)))
                (not (= L2_1_2 (select aux!8_n query!0_4_n)))
                (not (= L2_1_1 (select aux!6_n query!0_4_n)))
                (not (= L2_3_1 (select aux!5_n query!0_2_n)))
                (not (= query!0_3_n (select aux!2_n query!0_2_n)))
                (not (= query!0_5_n (select aux!1_n query!0_4_n)))
                (not (= L2_1_0 (select aux!4_n query!0_0_n)))
                (not (= L2_3_0 (select aux!3_n query!0_0_n)))
                (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!14 (and (= L2_0_0 query!0_0_n)
                 (= L2_2_0 query!0_0_n)
                 (= L2_4_0 query!0_1_n)
                 (= L2_5_0 query!0_0_n)
                 (= L2_0_1 query!0_4_n)
                 (= L2_2_1 query!0_2_n)
                 (= L2_4_1 query!0_1_n)
                 (= L2_5_1 query!0_0_n)
                 (= L2_0_2 query!0_4_n)
                 (= L2_2_2 query!0_0_n)
                 (= L2_4_2 query!0_1_n)
                 (= L2_5_2 query!0_0_n)
                 (= L2_0_3 query!0_0_n)
                 (= L2_2_3 query!0_2_n)
                 (= L2_4_3 query!0_1_n)
                 (= L2_5_3 query!0_0_n)
                 (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (not (= (select aux!2_n query!0_0_n)
                         (select aux!1_n query!0_0_n)))
                 (= L2_1_3 (select aux!10_n query!0_0_n))
                 (= L2_3_3 (select aux!9_n query!0_2_n))
                 (= L2_3_2 (select aux!7_n query!0_0_n))
                 (= L2_1_2 (select aux!8_n query!0_4_n))
                 (= L2_1_1 (select aux!6_n query!0_4_n))
                 (= L2_3_1 (select aux!5_n query!0_2_n))
                 (= query!0_3_n (select aux!2_n query!0_2_n))
                 (= query!0_5_n (select aux!1_n query!0_4_n))
                 (= L2_1_0 (select aux!4_n query!0_0_n))
                 (= L2_3_0 (select aux!3_n query!0_0_n))
                 (not (<= query!0_1_n query!0_0_n))))
      (a!15 (= (<= query!0_1_n query!0_0_n)
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!16 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0))))
(let ((a!6 (monotonicity (trans (monotonicity (monotonicity a!2 a!3)
                                              (= a!1 a!4))
                                (rewrite (= a!4 a!5))
                                (= a!1 a!5))
                         (= (or a!1 |query!0#level_2!39|)
                            (or a!5 |query!0#level_2!39|))))
      (a!10 (trans (monotonicity (monotonicity (rewrite a!7) (= a!5 a!8))
                                 (= (or a!5 |query!0#level_2!39|)
                                    (or a!8 |query!0#level_2!39|)))
                   (rewrite (= (or a!8 |query!0#level_2!39|) a!9))
                   (= (or a!5 |query!0#level_2!39|) a!9)))
      (a!17 (monotonicity (rewrite a!15)
                          (= (not (<= query!0_1_n query!0_0_n)) a!16)))
      (a!18 (and (= L2_0_0 query!0_0_n)
                 (= L2_2_0 query!0_0_n)
                 (= L2_4_0 query!0_1_n)
                 (= L2_5_0 query!0_0_n)
                 (= L2_0_1 query!0_4_n)
                 (= L2_2_1 query!0_2_n)
                 (= L2_4_1 query!0_1_n)
                 (= L2_5_1 query!0_0_n)
                 (= L2_0_2 query!0_4_n)
                 (= L2_2_2 query!0_0_n)
                 (= L2_4_2 query!0_1_n)
                 (= L2_5_2 query!0_0_n)
                 (= L2_0_3 query!0_0_n)
                 (= L2_2_3 query!0_2_n)
                 (= L2_4_3 query!0_1_n)
                 (= L2_5_3 query!0_0_n)
                 (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (not (= (select aux!2_n query!0_0_n)
                         (select aux!1_n query!0_0_n)))
                 (= L2_1_3 (select aux!10_n query!0_0_n))
                 (= L2_3_3 (select aux!9_n query!0_2_n))
                 (= L2_3_2 (select aux!7_n query!0_0_n))
                 (= L2_1_2 (select aux!8_n query!0_4_n))
                 (= L2_1_1 (select aux!6_n query!0_4_n))
                 (= L2_3_1 (select aux!5_n query!0_2_n))
                 (= query!0_3_n (select aux!2_n query!0_2_n))
                 (= query!0_5_n (select aux!1_n query!0_4_n))
                 (= L2_1_0 (select aux!4_n query!0_0_n))
                 (= L2_3_0 (select aux!3_n query!0_0_n))
                 a!16)))
(let ((a!11 (mp (asserted (or a!1 |query!0#level_2!39|))
                (trans a!6 a!10 (= (or a!1 |query!0#level_2!39|) a!9))
                a!9))
      (a!19 (monotonicity (monotonicity a!17 (= a!14 a!18))
                          (= (or (not query!0_dummy) a!14)
                             (or (not query!0_dummy) a!18))))
      (a!21 (monotonicity (rewrite (= a!18 (not a!13)))
                          (= (or (not query!0_dummy) a!18)
                             (or (not query!0_dummy) (not a!13))))))
(let ((a!12 (unit-resolution a!11
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (asserted (not |query!0#level_2!39|))
                             (>= (+ L2_5_3 (* (- 1) L2_4_3)) 0)))
      (a!20 (mp (asserted (or (not query!0_dummy) a!14))
                a!19
                (or (not query!0_dummy) a!18))))
(let ((a!22 (unit-resolution (mp a!20 a!21 (or (not query!0_dummy) (not a!13)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!13))))
(let ((a!23 (unit-resolution (def-axiom (or a!13 (= L2_5_3 query!0_0_n)))
                             a!22
                             (= L2_5_3 query!0_0_n)))
      (a!25 (unit-resolution (def-axiom (or a!13 (= L2_4_3 query!0_1_n)))
                             a!22
                             (= L2_4_3 query!0_1_n))))
(let ((a!24 (th-lemma a!23 (<= (+ L2_5_3 (* (- 1) query!0_0_n)) 0)))
      (a!26 (th-lemma (symm a!25 (= query!0_1_n L2_4_3))
                      (<= (+ query!0_1_n (* (- 1) L2_4_3)) 0))))
  (th-lemma a!12
            a!24
            (unit-resolution (def-axiom (or a!13 a!16)) a!22 a!16)
            a!26
            false))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_2!39|)
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 3 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!146))
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_3_2 () Int
  7)
(define-fun L2_1_0 () Int
  4)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  6)
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  7)
(define-fun |query!0#level_4!80| () Bool
  false)
(define-fun |query!0#level_3!68| () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  2)
(define-fun query!0_1_n () Int
  0)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!147))
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!148))
(define-fun L2_1_3 () Int
  4)
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!152))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  false)
(define-fun query!0_4_n () Int
  2)
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  6)
(define-fun query!0_0_n () Int
  (- 1))
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!149))
(define-fun L2_3_3 () Int
  5)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_0_0 () Int
  (- 1))
(define-fun L2_2_3 () Int
  3)
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!154))
(define-fun L2_4_1 () Int
  0)
(define-fun L2_1_2 () Int
  6)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!145))
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!151))
(define-fun query!0_3_n () Int
  5)
(define-fun L2_3_1 () Int
  5)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  3)
(define-fun L2_2_0 () Int
  (- 1))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_0_2 () Int
  2)
(define-fun L2_2_1 () Int
  3)
(define-fun L2_4_0 () Int
  0)
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!150))
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!153))
(define-fun k!151 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!148 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!145 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!153 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!150 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!147 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!152 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!149 ((x!0 Int)) Int
  (ite (= x!0 3) 5
  (ite (= x!0 (- 1)) 7
    5)))
(define-fun k!146 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
  (ite (= x!0 2) 6
    4)))
(define-fun k!154 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 3
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun L1_0_0 () Int
  0)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  5920)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  0)
(define-fun L2_4_n () Int
  1)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!167))
(define-fun L1_5_0 () Int
  1)
(define-fun L1_1_0 () Int
  5920)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!170))
(define-fun |L2#level_2!63| () Bool
  false)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!169))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  5921)
(define-fun L2_0_n () Int
  0)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!168))
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun L2_3_n () Int
  5921)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L1_4_0 () Int
  1)
(define-fun L2_tr0 () Bool
  true)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun k!167 ((x!0 Int)) Int
  (ite (= x!0 0) 5920
    5920))
(define-fun k!168 ((x!0 Int)) Int
  (ite (= x!0 0) 5920
    5920))
(define-fun k!169 ((x!0 Int)) Int
  (ite (= x!0 0) 5921
    5921))
(define-fun k!170 ((x!0 Int)) Int
  (ite (= x!0 0) 5921
    5921))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (<= L2_4_n L1_5_0)
       a!1
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (not (<= L1_4_0 0)) (<= L1_4_0 L1_5_0) a!1 (= L1_2_0 0) (= L1_0_0 0)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 3
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not |L1#reach_case_0_1|)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!3 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!4 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!7 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!11 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!12 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!13 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!19 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!20 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!23 (asserted (or (not spacer_proxy!4) (not (<= L1_4_n 0)))))
      (a!24 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!35 (asserted (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!36 (rewrite (= (=> L1_tr1 (<= L1_5_1 0))
                        (or (not L1_tr1) (<= L1_5_1 0)))))
      (a!37 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!38 (= (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!39 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!47 (unit-resolution (asserted (or (not spacer_proxy!3) (>= L1_2_n 0)))
                             (asserted spacer_proxy!3)
                             (>= L1_2_n 0)))
      (a!48 (unit-resolution (asserted (or (not spacer_proxy!2) (<= L1_2_n 0)))
                             (asserted spacer_proxy!2)
                             (<= L1_2_n 0)))
      (a!52 (unit-resolution (asserted (or (not spacer_proxy!6) (>= L1_0_n 0)))
                             (asserted spacer_proxy!6)
                             (>= L1_0_n 0)))
      (a!53 (unit-resolution (asserted (or (not spacer_proxy!5) (<= L1_0_n 0)))
                             (asserted spacer_proxy!5)
                             (<= L1_0_n 0))))
(let ((a!2 (unit-resolution (asserted (or (not spacer_proxy!0) a!1))
                            (asserted spacer_proxy!0)
                            a!1))
      (a!5 (or (not (= L1_0_0 L1_0_n))
               (not (= L1_4_0 L1_4_n))
               (not (= L1_5_0 L1_2_0))
               (not (= L1_0_1 L1_0_n))
               (not (= L1_2_1 L1_2_n))
               (not (= L1_4_1 L1_4_n))
               (not (= L1_5_1 L1_2_0))
               (not (= a!3 (select aux!29_n L1_0_n)))
               (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
               (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
               (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
               (not (= L1_3_1 (select aux!35_n L1_2_n)))
               (not (= L1_1_1 (select aux!36_n L1_0_n)))
               (not (= L1_3_0 (select aux!33_n L1_2_0)))
               a!4
               (not (= L1_1_n (select aux!29_n L1_0_n)))
               (not (= L1_1_0 (select aux!34_n L1_0_n)))
               (not (= L1_3_n (select aux!30_n L1_2_n)))
               (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!8 (and (= L1_0_0 L1_0_n)
                (= L1_4_0 L1_4_n)
                (= L1_5_0 L1_2_0)
                (= L1_0_1 L1_0_n)
                (= L1_2_1 L1_2_n)
                (= L1_4_1 L1_4_n)
                (= L1_5_1 L1_2_0)
                a!7
                (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                (= L1_3_1 (select aux!35_n L1_2_n))
                (= L1_1_1 (select aux!36_n L1_0_n))
                (= L1_3_0 (select aux!33_n L1_2_0))
                (= L1_5_n (+ 1 L1_2_0))
                (= L1_1_n (select aux!29_n L1_0_n))
                (= L1_1_0 (select aux!34_n L1_0_n))
                (= L1_3_n (select aux!30_n L1_2_n))
                (not (<= L1_4_n L1_2_0))))
      (a!9 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              a!3))
      (a!14 (monotonicity (rewrite a!12) (= (not (<= L1_4_n L1_2_0)) a!13)))
      (a!15 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!3 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!13))
      (a!21 (monotonicity (rewrite (= a!19 (not a!20)))
                          (= (or (not L1_tr0) a!19)
                             (or (not L1_tr0) (not a!20)))))
      (a!25 (unit-resolution (asserted a!24)
                             (asserted spacer_proxy!1)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!51 (def-axiom (or (not (= L1_0_n L1_2_0))
                           (= (select aux!32_n L1_2_0) a!3)))))
(let ((a!6 (def-axiom (or a!5 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!10 (monotonicity (rewrite a!9)
                          (= a!7 (= a!3 (select aux!29_n L1_0_n)))))
      (a!18 (monotonicity (rewrite (= a!15 (not a!5)))
                          (= (or (not L1_tr1) a!15) (or (not L1_tr1) (not a!5)))))
      (a!22 (mp (asserted (or (not L1_tr0) a!19))
                a!21
                (or (not L1_tr0) (not a!20))))
      (a!26 (th-lemma (unit-resolution a!23
                                       (asserted spacer_proxy!4)
                                       (not (<= L1_4_n 0)))
                      a!25
                      (not (<= L1_5_n 0))))
      (a!31 (def-axiom (or a!5
                           (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))))
      (a!41 (or a!5 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!57 (def-axiom (or a!5 (= a!3 (select aux!29_n L1_0_n)))))
      (a!59 (def-axiom (or a!5 (= L1_1_n (select aux!29_n L1_0_n))))))
(let ((a!16 (monotonicity (monotonicity a!10 (rewrite a!11) a!14 (= a!8 a!15))
                          (= (or (not L1_tr1) a!8) (or (not L1_tr1) a!15))))
      (a!27 (lemma (th-lemma (hypothesis (= L1_5_n 0)) a!26 false)
                   (not (= L1_5_n 0)))))
(let ((a!17 (mp (asserted (or (not L1_tr1) a!8)) a!16 (or (not L1_tr1) a!15)))
      (a!28 (unit-resolution (def-axiom (or a!20 (= L1_5_n 0))) a!27 a!20)))
(let ((a!29 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             (unit-resolution a!22 a!28 (not L1_tr0))
                             (asserted (not L1_ext0_n))
                             L1_tr1)))
(let ((a!30 (unit-resolution (mp a!17 a!18 (or (not L1_tr1) (not a!5)))
                             a!29
                             (not a!5)))
      (a!40 (unit-resolution (mp a!35
                                 (trans (monotonicity a!36 a!37)
                                        (rewrite a!38)
                                        a!39)
                                 (or (not L1_tr1)
                                     (<= L1_5_1 0)
                                     |L1#level_1!112|))
                             a!29
                             (asserted (not |L1#level_1!112|))
                             (<= L1_5_1 0))))
(let ((a!32 (symm (unit-resolution a!31
                                   a!30
                                   (= (select aux!32_n L1_2_n)
                                      (select aux!30_n L1_2_n)))
                  (= (select aux!30_n L1_2_n) (select aux!32_n L1_2_n))))
      (a!34 (unit-resolution (def-axiom (or a!5 (= L1_5_1 L1_2_0)))
                             a!30
                             (= L1_5_1 L1_2_0)))
      (a!42 (unit-resolution (def-axiom a!41)
                             a!30
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!60 (symm (unit-resolution a!59
                                   a!30
                                   (= L1_1_n (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) L1_1_n))))
(let ((a!33 (trans (unit-resolution a!6
                                    a!30
                                    (= L1_3_n (select aux!30_n L1_2_n)))
                   a!32
                   (= L1_3_n (select aux!32_n L1_2_n))))
      (a!43 (th-lemma a!42 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!44 (th-lemma (symm a!34 (= L1_2_0 L1_5_1))
                      (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!54 (trans (monotonicity (th-lemma a!52 a!53 (= L1_0_n 0))
                                 (symm a!34 (= L1_2_0 L1_5_1))
                                 (= (= L1_0_n L1_2_0) (= 0 L1_5_1)))
                   (commutativity (= (= 0 L1_5_1) (= L1_5_1 0)))
                   (= (= L1_0_n L1_2_0) (= L1_5_1 0)))))
(let ((a!45 (th-lemma (hypothesis (not (>= L1_5_1 0)))
                      a!43
                      (unit-resolution a!23
                                       (asserted spacer_proxy!4)
                                       (not (<= L1_4_n 0)))
                      a!25
                      a!44
                      false)))
(let ((a!46 (th-lemma (hypothesis (not (= L1_5_1 0)))
                      a!40
                      (lemma a!45 (>= L1_5_1 0))
                      false)))
(let ((a!49 (trans (trans (symm a!34 (= L1_2_0 L1_5_1))
                          (lemma a!46 (= L1_5_1 0))
                          (= L1_2_0 0))
                   (symm (th-lemma a!47 a!48 (= L1_2_n 0)) (= 0 L1_2_n))
                   (= L1_2_0 L1_2_n)))
      (a!55 (mp (lemma a!46 (= L1_5_1 0))
                (symm a!54 (= (= L1_5_1 0) (= L1_0_n L1_2_0)))
                (= L1_0_n L1_2_0))))
(let ((a!50 (symm (monotonicity a!49
                                (= (select aux!32_n L1_2_0)
                                   (select aux!32_n L1_2_n)))
                  (= (select aux!32_n L1_2_n) (select aux!32_n L1_2_0)))))
(let ((a!56 (trans (trans a!33 a!50 (= L1_3_n (select aux!32_n L1_2_0)))
                   (unit-resolution a!51 a!55 (= (select aux!32_n L1_2_0) a!3))
                   (= L1_3_n a!3))))
(let ((a!58 (trans a!56
                   (unit-resolution a!57 a!30 (= a!3 (select aux!29_n L1_0_n)))
                   (= L1_3_n (select aux!29_n L1_0_n)))))
  (th-lemma a!2 (trans a!58 a!60 (= L1_3_n L1_1_n)) false))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(not (<= L1_5_n 0))
(= L1_0_n 0)
(= 0 L1_2_n)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(not (<= L1_5_n 0))
(= L1_0_n 0)
(= 0 L1_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(not (<= L1_5_n 0))
(= L1_0_n 0)
(= 0 L1_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 4 new size: 4
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= 0 L1_2_n)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 L1 (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 L1 (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0))
    |L1#level_1!112|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L2_tr0 a!1) |L2#level_2!63|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L1_tr1 a!1) |L1#level_2!113|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_1 0))
               (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0)
               (not (= L1_2_1 0)))))
  (or (=> L1_tr1 a!1) |L1#level_2!113|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 3
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!3 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
              (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!4 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!6 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
              (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!7 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!11 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!14 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!15 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!16 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!20 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!22 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!23 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!24 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!25 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!34 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!39 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!40 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!41 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0) |L2#level_2!63|))
      (a!52 (or (not (= L1_0_0 0))
                (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!53 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!54 (= (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!55 (or (not (= L1_0_0 0))
                (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!59 (= (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!60 (or (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!63 (or (not L2_tr0)
                (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))
                |L2#level_2!63|))
      (a!72 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!74 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!79 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!81 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!5 (monotonicity (monotonicity (monotonicity a!2 a!3) (= a!1 a!4))
                         (= (or (not spacer_proxy!0) a!1)
                            (or (not spacer_proxy!0) a!4))))
      (a!8 (monotonicity (monotonicity (rewrite a!6) (= a!4 a!7))
                         (= (or (not spacer_proxy!0) a!4)
                            (or (not spacer_proxy!0) a!7))))
      (a!12 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!11))
      (a!17 (monotonicity (monotonicity (rewrite a!15) (= a!14 a!16))
                          (= (or (not L2_tr0) a!14) (or (not L2_tr0) a!16))))
      (a!21 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!20
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!26 (monotonicity (rewrite a!24) (= (not (<= L2_4_n L2_5_0)) a!25)))
      (a!27 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!25))
      (a!35 (unit-resolution (asserted (or (not spacer_proxy!3) a!34))
                             (asserted spacer_proxy!3)
                             a!34))
      (a!42 (trans (monotonicity (rewrite (= a!39 a!40))
                                 (= (or a!39 |L2#level_2!63|)
                                    (or a!40 |L2#level_2!63|)))
                   (rewrite (= (or a!40 |L2#level_2!63|) a!41))
                   (= (or a!39 |L2#level_2!63|) a!41)))
      (a!56 (rewrite (= (=> L2_tr0 a!55) (or (not L2_tr0) a!55))))
      (a!58 (= (or (=> L2_tr0 a!52) |L2#level_2!63|)
               (or (or (not L2_tr0) a!55) |L2#level_2!63|)))
      (a!61 (monotonicity (monotonicity (rewrite a!59) (= a!55 a!60))
                          (= (or (not L2_tr0) a!55) (or (not L2_tr0) a!60))))
      (a!62 (= (or (or (not L2_tr0) a!55) |L2#level_2!63|)
               (or (or (not L2_tr0) a!60) |L2#level_2!63|)))
      (a!64 (= (or (or (not L2_tr0) a!60) |L2#level_2!63|) a!63))
      (a!65 (= (or (or (not L2_tr0) a!55) |L2#level_2!63|) a!63))
      (a!73 (unit-resolution (asserted a!72)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!75 (unit-resolution (asserted a!74)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!80 (unit-resolution (asserted a!79)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!82 (unit-resolution (asserted a!81)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!9 (trans a!5
                  a!8
                  (= (or (not spacer_proxy!0) a!1)
                     (or (not spacer_proxy!0) a!7))))
      (a!13 (def-axiom (or a!12 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!18 (mp (asserted (or (not L2_tr0) a!14)) a!17 (or (not L2_tr0) a!16)))
      (a!19 (monotonicity (rewrite (= a!16 (not a!12)))
                          (= (or (not L2_tr0) a!16)
                             (or (not L2_tr0) (not a!12)))))
      (a!28 (monotonicity (monotonicity (rewrite a!23) a!26 (= a!22 a!27))
                          (= (or (not L2_tr1) a!22) (or (not L2_tr1) a!27))))
      (a!30 (monotonicity (rewrite (= a!27 (not a!21)))
                          (= (or (not L2_tr1) a!27)
                             (or (not L2_tr1) (not a!21)))))
      (a!36 (or a!21 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!43 (unit-resolution (mp (asserted (or a!39 |L2#level_2!63|)) a!42 a!41)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_2!63|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!46 (def-axiom (or a!12
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!49 (def-axiom (or a!12 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!57 (trans (monotonicity (monotonicity (monotonicity a!53 a!54)
                                               (= a!52 a!55))
                                 (= (=> L2_tr0 a!52) (=> L2_tr0 a!55)))
                   a!56
                   (= (=> L2_tr0 a!52) (or (not L2_tr0) a!55))))
      (a!69 (or a!12 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!87 (def-axiom (or a!12 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!88 (def-axiom (or a!12
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!91 (def-axiom (or a!12 (= L1_3_0 (select aux!14_n L2_2_n))))))
(let ((a!10 (mp (asserted (or (not spacer_proxy!0) a!1))
                a!9
                (or (not spacer_proxy!0) a!7)))
      (a!29 (mp (asserted (or (not L2_tr1) a!22)) a!28 (or (not L2_tr1) a!27)))
      (a!66 (trans (monotonicity a!57 a!58)
                   (trans (monotonicity a!61 a!62) (rewrite a!64) a!65)
                   (= (or (=> L2_tr0 a!52) |L2#level_2!63|) a!63))))
(let ((a!31 (unit-resolution (mp a!29 a!30 (or (not L2_tr1) (not a!21)))
                             (hypothesis L2_tr1)
                             (not a!21)))
      (a!67 (mp (asserted (or (=> L2_tr0 a!52) |L2#level_2!63|)) a!66 a!63)))
(let ((a!32 (unit-resolution (def-axiom (or a!21 (= L2_4_0 L2_4_n)))
                             a!31
                             (= L2_4_0 L2_4_n)))
      (a!37 (unit-resolution (def-axiom a!36)
                             a!31
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!33 (th-lemma a!32 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!38 (th-lemma a!37 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!44 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!33 a!35 a!38 a!43 false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!45 (unit-resolution (mp a!18 a!19 (or (not L2_tr0) (not a!12)))
                             a!44
                             (not a!12))))
(let ((a!47 (symm (unit-resolution a!46
                                   a!45
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!50 (symm (unit-resolution a!49
                                   a!45
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!68 (unit-resolution (def-axiom (or a!12 (= L2_5_n 0)))
                             a!45
                             (= L2_5_n 0)))
      (a!70 (unit-resolution (def-axiom a!69)
                             a!45
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!71 (unit-resolution (def-axiom (or a!12 (= L1_0_0 L2_0_n)))
                             a!45
                             (= L1_0_0 L2_0_n)))
      (a!78 (unit-resolution (def-axiom (or a!12 (= L1_2_0 L2_2_n)))
                             a!45
                             (= L1_2_0 L2_2_n)))
      (a!89 (symm (unit-resolution a!88
                                   a!45
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!92 (symm (unit-resolution a!91
                                   a!45
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0))))
(let ((a!48 (trans (unit-resolution a!13
                                    a!45
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!47
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!76 (monotonicity (trans a!71
                                 (th-lemma a!73 a!75 (= L2_0_n L2_5_n))
                                 (= L1_0_0 L2_5_n))
                          (= (= L1_0_0 0) (= L2_5_n 0))))
      (a!83 (monotonicity (trans a!78
                                 (th-lemma a!80 a!82 (= L2_2_n L2_5_n))
                                 (= L1_2_0 L2_5_n))
                          (= (= L1_2_0 0) (= L2_5_n 0))))
      (a!90 (trans (unit-resolution a!87
                                    a!45
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!89
                   (= L2_3_n (select aux!14_n L2_2_n)))))
(let ((a!51 (th-lemma (trans a!48 a!50 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!77 (mp a!68 (symm a!76 (= (= L2_5_n 0) (= L1_0_0 0))) (= L1_0_0 0)))
      (a!84 (mp a!68 (symm a!83 (= (= L2_5_n 0) (= L1_2_0 0))) (= L1_2_0 0)))
      (a!93 (th-lemma (trans a!90 a!92 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!85 (unit-resolution (hypothesis (not (= L1_2_0 0))) a!84 false)))
(let ((a!86 (unit-resolution a!67
                             (th-lemma (th-lemma a!68 (>= L2_5_n 0))
                                       a!35
                                       a!70
                                       (not (<= L1_5_0 0)))
                             (asserted (not |L2#level_2!63|))
                             a!44
                             a!77
                             (lemma a!85 (= L1_2_0 0))
                             (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (th-lemma (unit-resolution a!10 (asserted spacer_proxy!0) a!7)
            a!51
            a!86
            a!93
            false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))
(= L2_2_n L2_5_n)
(= L2_0_n L2_5_n)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))
(= L2_2_n L2_5_n)
(= L2_0_n L2_5_n)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))
(= L2_2_n L2_5_n)
(= L2_0_n L2_5_n)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 4 new size: 4
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
    (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
    (not (= L2_0_n L2_5_n))
    (not (= L2_2_n L2_5_n)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 L2 (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L2 (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2
      |L2#level_2!63|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_3!79|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 3 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!240))
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_3_2 () Int
  0)
(define-fun L2_1_0 () Int
  1)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  1796)
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  0)
(define-fun |query!0#level_4!80| () Bool
  false)
(define-fun |query!0#level_3!68| () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 2))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!241))
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!242))
(define-fun L2_1_3 () Int
  1)
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!246))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  false)
(define-fun query!0_4_n () Int
  (- 2))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  1796)
(define-fun query!0_0_n () Int
  (- 1))
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!243))
(define-fun L2_3_3 () Int
  8365)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_0_0 () Int
  (- 1))
(define-fun L2_2_3 () Int
  (- 2284))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!248))
(define-fun L2_4_1 () Int
  0)
(define-fun L2_1_2 () Int
  1796)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!239))
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!245))
(define-fun query!0_3_n () Int
  8365)
(define-fun L2_3_1 () Int
  8365)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  (- 2284))
(define-fun L2_2_0 () Int
  (- 1))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_0_2 () Int
  (- 2))
(define-fun L2_2_1 () Int
  (- 2284))
(define-fun L2_4_0 () Int
  0)
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!244))
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!247))
(define-fun k!239 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!247 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 1796
    1796))
(define-fun k!244 ((x!0 Int)) Int
  (ite (= x!0 (- 2284)) 8365
    8365))
(define-fun k!241 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!246 ((x!0 Int)) Int
  (ite (= x!0 (- 2284)) 8365
    8365))
(define-fun k!243 ((x!0 Int)) Int
  (ite (= x!0 (- 2284)) 8365
  (ite (= x!0 (- 1)) 0
    8365)))
(define-fun k!240 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
  (ite (= x!0 (- 2)) 1796
    1)))
(define-fun k!248 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))
(define-fun k!245 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 1796
    1796))
(define-fun k!242 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L2_1_3) L2_3_2)))))
  (and (not (<= L2_5_3 L2_0_2))
       (not (<= L2_5_3 L2_2_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 3
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun L1_0_0 () Int
  0)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun L2_1_n () Int
  975)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  0)
(define-fun L2_4_n () Int
  1)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!261))
(define-fun L1_5_0 () Int
  1)
(define-fun L1_1_0 () Int
  975)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!264))
(define-fun |L2#level_2!63| () Bool
  false)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!263))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  974)
(define-fun L2_0_n () Int
  0)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!262))
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun L2_3_n () Int
  974)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L1_4_0 () Int
  1)
(define-fun L2_tr0 () Bool
  true)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun k!263 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!264 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!261 ((x!0 Int)) Int
  (ite (= x!0 0) 975
    975))
(define-fun k!262 ((x!0 Int)) Int
  (ite (= x!0 0) 975
    975))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (<= L2_4_n L1_5_0)
       a!1
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L1_3_0 (* (- 1) L1_1_0))))))
  (and (not (<= L1_4_0 0)) (<= L1_4_0 L1_5_0) a!1 (= L1_2_0 0) (= L1_0_0 0)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 3
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not |L1#reach_case_0_1|)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!3 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!6 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!7 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!8 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!13 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!18 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
      (a!19 (rewrite (= (+ L1_1_n (* (- 1) L1_3_n)) (+ (* (- 1) L1_3_n) L1_1_n))))
      (a!20 (= (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)
               (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)))
      (a!21 (not (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)))
      (a!23 (= (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)
               (>= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!24 (not (>= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!28 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!29 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!32 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!34 (asserted (or (not spacer_proxy!4) (not (<= L1_4_n 0)))))
      (a!41 (asserted (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!42 (rewrite (= (=> L1_tr1 (<= L1_5_1 0))
                        (or (not L1_tr1) (<= L1_5_1 0)))))
      (a!43 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!44 (= (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!45 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!50 (hypothesis (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!52 (not (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!54 (unit-resolution (asserted (or (not spacer_proxy!3) (>= L1_2_n 0)))
                             (asserted spacer_proxy!3)
                             (>= L1_2_n 0)))
      (a!55 (unit-resolution (asserted (or (not spacer_proxy!2) (<= L1_2_n 0)))
                             (asserted spacer_proxy!2)
                             (<= L1_2_n 0)))
      (a!69 (unit-resolution (asserted (or (not spacer_proxy!6) (>= L1_0_n 0)))
                             (asserted spacer_proxy!6)
                             (>= L1_0_n 0)))
      (a!70 (unit-resolution (asserted (or (not spacer_proxy!5) (<= L1_0_n 0)))
                             (asserted spacer_proxy!5)
                             (<= L1_0_n 0))))
(let ((a!2 (and (= L1_0_0 L1_0_n)
                (= L1_4_0 L1_4_n)
                (= L1_5_0 L1_2_0)
                (= L1_0_1 L1_0_n)
                (= L1_2_1 L1_2_n)
                (= L1_4_1 L1_4_n)
                (= L1_5_1 L1_2_0)
                a!1
                (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                (= L1_3_1 (select aux!35_n L1_2_n))
                (= L1_1_1 (select aux!36_n L1_0_n))
                (= L1_3_0 (select aux!33_n L1_2_0))
                (= L1_5_n (+ 1 L1_2_0))
                (= L1_1_n (select aux!29_n L1_0_n))
                (= L1_1_0 (select aux!34_n L1_0_n))
                (= L1_3_n (select aux!30_n L1_2_n))
                (not (<= L1_4_n L1_2_0))))
      (a!4 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              a!3))
      (a!9 (monotonicity (rewrite a!7) (= (not (<= L1_4_n L1_2_0)) a!8)))
      (a!10 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!3 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!8))
      (a!14 (or (not (= L1_0_0 L1_0_n))
                (not (= L1_4_0 L1_4_n))
                (not (= L1_5_0 L1_2_0))
                (not (= L1_0_1 L1_0_n))
                (not (= L1_2_1 L1_2_n))
                (not (= L1_4_1 L1_4_n))
                (not (= L1_5_1 L1_2_0))
                (not (= a!3 (select aux!29_n L1_0_n)))
                (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
                (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
                (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
                (not (= L1_3_1 (select aux!35_n L1_2_n)))
                (not (= L1_1_1 (select aux!36_n L1_0_n)))
                (not (= L1_3_0 (select aux!33_n L1_2_0)))
                a!13
                (not (= L1_1_n (select aux!29_n L1_0_n)))
                (not (= L1_1_0 (select aux!34_n L1_0_n)))
                (not (= L1_3_n (select aux!30_n L1_2_n)))
                (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!17 (def-axiom (or (not (= L1_0_n L1_2_0))
                           (= (select aux!32_n L1_2_0) a!3))))
      (a!22 (monotonicity (monotonicity (monotonicity a!19 a!20) (= a!18 a!21))
                          (= (or (not spacer_proxy!18) a!18)
                             (or (not spacer_proxy!18) a!21))))
      (a!25 (monotonicity (monotonicity (rewrite a!23) (= a!21 a!24))
                          (= (or (not spacer_proxy!18) a!21)
                             (or (not spacer_proxy!18) a!24))))
      (a!30 (monotonicity (rewrite (= a!28 (not a!29)))
                          (= (or (not L1_tr0) a!28)
                             (or (not L1_tr0) (not a!29)))))
      (a!33 (unit-resolution (asserted a!32)
                             (asserted spacer_proxy!1)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!67 (= (not (= L1_3_n L1_1_n)) (not (= (select aux!32_n L1_2_0) a!3))))
      (a!71 (trans (monotonicity (th-lemma a!69 a!70 (= L1_0_n 0))
                                 (= (= L1_0_n L1_2_0) (= 0 L1_2_0)))
                   (commutativity (= (= 0 L1_2_0) (= L1_2_0 0)))
                   (= (= L1_0_n L1_2_0) (= L1_2_0 0)))))
(let ((a!5 (monotonicity (rewrite a!4) (= a!1 (= a!3 (select aux!29_n L1_0_n)))))
      (a!15 (monotonicity (rewrite (= a!10 (not a!14)))
                          (= (or (not L1_tr1) a!10)
                             (or (not L1_tr1) (not a!14)))))
      (a!16 (or a!14 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!26 (trans a!22
                   a!25
                   (= (or (not spacer_proxy!18) a!18)
                      (or (not spacer_proxy!18) a!24))))
      (a!31 (mp (asserted (or (not L1_tr0) a!28))
                a!30
                (or (not L1_tr0) (not a!29))))
      (a!35 (th-lemma a!33
                      (unit-resolution a!34
                                       (asserted spacer_proxy!4)
                                       (not (<= L1_4_n 0)))
                      (not (<= L1_5_n 0))))
      (a!57 (def-axiom (or a!14
                           (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))))
      (a!59 (def-axiom (or a!14 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!61 (def-axiom (or a!14 (= a!3 (select aux!29_n L1_0_n)))))
      (a!62 (def-axiom (or a!14 (= L1_1_n (select aux!29_n L1_0_n))))))
(let ((a!11 (monotonicity (monotonicity a!5 (rewrite a!6) a!9 (= a!2 a!10))
                          (= (or (not L1_tr1) a!2) (or (not L1_tr1) a!10))))
      (a!27 (mp (asserted (or (not spacer_proxy!18) a!18))
                a!26
                (or (not spacer_proxy!18) a!24)))
      (a!36 (lemma (th-lemma (hypothesis (= L1_5_n 0)) a!35 false)
                   (not (= L1_5_n 0)))))
(let ((a!12 (mp (asserted (or (not L1_tr1) a!2)) a!11 (or (not L1_tr1) a!10)))
      (a!37 (unit-resolution (def-axiom (or a!29 (= L1_5_n 0))) a!36 a!29)))
(let ((a!38 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             (unit-resolution a!31 a!37 (not L1_tr0))
                             (asserted (not L1_ext0_n))
                             L1_tr1)))
(let ((a!39 (unit-resolution (mp a!12 a!15 (or (not L1_tr1) (not a!14)))
                             a!38
                             (not a!14)))
      (a!46 (unit-resolution (mp a!41
                                 (trans (monotonicity a!42 a!43)
                                        (rewrite a!44)
                                        a!45)
                                 (or (not L1_tr1)
                                     (<= L1_5_1 0)
                                     |L1#level_1!112|))
                             a!38
                             (asserted (not |L1#level_1!112|))
                             (<= L1_5_1 0))))
(let ((a!40 (unit-resolution (def-axiom (or a!14 (= L1_5_1 L1_2_0)))
                             a!39
                             (= L1_5_1 L1_2_0)))
      (a!47 (th-lemma (hypothesis (not (= L1_5_1 0)))
                      a!46
                      (hypothesis (>= L1_5_1 0))
                      false))
      (a!60 (symm (unit-resolution a!59
                                   a!39
                                   (= L1_3_n (select aux!30_n L1_2_n)))
                  (= (select aux!30_n L1_2_n) L1_3_n)))
      (a!63 (symm (unit-resolution a!62
                                   a!39
                                   (= L1_1_n (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) L1_1_n))))
(let ((a!48 (lemma a!47 (or (= L1_5_1 0) (not (>= L1_5_1 0)))))
      (a!49 (th-lemma (symm a!40 (= L1_2_0 L1_5_1))
                      (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!64 (trans (unit-resolution a!61 a!39 (= a!3 (select aux!29_n L1_0_n)))
                   a!63
                   (= a!3 L1_1_n)))
      (a!72 (trans (monotonicity a!40 (= (= L1_5_1 0) (= L1_2_0 0)))
                   (symm a!71 (= (= L1_2_0 0) (= L1_0_n L1_2_0)))
                   (= (= L1_5_1 0) (= L1_0_n L1_2_0)))))
(let ((a!51 (th-lemma (hypothesis (not (>= L1_5_1 0))) a!49 a!50 a!35 false)))
(let ((a!53 (unit-resolution (lemma a!51 (or (>= L1_5_1 0) a!52))
                             a!50
                             (>= L1_5_1 0))))
(let ((a!56 (trans (trans (symm a!40 (= L1_2_0 L1_5_1))
                          (unit-resolution a!48 a!53 (= L1_5_1 0))
                          (= L1_2_0 0))
                   (symm (th-lemma a!54 a!55 (= L1_2_n 0)) (= 0 L1_2_n))
                   (= L1_2_0 L1_2_n))))
(let ((a!58 (trans (monotonicity a!56
                                 (= (select aux!32_n L1_2_0)
                                    (select aux!32_n L1_2_n)))
                   (unit-resolution a!57
                                    a!39
                                    (= (select aux!32_n L1_2_n)
                                       (select aux!30_n L1_2_n)))
                   (= (select aux!32_n L1_2_0) (select aux!30_n L1_2_n)))))
(let ((a!65 (monotonicity (trans a!58 a!60 (= (select aux!32_n L1_2_0) L1_3_n))
                          a!64
                          (= (= (select aux!32_n L1_2_0) a!3) (= L1_3_n L1_1_n)))))
(let ((a!66 (symm a!65 (= (= L1_3_n L1_1_n) (= (select aux!32_n L1_2_0) a!3)))))
(let ((a!68 (mp (th-lemma (unit-resolution a!27 (asserted spacer_proxy!18) a!24)
                          (not (= L1_3_n L1_1_n)))
                (monotonicity a!66 a!67)
                (not (= (select aux!32_n L1_2_0) a!3)))))
(let ((a!73 (unit-resolution a!17
                             a!68
                             (mp (unit-resolution a!48 a!53 (= L1_5_1 0))
                                 a!72
                                 (= L1_0_n L1_2_0))
                             false)))
(let ((a!74 (unit-resolution (mp a!12 a!15 (or (not L1_tr1) (not a!14)))
                             (unit-resolution (def-axiom a!16)
                                              (th-lemma (lemma a!73 a!52) a!13)
                                              a!14)
                             (not L1_tr1))))
  (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                   a!74
                   (unit-resolution a!31 a!37 (not L1_tr0))
                   (asserted (not L1_ext0_n))
                   false)))))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (= L1_3_n L1_1_n))
(not (<= L1_5_n 0))
(<= L1_0_n 0)
(>= L1_0_n 0)
(not (<= L1_4_n 0))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(= 0 L1_2_n)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (= L1_3_n L1_1_n))
(not (<= L1_5_n 0))
(<= L1_0_n 0)
(>= L1_0_n 0)
(not (<= L1_4_n 0))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(= 0 L1_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= L1_3_n L1_1_n))
(not (<= L1_5_n 0))
(<= L1_0_n 0)
(>= L1_0_n 0)
(not (<= L1_4_n 0))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(= 0 L1_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 7
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (<= 0 L1_2_n))
      (not (>= 0 L1_2_n))
      (= L1_3_n L1_1_n)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      |L1#level_1!112|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!2) |L2#level_2!63|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_2!113|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (or (not (<= L1_0_1 0))
               a!1
               (not (>= L1_0_1 0))
               (<= L1_4_1 0)
               (not (>= L1_2_1 0))
               (not (<= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_2!113|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 3
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!3 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!4 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!9 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
              (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!18 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!20 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!21 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!22 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!26 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!28 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!29 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!30 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!31 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!40 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!45 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!46 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!47 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0) |L2#level_2!63|))
      (a!54 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!63 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!68 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!71 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!87 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!89 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!90 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)))
      (a!5 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!10 (or (not (<= L1_0_0 0))
                a!1
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!13 (or (not L2_tr0)
                (not (<= L1_0_0 0))
                a!1
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                |L2#level_2!63|))
      (a!19 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!18))
      (a!23 (monotonicity (monotonicity (rewrite a!21) (= a!20 a!22))
                          (= (or (not L2_tr0) a!20) (or (not L2_tr0) a!22))))
      (a!27 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!26
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!32 (monotonicity (rewrite a!30) (= (not (<= L2_4_n L2_5_0)) a!31)))
      (a!33 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!31))
      (a!41 (unit-resolution (asserted (or (not spacer_proxy!3) a!40))
                             (asserted spacer_proxy!3)
                             a!40))
      (a!48 (trans (monotonicity (rewrite (= a!45 a!46))
                                 (= (or a!45 |L2#level_2!63|)
                                    (or a!46 |L2#level_2!63|)))
                   (rewrite (= (or a!46 |L2#level_2!63|) a!47))
                   (= (or a!45 |L2#level_2!63|) a!47)))
      (a!55 (unit-resolution (asserted a!54)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!64 (unit-resolution (asserted a!63)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!69 (unit-resolution (asserted a!68)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!72 (unit-resolution (asserted a!71)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!88 (unit-resolution (asserted (or (not spacer_proxy!14) a!87))
                             (asserted spacer_proxy!14)
                             a!87)))
(let ((a!6 (rewrite (= (=> L2_tr0 a!5) (or (not L2_tr0) a!5))))
      (a!8 (= (or (=> L2_tr0 a!2) |L2#level_2!63|)
              (or (or (not L2_tr0) a!5) |L2#level_2!63|)))
      (a!11 (monotonicity (monotonicity (rewrite a!9) (= a!5 a!10))
                          (= (or (not L2_tr0) a!5) (or (not L2_tr0) a!10))))
      (a!12 (= (or (or (not L2_tr0) a!5) |L2#level_2!63|)
               (or (or (not L2_tr0) a!10) |L2#level_2!63|)))
      (a!14 (= (or (or (not L2_tr0) a!10) |L2#level_2!63|) a!13))
      (a!15 (= (or (or (not L2_tr0) a!5) |L2#level_2!63|) a!13))
      (a!24 (mp (asserted (or (not L2_tr0) a!20)) a!23 (or (not L2_tr0) a!22)))
      (a!25 (monotonicity (rewrite (= a!22 (not a!19)))
                          (= (or (not L2_tr0) a!22)
                             (or (not L2_tr0) (not a!19)))))
      (a!34 (monotonicity (monotonicity (rewrite a!29) a!32 (= a!28 a!33))
                          (= (or (not L2_tr1) a!28) (or (not L2_tr1) a!33))))
      (a!36 (monotonicity (rewrite (= a!33 (not a!27)))
                          (= (or (not L2_tr1) a!33)
                             (or (not L2_tr1) (not a!27)))))
      (a!42 (or a!27 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!49 (unit-resolution (mp (asserted (or a!45 |L2#level_2!63|)) a!48 a!47)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_2!63|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!59 (or a!19 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!73 (def-axiom (or a!19 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!74 (def-axiom (or a!19
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!77 (def-axiom (or a!19 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!80 (def-axiom (or a!19 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!81 (def-axiom (or a!19
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!84 (def-axiom (or a!19 (= L1_1_0 (select aux!15_n L2_0_n))))))
(let ((a!7 (trans (monotonicity (monotonicity (monotonicity a!3 a!4)
                                              (= a!2 a!5))
                                (= (=> L2_tr0 a!2) (=> L2_tr0 a!5)))
                  a!6
                  (= (=> L2_tr0 a!2) (or (not L2_tr0) a!5))))
      (a!35 (mp (asserted (or (not L2_tr1) a!28)) a!34 (or (not L2_tr1) a!33))))
(let ((a!16 (trans (monotonicity a!7 a!8)
                   (trans (monotonicity a!11 a!12) (rewrite a!14) a!15)
                   (= (or (=> L2_tr0 a!2) |L2#level_2!63|) a!13)))
      (a!37 (unit-resolution (mp a!35 a!36 (or (not L2_tr1) (not a!27)))
                             (hypothesis L2_tr1)
                             (not a!27))))
(let ((a!17 (mp (asserted (or (=> L2_tr0 a!2) |L2#level_2!63|)) a!16 a!13))
      (a!38 (unit-resolution (def-axiom (or a!27 (= L2_4_0 L2_4_n)))
                             a!37
                             (= L2_4_0 L2_4_n)))
      (a!43 (unit-resolution (def-axiom a!42)
                             a!37
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!39 (th-lemma a!38 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!44 (th-lemma a!43 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!50 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!39 a!41 a!44 a!49 false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!51 (unit-resolution (mp a!24 a!25 (or (not L2_tr0) (not a!19)))
                             a!50
                             (not a!19))))
(let ((a!52 (unit-resolution (def-axiom (or a!19 (= L1_0_0 L2_0_n)))
                             a!51
                             (= L1_0_0 L2_0_n)))
      (a!56 (unit-resolution (def-axiom (or a!19 (= L2_5_n 0)))
                             a!51
                             (= L2_5_n 0)))
      (a!57 (unit-resolution (def-axiom (or a!19 (= L1_4_0 L2_4_n)))
                             a!51
                             (= L1_4_0 L2_4_n)))
      (a!60 (unit-resolution (def-axiom a!59)
                             a!51
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!66 (unit-resolution (def-axiom (or a!19 (= L1_2_0 L2_2_n)))
                             a!51
                             (= L1_2_0 L2_2_n)))
      (a!75 (symm (unit-resolution a!74
                                   a!51
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!78 (symm (unit-resolution a!77
                                   a!51
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!82 (symm (unit-resolution a!81
                                   a!51
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!85 (symm (unit-resolution a!84
                                   a!51
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0))))
(let ((a!53 (th-lemma (symm a!52 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!58 (th-lemma (symm a!57 (= L2_4_n L1_4_0))
                      (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!62 (th-lemma (symm a!52 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!65 (th-lemma (symm a!57 (= L2_4_n L1_4_0))
                      (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!67 (th-lemma (symm a!66 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!70 (th-lemma (symm a!66 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!76 (trans (unit-resolution a!73
                                    a!51
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!75
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!83 (trans (unit-resolution a!80
                                    a!51
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!82
                   (= L2_1_n (select aux!15_n L2_0_n)))))
(let ((a!61 (th-lemma a!58 a!60 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!79 (th-lemma (trans a!76 a!78 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!86 (th-lemma (trans a!83 a!85 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0))))
  (unit-resolution a!17
                   (th-lemma a!53
                             a!55
                             (th-lemma a!56 (<= L2_5_n 0))
                             (<= L1_0_0 0))
                   a!61
                   (asserted (not |L2#level_2!63|))
                   a!50
                   (th-lemma a!62
                             a!64
                             (th-lemma a!56 (>= L2_5_n 0))
                             (>= L1_0_0 0))
                   (th-lemma a!65
                             a!41
                             (th-lemma a!56 (>= L2_5_n 0))
                             (not (<= L1_4_0 0)))
                   (th-lemma a!67
                             a!69
                             (th-lemma a!56 (>= L2_5_n 0))
                             (>= L1_2_0 0))
                   (th-lemma a!70
                             a!72
                             (th-lemma a!56 (<= L2_5_n 0))
                             (<= L1_2_0 0))
                   (th-lemma (th-lemma a!79 a!86 a!88 a!89) a!90)
                   false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_2!63|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_3!79|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 3 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not (= L2_0_0 query!0_0_n))
               (not (= L2_2_0 query!0_0_n))
               (not (= L2_4_0 query!0_1_n))
               (not (= L2_5_0 query!0_0_n))
               (not (= L2_0_1 query!0_4_n))
               (not (= L2_2_1 query!0_2_n))
               (not (= L2_4_1 query!0_1_n))
               (not (= L2_5_1 query!0_0_n))
               (not (= L2_0_2 query!0_4_n))
               (not (= L2_2_2 query!0_0_n))
               (not (= L2_4_2 query!0_1_n))
               (not (= L2_5_2 query!0_0_n))
               (not (= L2_0_3 query!0_0_n))
               (not (= L2_2_3 query!0_2_n))
               (not (= L2_4_3 query!0_1_n))
               (not (= L2_5_3 query!0_0_n))
               (not (= (select aux!10_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!4_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!7_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (not (= (select aux!9_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!6_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!5_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!8_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!3_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
               (not (= L2_1_3 (select aux!10_n query!0_0_n)))
               (not (= L2_3_3 (select aux!9_n query!0_2_n)))
               (not (= L2_3_2 (select aux!7_n query!0_0_n)))
               (not (= L2_1_2 (select aux!8_n query!0_4_n)))
               (not (= L2_1_1 (select aux!6_n query!0_4_n)))
               (not (= L2_3_1 (select aux!5_n query!0_2_n)))
               (not (= query!0_3_n (select aux!2_n query!0_2_n)))
               (not (= query!0_5_n (select aux!1_n query!0_4_n)))
               (not (= L2_1_0 (select aux!4_n query!0_0_n)))
               (not (= L2_3_0 (select aux!3_n query!0_0_n)))
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!3 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n))))
      (a!4 (= (<= query!0_1_n query!0_0_n)
              (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!5 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!17 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!18 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!20 (rewrite (= (+ L2_3_0 (* (- 1) L2_1_0)) (+ (* (- 1) L2_1_0) L2_3_0))))
      (a!21 (= (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               (<= (+ (* (- 1) L2_1_0) L2_3_0) 0)))
      (a!22 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!23 (= (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!24 (not (= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!30 (= (<= (+ (* (- 1) L2_1_0) L2_3_0) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!31 (= (= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!32 (not (= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!41 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!47 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!54 (hypothesis (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!56 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!57 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!61 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!66 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!67 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!69 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!70 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!71 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!72 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!78 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!79 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0))))
(let ((a!2 (or a!1
               (not (= (select aux!2_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))))
      (a!6 (monotonicity (rewrite a!4)
                         (= (not (<= query!0_1_n query!0_0_n)) a!5)))
      (a!7 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                a!5))
      (a!13 (def-axiom (or a!1
                           (= (select aux!3_n query!0_0_n)
                              (select aux!2_n query!0_0_n)))))
      (a!15 (def-axiom (or a!1 (= L2_3_0 (select aux!3_n query!0_0_n)))))
      (a!19 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
                a!17
                a!18))
      (a!25 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ (* (- 1) L2_1_0) L2_3_0) 0)
                a!24
                a!18))
      (a!33 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!32
                a!18))
      (a!36 (or (not query!0_dummy)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!32
                a!18
                |query!0#level_3!68|))
      (a!68 (or a!66
                a!67
                a!57
                a!61
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!73 (or a!70
                a!72
                a!57
                a!61
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!80 (or a!41
                a!47
                a!57
                a!61
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!83 (or (not query!0_dummy)
                a!41
                a!47
                a!57
                a!61
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                |query!0#level_3!68|))
      (a!90 (def-axiom (or a!1 (= L2_1_0 (select aux!4_n query!0_0_n)))))
      (a!92 (def-axiom (or a!1
                           (= (select aux!4_n query!0_0_n)
                              (select aux!1_n query!0_0_n))))))
(let ((a!8 (monotonicity (monotonicity a!6 (= a!3 a!7))
                         (= (or (not query!0_dummy) a!3)
                            (or (not query!0_dummy) a!7))))
      (a!10 (monotonicity (rewrite (= a!7 (not a!1)))
                          (= (or (not query!0_dummy) a!7)
                             (or (not query!0_dummy) (not a!1)))))
      (a!26 (monotonicity (monotonicity (monotonicity a!20 a!21)
                                        (monotonicity (monotonicity a!22 a!23)
                                                      (= a!17 a!24))
                                        (= a!19 a!25))
                          (= (=> query!0_dummy a!19) (=> query!0_dummy a!25))))
      (a!27 (rewrite (= (=> query!0_dummy a!25) (or (not query!0_dummy) a!25))))
      (a!29 (= (or (=> query!0_dummy a!19) |query!0#level_3!68|)
               (or (or (not query!0_dummy) a!25) |query!0#level_3!68|)))
      (a!34 (monotonicity (monotonicity (rewrite a!30)
                                        (monotonicity (rewrite a!31)
                                                      (= a!24 a!32))
                                        (= a!25 a!33))
                          (= (or (not query!0_dummy) a!25)
                             (or (not query!0_dummy) a!33))))
      (a!35 (= (or (or (not query!0_dummy) a!25) |query!0#level_3!68|)
               (or (or (not query!0_dummy) a!33) |query!0#level_3!68|)))
      (a!37 (= (or (or (not query!0_dummy) a!33) |query!0#level_3!68|) a!36))
      (a!38 (= (or (or (not query!0_dummy) a!25) |query!0#level_3!68|) a!36))
      (a!74 (monotonicity (monotonicity (monotonicity (monotonicity a!22 a!69)
                                                      (= a!66 a!70))
                                        (monotonicity (monotonicity a!22 a!71)
                                                      (= a!67 a!72))
                                        (= a!68 a!73))
                          (= (=> query!0_dummy a!68) (=> query!0_dummy a!73))))
      (a!75 (rewrite (= (=> query!0_dummy a!73) (or (not query!0_dummy) a!73))))
      (a!77 (= (or (=> query!0_dummy a!68) |query!0#level_3!68|)
               (or (or (not query!0_dummy) a!73) |query!0#level_3!68|)))
      (a!81 (monotonicity (monotonicity (monotonicity (rewrite a!78)
                                                      (= a!70 a!41))
                                        (monotonicity (rewrite a!79)
                                                      (= a!72 a!47))
                                        (= a!73 a!80))
                          (= (or (not query!0_dummy) a!73)
                             (or (not query!0_dummy) a!80))))
      (a!82 (= (or (or (not query!0_dummy) a!73) |query!0#level_3!68|)
               (or (or (not query!0_dummy) a!80) |query!0#level_3!68|)))
      (a!84 (= (or (or (not query!0_dummy) a!80) |query!0#level_3!68|) a!83))
      (a!85 (= (or (or (not query!0_dummy) a!73) |query!0#level_3!68|) a!83)))
(let ((a!9 (mp (asserted (or (not query!0_dummy) a!3))
               a!8
               (or (not query!0_dummy) a!7)))
      (a!28 (trans a!26
                   a!27
                   (= (=> query!0_dummy a!19) (or (not query!0_dummy) a!25))))
      (a!76 (trans a!74
                   a!75
                   (= (=> query!0_dummy a!68) (or (not query!0_dummy) a!73)))))
(let ((a!11 (unit-resolution (mp a!9 a!10 (or (not query!0_dummy) (not a!1)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!1)))
      (a!39 (trans (monotonicity a!28 a!29)
                   (trans (monotonicity a!34 a!35) (rewrite a!37) a!38)
                   (= (or (=> query!0_dummy a!19) |query!0#level_3!68|) a!36)))
      (a!86 (trans (monotonicity a!76 a!77)
                   (trans (monotonicity a!81 a!82) (rewrite a!84) a!85)
                   (= (or (=> query!0_dummy a!68) |query!0#level_3!68|) a!83))))
(let ((a!12 (unit-resolution (def-axiom a!2)
                             a!11
                             (not (= (select aux!2_n query!0_0_n)
                                     (select aux!1_n query!0_0_n)))))
      (a!14 (symm (unit-resolution a!13
                                   a!11
                                   (= (select aux!3_n query!0_0_n)
                                      (select aux!2_n query!0_0_n)))
                  (= (select aux!2_n query!0_0_n) (select aux!3_n query!0_0_n))))
      (a!16 (symm (unit-resolution a!15
                                   a!11
                                   (= L2_3_0 (select aux!3_n query!0_0_n)))
                  (= (select aux!3_n query!0_0_n) L2_3_0)))
      (a!40 (mp (asserted (or (=> query!0_dummy a!19) |query!0#level_3!68|))
                a!39
                a!36))
      (a!42 (unit-resolution (def-axiom (or a!1 (= L2_0_0 query!0_0_n)))
                             a!11
                             (= L2_0_0 query!0_0_n)))
      (a!44 (unit-resolution (def-axiom (or a!1 (= L2_5_0 query!0_0_n)))
                             a!11
                             (= L2_5_0 query!0_0_n)))
      (a!52 (unit-resolution (def-axiom (or a!1 (= L2_4_0 query!0_1_n)))
                             a!11
                             (= L2_4_0 query!0_1_n)))
      (a!58 (unit-resolution (def-axiom (or a!1 (= L2_2_0 query!0_0_n)))
                             a!11
                             (= L2_2_0 query!0_0_n)))
      (a!87 (mp (asserted (or (=> query!0_dummy a!68) |query!0#level_3!68|))
                a!86
                a!83)))
(let ((a!43 (th-lemma a!42 (<= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!45 (th-lemma a!44 (>= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!48 (th-lemma a!42 (>= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!49 (th-lemma a!44 (<= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!53 (th-lemma a!52 (>= (+ L2_4_0 (* (- 1) query!0_1_n)) 0)))
      (a!59 (th-lemma a!58 (<= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!62 (th-lemma a!58 (>= (+ L2_2_0 (* (- 1) query!0_0_n)) 0))))
(let ((a!46 (lemma (th-lemma (hypothesis a!41) a!43 a!45 false)
                   (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!50 (lemma (th-lemma (hypothesis a!47) a!48 a!49 false)
                   (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!55 (th-lemma a!53
                      a!54
                      (unit-resolution (def-axiom (or a!1 a!5)) a!11 a!5)
                      a!49
                      false))
      (a!60 (lemma (th-lemma (hypothesis a!57) a!59 a!45 false)
                   (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!63 (lemma (th-lemma (hypothesis a!61) a!62 a!49 false)
                   (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!51 (th-lemma a!46 a!50 (= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!64 (th-lemma a!60 a!63 (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!88 (unit-resolution a!87
                             (lemma a!55 a!56)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!46
                             a!60
                             a!63
                             (asserted (not |query!0#level_3!68|))
                             a!50
                             (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!65 (unit-resolution a!40
                             a!51
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (lemma a!55 a!56)
                             a!64
                             (asserted (not |query!0#level_3!68|))
                             (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!89 (trans (trans a!14 a!16 (= (select aux!2_n query!0_0_n) L2_3_0))
                   (symm (th-lemma a!65 a!88 (= L2_1_0 L2_3_0))
                         (= L2_3_0 L2_1_0))
                   (= (select aux!2_n query!0_0_n) L2_1_0))))
(let ((a!91 (trans a!89
                   (unit-resolution a!90
                                    a!11
                                    (= L2_1_0 (select aux!4_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!4_n query!0_0_n)))))
(let ((a!93 (trans a!91
                   (unit-resolution a!92
                                    a!11
                                    (= (select aux!4_n query!0_0_n)
                                       (select aux!1_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))))
  (unit-resolution a!12 a!93 false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_3!68|)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L1 (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0))
    |L1#level_2!113|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L2_tr0 a!1) |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_1 0))
               (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0)
               (not (= L1_2_1 0)))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L1 (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0))
    |L1#level_3!130|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L2_tr0 a!1) |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L1_tr1 a!1) |L1#level_4!141|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_1 0))
               (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0)
               (not (= L1_2_1 0)))))
  (or (=> L1_tr1 a!1) |L1#level_4!141|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L1 (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0))
    |L1#level_4!141|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L2_tr0 a!1) |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L1_tr1 a!1) |L1#level_5!144|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_1 0))
               (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0)
               (not (= L1_2_1 0)))))
  (or (=> L1_tr1 a!1) |L1#level_5!144|))
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L1 (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0))
    |L1#level_5!144|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L2_tr0 a!1) |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (or (=> L1_tr1 a!1) |L1#level_6!436|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_1 0))
               (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0)
               (not (= L1_2_1 0)))))
  (or (=> L1_tr1 a!1) |L1#level_6!436|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (= L1_0_n 0))
    (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    (not (= L1_2_n 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (=> L2_tr0 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0)))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (= L1_0_1 0))
               (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0)
               (not (= L1_2_1 0)))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 4 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 4 depth: 4
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  false)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  974)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 2))
(define-fun L2_1_3 () Int
  1652)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!443))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!447))
(define-fun query!0_0_n () Int
  (- 1))
(define-fun L2_3_3 () Int
  1888)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  5903)
(define-fun L2_1_2 () Int
  974)
(define-fun query!0_3_n () Int
  1888)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!446))
(define-fun L2_3_1 () Int
  1888)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  5903)
(define-fun L2_5_2 () Int
  (- 1))
(define-fun L2_0_2 () Int
  (- 2))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!445))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!441))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  1653)
(define-fun |query!0#level_4!80| () Bool
  false)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!442))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  false)
(define-fun query!0_4_n () Int
  (- 2))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  974)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!444))
(define-fun L2_0_0 () Int
  (- 1))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!449))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!440))
(define-fun L2_2_0 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  1652)
(define-fun L2_3_2 () Int
  1653)
(define-fun L2_2_1 () Int
  5903)
(define-fun L2_4_0 () Int
  0)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!448))
(define-fun k!447 ((x!0 Int)) Int
  (ite (= x!0 5903) 1888
    1888))
(define-fun k!444 ((x!0 Int)) Int
  (ite (= x!0 5903) 1888
  (ite (= x!0 (- 1)) 1653
    1888)))
(define-fun k!441 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1652
  (ite (= x!0 (- 2)) 974
    1652)))
(define-fun k!449 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1653
    1653))
(define-fun k!446 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 974
    974))
(define-fun k!443 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1653
    1653))
(define-fun k!440 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1652
    1652))
(define-fun k!448 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 974
    974))
(define-fun k!445 ((x!0 Int)) Int
  (ite (= x!0 5903) 1888
    1888))
(define-fun k!442 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1652
    1652))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_5_3 L2_0_2))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 4
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not |L1#reach_case_0_0|)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L2_4_0 () Int
  1)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun L2_1_0 () Int
  973)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!465))
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  973)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!463))
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!464))
(define-fun L2_3_0 () Int
  974)
(define-fun L2_4_n () Int
  1)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |L1#reach_case_0_0| () Bool
  false)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!467))
(define-fun L2_5_n () Int
  0)
(define-fun L2_0_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!462))
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun L2_3_n () Int
  974)
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!466))
(define-fun L2_2_0 () Int
  0)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!463 ((x!0 Int)) Int
  (ite (= x!0 0) 973
    973))
(define-fun k!467 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!464 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!465 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!462 ((x!0 Int)) Int
  (ite (= x!0 0) 973
    973))
(define-fun k!466 ((x!0 Int)) Int
  (ite (= x!0 0) 973
    973))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0))))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 4
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun L1_4_0 () Int
  2)
(define-fun L1_0_0 () Int
  1)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  973)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  1)
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_4_n () Int
  2)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!474))
(define-fun spacer_proxy!24 () Bool
  true)
(define-fun L1_5_0 () Int
  2)
(define-fun L1_1_0 () Int
  973)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!477))
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  false)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!476))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  974)
(define-fun L2_0_n () Int
  1)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  true)
(define-fun spacer_proxy!25 () Bool
  true)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!475))
(define-fun L2_3_n () Int
  974)
(define-fun spacer_proxy!21 () Bool
  true)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_2_n () Int
  1)
(define-fun spacer_proxy!23 () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun L2_tr0 () Bool
  true)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun k!475 ((x!0 Int)) Int
  (ite (= x!0 1) 973
    973))
(define-fun k!476 ((x!0 Int)) Int
  (ite (= x!0 1) 974
    974))
(define-fun k!477 ((x!0 Int)) Int
  (ite (= x!0 1) 974
    974))
(define-fun k!474 ((x!0 Int)) Int
  (ite (= x!0 1) 973
    973))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and (<= L2_4_n L1_5_0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (= L1_2_0 1) (<= L1_4_0 L1_5_0) (= L1_0_0 1) a!1 (not (<= L1_4_0 1))))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 4
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not |L1#reach_case_0_1|)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!2 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!5 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!9 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!10 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!11 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!17 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!18 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!21 (asserted (or (not spacer_proxy!39) (not (<= L1_4_n 1)))))
      (a!23 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!32 (asserted (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!33 (rewrite (= (=> L1_tr1 (<= L1_5_1 0))
                        (or (not L1_tr1) (<= L1_5_1 0)))))
      (a!34 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!35 (= (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!36 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!38 (not (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0))))
(let ((a!3 (or (not (= L1_0_0 L1_0_n))
               (not (= L1_4_0 L1_4_n))
               (not (= L1_5_0 L1_2_0))
               (not (= L1_0_1 L1_0_n))
               (not (= L1_2_1 L1_2_n))
               (not (= L1_4_1 L1_4_n))
               (not (= L1_5_1 L1_2_0))
               (not (= a!1 (select aux!29_n L1_0_n)))
               (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
               (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
               (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
               (not (= L1_3_1 (select aux!35_n L1_2_n)))
               (not (= L1_1_1 (select aux!36_n L1_0_n)))
               (not (= L1_3_0 (select aux!33_n L1_2_0)))
               a!2
               (not (= L1_1_n (select aux!29_n L1_0_n)))
               (not (= L1_1_0 (select aux!34_n L1_0_n)))
               (not (= L1_3_n (select aux!30_n L1_2_n)))
               (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!6 (and (= L1_0_0 L1_0_n)
                (= L1_4_0 L1_4_n)
                (= L1_5_0 L1_2_0)
                (= L1_0_1 L1_0_n)
                (= L1_2_1 L1_2_n)
                (= L1_4_1 L1_4_n)
                (= L1_5_1 L1_2_0)
                a!5
                (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                (= L1_3_1 (select aux!35_n L1_2_n))
                (= L1_1_1 (select aux!36_n L1_0_n))
                (= L1_3_0 (select aux!33_n L1_2_0))
                (= L1_5_n (+ 1 L1_2_0))
                (= L1_1_n (select aux!29_n L1_0_n))
                (= L1_1_0 (select aux!34_n L1_0_n))
                (= L1_3_n (select aux!30_n L1_2_n))
                (not (<= L1_4_n L1_2_0))))
      (a!7 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              a!1))
      (a!12 (monotonicity (rewrite a!10) (= (not (<= L1_4_n L1_2_0)) a!11)))
      (a!13 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!1 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!11))
      (a!19 (monotonicity (rewrite (= a!17 (not a!18)))
                          (= (or (not L1_tr0) a!17)
                             (or (not L1_tr0) (not a!18)))))
      (a!22 (th-lemma (unit-resolution a!21
                                       (asserted spacer_proxy!39)
                                       (not (<= L1_4_n 1)))
                      (not (<= L1_4_n 0))))
      (a!24 (unit-resolution (asserted a!23)
                             (asserted spacer_proxy!1)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
(let ((a!4 (or a!3 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!8 (monotonicity (rewrite a!7) (= a!5 (= a!1 (select aux!29_n L1_0_n)))))
      (a!16 (monotonicity (rewrite (= a!13 (not a!3)))
                          (= (or (not L1_tr1) a!13) (or (not L1_tr1) (not a!3)))))
      (a!20 (mp (asserted (or (not L1_tr0) a!17))
                a!19
                (or (not L1_tr0) (not a!18))))
      (a!25 (th-lemma (hypothesis (= L1_5_n 0))
                      (th-lemma a!22 a!24 (not (<= L1_5_n 0)))
                      false)))
(let ((a!14 (monotonicity (monotonicity a!8 (rewrite a!9) a!12 (= a!6 a!13))
                          (= (or (not L1_tr1) a!6) (or (not L1_tr1) a!13))))
      (a!26 (unit-resolution (def-axiom (or a!18 (= L1_5_n 0)))
                             (lemma a!25 (not (= L1_5_n 0)))
                             a!18)))
(let ((a!15 (mp (asserted (or (not L1_tr1) a!6)) a!14 (or (not L1_tr1) a!13)))
      (a!27 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             (unit-resolution a!20 a!26 (not L1_tr0))
                             (asserted (not L1_ext0_n))
                             L1_tr1)))
(let ((a!28 (unit-resolution (mp a!15 a!16 (or (not L1_tr1) (not a!3)))
                             a!27
                             (not a!3)))
      (a!37 (unit-resolution (mp a!32
                                 (trans (monotonicity a!33 a!34)
                                        (rewrite a!35)
                                        a!36)
                                 (or (not L1_tr1)
                                     (<= L1_5_1 0)
                                     |L1#level_1!112|))
                             a!27
                             (asserted (not |L1#level_1!112|))
                             (<= L1_5_1 0))))
(let ((a!29 (unit-resolution (def-axiom a!4)
                             a!28
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!39 (unit-resolution (def-axiom (or a!3 (= L1_5_1 L1_2_0)))
                             a!28
                             (= L1_5_1 L1_2_0))))
(let ((a!30 (th-lemma a!29 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1)))))
(let ((a!31 (th-lemma a!30
                      a!24
                      (unit-resolution a!21
                                       (asserted spacer_proxy!39)
                                       (not (<= L1_4_n 1)))
                      (not (<= L1_2_0 0)))))
  (th-lemma (th-lemma a!31 a!37 a!38) (symm a!39 (= L1_2_0 L1_5_1)) false))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= L1_4_n 1))
(not (<= L1_5_n 0))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= L1_4_n 1))
(not (<= L1_5_n 0))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= L1_4_n 1))
(not (<= L1_5_n 0))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 3 new size: 2
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1 (<= L1_4_n 1)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1 (<= L1_4_n 1)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1 (<= L1_4_n 1)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1 (<= L1_4_n 1) |L1#level_1!112|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
  (or (=> L2_tr0 (or a!1 (<= L1_4_0 1))) |L2#level_2!63|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
  (or (=> L1_tr1 (or a!1 (<= L1_4_0 1))) |L1#level_2!113|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
  (or (=> L1_tr1 (or a!1 (<= L1_4_1 1))) |L1#level_2!113|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 4
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!3 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= L2_4_n L1_5_0)))
      (a!4 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!5 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!9 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!11 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!12 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!13 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!14 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!23 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!25 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!29 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!30 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!31 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0) |L2#level_2!63|))
      (a!39 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (= L2_5_n 0))
               (not (= L1_0_0 L2_0_n))
               (not (= L1_2_0 L2_2_n))
               (not (= L1_4_0 L2_4_n))
               (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
               (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
               (not (= L1_1_0 (select aux!15_n L2_0_n)))
               (not (= L1_3_0 (select aux!14_n L2_2_n)))
               (not (= L2_1_n (select aux!12_n L2_0_n)))
               (not (= L2_3_n (select aux!13_n L2_2_n)))
               a!1))
      (a!6 (monotonicity (monotonicity (rewrite a!4) (= a!3 a!5))
                         (= (or (not L2_tr0) a!3) (or (not L2_tr0) a!5))))
      (a!10 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!9
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!15 (monotonicity (rewrite a!13) (= (not (<= L2_4_n L2_5_0)) a!14)))
      (a!16 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!14))
      (a!24 (unit-resolution (asserted (or (not spacer_proxy!23) a!23))
                             (asserted spacer_proxy!23)
                             a!23))
      (a!32 (trans (monotonicity (rewrite (= a!29 a!30))
                                 (= (or a!29 |L2#level_2!63|)
                                    (or a!30 |L2#level_2!63|)))
                   (rewrite (= (or a!30 |L2#level_2!63|) a!31))
                   (= (or a!29 |L2#level_2!63|) a!31)))
      (a!40 (or (=> L2_tr0 (or a!39 (<= L1_4_0 1))) |L2#level_2!63|))
      (a!41 (= (=> L2_tr0 (or a!39 (<= L1_4_0 1)))
               (or (not L2_tr0) (or a!39 (<= L1_4_0 1)))))
      (a!42 (or (or (not L2_tr0) (or a!39 (<= L1_4_0 1))) |L2#level_2!63|)))
(let ((a!7 (mp (asserted (or (not L2_tr0) a!3)) a!6 (or (not L2_tr0) a!5)))
      (a!8 (monotonicity (rewrite (= a!5 (not a!2)))
                         (= (or (not L2_tr0) a!5) (or (not L2_tr0) (not a!2)))))
      (a!17 (monotonicity (monotonicity (rewrite a!12) a!15 (= a!11 a!16))
                          (= (or (not L2_tr1) a!11) (or (not L2_tr1) a!16))))
      (a!19 (monotonicity (rewrite (= a!16 (not a!10)))
                          (= (or (not L2_tr1) a!16)
                             (or (not L2_tr1) (not a!10)))))
      (a!26 (or a!10 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!33 (unit-resolution (mp (asserted (or a!29 |L2#level_2!63|)) a!32 a!31)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_2!63|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!43 (rewrite (= a!42
                        (or (not L2_tr0) a!39 (<= L1_4_0 1) |L2#level_2!63|))))
      (a!46 (or a!2 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!18 (mp (asserted (or (not L2_tr1) a!11)) a!17 (or (not L2_tr1) a!16)))
      (a!44 (trans (monotonicity (rewrite a!41) (= a!40 a!42))
                   a!43
                   (= a!40 (or (not L2_tr0) a!39 (<= L1_4_0 1) |L2#level_2!63|)))))
(let ((a!20 (unit-resolution (mp a!18 a!19 (or (not L2_tr1) (not a!10)))
                             (hypothesis L2_tr1)
                             (not a!10))))
(let ((a!21 (unit-resolution (def-axiom (or a!10 (= L2_4_0 L2_4_n)))
                             a!20
                             (= L2_4_0 L2_4_n)))
      (a!27 (unit-resolution (def-axiom a!26)
                             a!20
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!22 (th-lemma a!21 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!28 (th-lemma a!27 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!34 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!22
                                              (th-lemma a!24 a!25)
                                              a!28
                                              a!33
                                              false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!35 (unit-resolution (mp a!7 a!8 (or (not L2_tr0) (not a!2)))
                             a!34
                             (not a!2))))
(let ((a!36 (unit-resolution (def-axiom (or a!2 (= L1_4_0 L2_4_n)))
                             a!35
                             (= L1_4_0 L2_4_n)))
      (a!38 (unit-resolution (def-axiom (or a!2 (= L2_5_n 0)))
                             a!35
                             (= L2_5_n 0)))
      (a!47 (unit-resolution (def-axiom a!46)
                             a!35
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!37 (th-lemma (symm a!36 (= L2_4_n L1_4_0))
                      (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!45 (th-lemma (symm a!36 (= L2_4_n L1_4_0))
                      (>= (+ L2_4_n (* (- 1) L1_4_0)) 0))))
(let ((a!48 (th-lemma a!45 a!47 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!49 (unit-resolution (mp (asserted a!40)
                                 a!44
                                 (or (not L2_tr0)
                                     a!39
                                     (<= L1_4_0 1)
                                     |L2#level_2!63|))
                             a!48
                             (asserted (not |L2#level_2!63|))
                             a!34
                             (<= L1_4_0 1))))
  (th-lemma a!37 a!24 (th-lemma a!38 (>= L2_5_n 0)) a!49 false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 L2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 1) |L2#level_2!63|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1))))
  (or a!1 |query!0#level_3!68|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1))))
  (or a!1 |query!0#level_3!68|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1))))
  (or a!1 |query!0#level_3!68|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1))))
  (or a!1 |query!0#level_3!68|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1))))
  (or a!1 |L2#level_3!79|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 4
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!3 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1) |L2#level_3!79|))
      (a!5 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0))))
      (a!6 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!7 (= (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!8 (or (not (= L1_0_0 0))
               (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0))))
      (a!12 (= (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!13 (or (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!16 (or (not L2_tr0)
                (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))
                |L2#level_3!79|))
      (a!21 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!23 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!24 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!25 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!31 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!42 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!43 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!44 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!45 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!47 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!48 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!59 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!61 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!63 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!65 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!67 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!80 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!83 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!84 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!85 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!86 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0))))
(let ((a!4 (trans (monotonicity (rewrite (= a!1 a!2))
                                (= (or a!1 |L2#level_3!79|)
                                   (or a!2 |L2#level_3!79|)))
                  (rewrite (= (or a!2 |L2#level_3!79|) a!3))
                  (= (or a!1 |L2#level_3!79|) a!3)))
      (a!9 (rewrite (= (=> L2_tr0 a!8) (or (not L2_tr0) a!8))))
      (a!11 (= (or (=> L2_tr0 a!5) |L2#level_3!79|)
               (or (or (not L2_tr0) a!8) |L2#level_3!79|)))
      (a!14 (monotonicity (monotonicity (rewrite a!12) (= a!8 a!13))
                          (= (or (not L2_tr0) a!8) (or (not L2_tr0) a!13))))
      (a!15 (= (or (or (not L2_tr0) a!8) |L2#level_3!79|)
               (or (or (not L2_tr0) a!13) |L2#level_3!79|)))
      (a!17 (= (or (or (not L2_tr0) a!13) |L2#level_3!79|) a!16))
      (a!18 (= (or (or (not L2_tr0) a!8) |L2#level_3!79|) a!16))
      (a!22 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!21))
      (a!26 (monotonicity (monotonicity (rewrite a!24) (= a!23 a!25))
                          (= (or (not L2_tr0) a!23) (or (not L2_tr0) a!25))))
      (a!32 (unit-resolution (asserted (or (not spacer_proxy!3) a!31))
                             (asserted spacer_proxy!3)
                             a!31))
      (a!46 (monotonicity (monotonicity (monotonicity a!43 a!44) (= a!42 a!45))
                          (= (or (not spacer_proxy!0) a!42)
                             (or (not spacer_proxy!0) a!45))))
      (a!49 (monotonicity (monotonicity (rewrite a!47) (= a!45 a!48))
                          (= (or (not spacer_proxy!0) a!45)
                             (or (not spacer_proxy!0) a!48))))
      (a!62 (unit-resolution (asserted a!61)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!64 (unit-resolution (asserted a!63)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!66 (unit-resolution (asserted a!65)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!68 (unit-resolution (asserted a!67)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!81 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!80
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!87 (monotonicity (rewrite a!85) (= (not (<= L2_4_n L2_5_0)) a!86)))
      (a!88 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!86)))
(let ((a!10 (trans (monotonicity (monotonicity (monotonicity a!6 a!7)
                                               (= a!5 a!8))
                                 (= (=> L2_tr0 a!5) (=> L2_tr0 a!8)))
                   a!9
                   (= (=> L2_tr0 a!5) (or (not L2_tr0) a!8))))
      (a!27 (mp (asserted (or (not L2_tr0) a!23)) a!26 (or (not L2_tr0) a!25)))
      (a!28 (monotonicity (rewrite (= a!25 (not a!22)))
                          (= (or (not L2_tr0) a!25)
                             (or (not L2_tr0) (not a!22)))))
      (a!33 (or a!22 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!35 (def-axiom (or a!22 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!36 (def-axiom (or a!22
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!39 (def-axiom (or a!22 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!50 (trans a!46
                   a!49
                   (= (or (not spacer_proxy!0) a!42)
                      (or (not spacer_proxy!0) a!48))))
      (a!52 (def-axiom (or a!22 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!53 (def-axiom (or a!22
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!56 (def-axiom (or a!22 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!71 (unit-resolution (def-axiom (or a!22 (= L2_5_n 0)))
                             (hypothesis (not a!22))
                             (= L2_5_n 0)))
      (a!72 (unit-resolution (def-axiom (or a!22 (= L1_2_0 L2_2_n)))
                             (hypothesis (not a!22))
                             (= L1_2_0 L2_2_n)))
      (a!82 (or a!81 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!89 (monotonicity (monotonicity (rewrite a!84) a!87 (= a!83 a!88))
                          (= (or (not L2_tr1) a!83) (or (not L2_tr1) a!88))))
      (a!91 (monotonicity (rewrite (= a!88 (not a!81)))
                          (= (or (not L2_tr1) a!88)
                             (or (not L2_tr1) (not a!81))))))
(let ((a!19 (trans (monotonicity a!10 a!11)
                   (trans (monotonicity a!14 a!15) (rewrite a!17) a!18)
                   (= (or (=> L2_tr0 a!5) |L2#level_3!79|) a!16)))
      (a!29 (unit-resolution (mp a!27 a!28 (or (not L2_tr0) (not a!22)))
                             (hypothesis L2_tr0)
                             (not a!22)))
      (a!51 (mp (asserted (or (not spacer_proxy!0) a!42))
                a!50
                (or (not spacer_proxy!0) a!48)))
      (a!73 (monotonicity (trans a!72
                                 (th-lemma a!62 a!64 (= L2_2_n L2_5_n))
                                 (= L1_2_0 L2_5_n))
                          (= (= L1_2_0 0) (= L2_5_n 0))))
      (a!90 (mp (asserted (or (not L2_tr1) a!83)) a!89 (or (not L2_tr1) a!88))))
(let ((a!20 (mp (asserted (or (=> L2_tr0 a!5) |L2#level_3!79|)) a!19 a!16))
      (a!30 (unit-resolution (def-axiom (or a!22 (= L2_5_n 0)))
                             a!29
                             (= L2_5_n 0)))
      (a!34 (unit-resolution (def-axiom a!33)
                             a!29
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!37 (symm (unit-resolution a!36
                                   a!29
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!40 (symm (unit-resolution a!39
                                   a!29
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!54 (symm (unit-resolution a!53
                                   a!29
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!57 (symm (unit-resolution a!56
                                   a!29
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!60 (unit-resolution (def-axiom (or a!22 (= L1_0_0 L2_0_n)))
                             a!29
                             (= L1_0_0 L2_0_n)))
      (a!74 (mp a!71 (symm a!73 (= (= L2_5_n 0) (= L1_2_0 0))) (= L1_2_0 0))))
(let ((a!38 (trans (unit-resolution a!35
                                    a!29
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!37
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!55 (trans (unit-resolution a!52
                                    a!29
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!54
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!69 (trans (trans a!60
                          (th-lemma a!62 a!64 a!66 a!68 (= L2_0_n L2_2_n))
                          (= L1_0_0 L2_2_n))
                   (th-lemma a!62 a!64 (= L2_2_n L2_5_n))
                   (= L1_0_0 L2_5_n)))
      (a!75 (unit-resolution (hypothesis (not (= L1_2_0 0))) a!74 false)))
(let ((a!41 (th-lemma (trans a!38 a!40 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!58 (th-lemma (trans a!55 a!57 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!70 (symm (monotonicity a!69 (= (= L1_0_0 0) (= L2_5_n 0)))
                  (= (= L2_5_n 0) (= L1_0_0 0))))
      (a!76 (unit-resolution (lemma a!75 (or a!22 (= L1_2_0 0)))
                             a!29
                             (= L1_2_0 0))))
(let ((a!77 (unit-resolution a!20
                             (th-lemma (th-lemma a!30 (>= L2_5_n 0))
                                       a!32
                                       a!34
                                       (not (<= L1_5_0 0)))
                             (th-lemma a!41
                                       (unit-resolution a!51
                                                        (asserted spacer_proxy!0)
                                                        a!48)
                                       a!58
                                       a!59)
                             (hypothesis L2_tr0)
                             (mp a!30 a!70 (= L1_0_0 0))
                             a!76
                             (asserted (not |L2#level_3!79|))
                             false)))
(let ((a!78 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma a!77 (not L2_tr0))
                             (asserted (not L2_ext0_n))
                             L2_tr1)))
(let ((a!79 (unit-resolution (mp (asserted (or a!1 |L2#level_3!79|)) a!4 a!3)
                             a!78
                             (asserted (not |L2#level_3!79|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!92 (unit-resolution (mp a!90 a!91 (or (not L2_tr1) (not a!81)))
                             a!78
                             (not a!81))))
(let ((a!93 (unit-resolution (def-axiom a!82)
                             a!92
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!95 (unit-resolution (def-axiom (or a!81 (= L2_4_0 L2_4_n)))
                             a!92
                             (= L2_4_0 L2_4_n))))
(let ((a!94 (th-lemma a!93 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!96 (th-lemma a!95 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
  (th-lemma a!79 a!94 a!96 a!32 false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(= L2_2_n L2_5_n)
(= L2_0_n L2_2_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(= L2_2_n L2_5_n)
(= L2_0_n L2_2_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(= L2_2_n L2_5_n)
(= L2_0_n L2_2_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 4 new size: 4
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
    (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
    (not (= L2_2_n L2_5_n))
    (not (= L2_0_n L2_2_n)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 L2 (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L2 (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 4 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 4 depth: 4
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  false)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  2240)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 2))
(define-fun L2_1_3 () Int
  1)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!527))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!531))
(define-fun query!0_0_n () Int
  (- 1))
(define-fun L2_3_3 () Int
  9725)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  (- 3))
(define-fun L2_1_2 () Int
  2240)
(define-fun query!0_3_n () Int
  9725)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!530))
(define-fun L2_3_1 () Int
  9725)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  (- 3))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun L2_0_2 () Int
  (- 2))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!529))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!525))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  0)
(define-fun |query!0#level_4!80| () Bool
  false)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!526))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  false)
(define-fun query!0_4_n () Int
  (- 2))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  2240)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!528))
(define-fun L2_0_0 () Int
  (- 1))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!533))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!524))
(define-fun L2_2_0 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  1)
(define-fun L2_3_2 () Int
  0)
(define-fun L2_2_1 () Int
  (- 3))
(define-fun L2_4_0 () Int
  0)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!532))
(define-fun k!527 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))
(define-fun k!524 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!532 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 2240
    2240))
(define-fun k!529 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 9725
    9725))
(define-fun k!526 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!531 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 9725
    9725))
(define-fun k!528 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 9725
  (ite (= x!0 (- 1)) 0
    9725)))
(define-fun k!525 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
  (ite (= x!0 (- 2)) 2240
    1)))
(define-fun k!533 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))
(define-fun k!530 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 2240
    2240))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L2_1_3) L2_3_2)))))
  (and (not (<= L2_5_3 L2_0_2))
       (not (<= L2_5_3 L2_2_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 4
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L1_4_0 () Int
  1)
(define-fun spacer_proxy!14 () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun L1_0_0 () Int
  0)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun L2_1_n () Int
  975)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  0)
(define-fun L2_4_n () Int
  1)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!546))
(define-fun L1_5_0 () Int
  1)
(define-fun L1_1_0 () Int
  975)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!549))
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!548))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  974)
(define-fun L2_0_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!547))
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun L2_3_n () Int
  974)
(define-fun spacer_proxy!23 () Bool
  false)
(define-fun spacer_proxy!26 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr0 () Bool
  true)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!547 ((x!0 Int)) Int
  (ite (= x!0 0) 975
    975))
(define-fun k!548 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!549 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!546 ((x!0 Int)) Int
  (ite (= x!0 0) 975
    975))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (<= L2_4_n L1_5_0)
       a!1
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L1_3_0 (* (- 1) L1_1_0))))))
  (and (not (<= L1_4_0 0)) (<= L1_4_0 L1_5_0) a!1 (= L1_2_0 0) (= L1_0_0 0)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 2 depth: 0
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 2 depth: 4
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not |L1#reach_case_0_1|)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L1_tr0:
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
L1_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 00
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L1_0_1 () Int
  0)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun L1_0_0 () Int
  0)
(define-fun aux!30_n () (Array Int Int)
  (_ as-array k!561))
(define-fun |L1#level_0!37| () Bool
  true)
(define-fun |L1#level_2!113| () Bool
  false)
(define-fun aux!34_n () (Array Int Int)
  (_ as-array k!557))
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun |L1#level_7!439| () Bool
  false)
(define-fun L1_ext0_n () Bool
  false)
(define-fun aux!29_n () (Array Int Int)
  (_ as-array k!556))
(define-fun L1_3_0 () Int
  1592)
(define-fun L1_3_1 () Int
  1593)
(define-fun L1_4_1 () Int
  2)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun aux!36_n () (Array Int Int)
  (_ as-array k!558))
(define-fun L1_0_n () Int
  0)
(define-fun L1_4_0 () Int
  2)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun spacer_proxy!40 () Bool
  false)
(define-fun aux!31_n () (Array Int Int)
  (_ as-array k!555))
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L1_2_n () Int
  0)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun L1_tr1 () Bool
  true)
(define-fun |L1#level_1!112| () Bool
  true)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun L1_2_0 () Int
  1)
(define-fun spacer_proxy!6 () Bool
  true)
(define-fun |L1#reach_case_0_1| () Bool
  true)
(define-fun |L1#level_3!130| () Bool
  false)
(define-fun spacer_proxy!41 () Bool
  false)
(define-fun L1_5_0 () Int
  1)
(define-fun L1_1_0 () Int
  1594)
(define-fun L1_5_1 () Int
  1)
(define-fun spacer_proxy!18 () Bool
  true)
(define-fun spacer_proxy!49 () Bool
  false)
(define-fun L1_2_1 () Int
  0)
(define-fun aux!35_n () (Array Int Int)
  (_ as-array k!559))
(define-fun L1_5_n () Int
  2)
(define-fun |L1#level_5!144| () Bool
  false)
(define-fun L1_1_n () Int
  1594)
(define-fun |L1#level_4!141| () Bool
  false)
(define-fun spacer_proxy!43 () Bool
  false)
(define-fun L1_4_n () Int
  2)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun |L1#level_6!436| () Bool
  false)
(define-fun L1_1_1 () Int
  1594)
(define-fun aux!33_n () (Array Int Int)
  (_ as-array k!560))
(define-fun L1_3_n () Int
  1593)
(define-fun L1_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!32_n () (Array Int Int)
  (_ as-array k!554))
(define-fun k!559 ((x!0 Int)) Int
  (ite (= x!0 0) 1593
    1593))
(define-fun k!556 ((x!0 Int)) Int
  (ite (= x!0 0) 1594
    1594))
(define-fun k!561 ((x!0 Int)) Int
  (ite (= x!0 0) 1593
    1593))
(define-fun k!558 ((x!0 Int)) Int
  (ite (= x!0 0) 1594
    1594))
(define-fun k!555 ((x!0 Int)) Int
  (ite (= x!0 0) 1594
    1594))
(define-fun k!560 ((x!0 Int)) Int
  (ite (= x!0 1) 1592
    1592))
(define-fun k!557 ((x!0 Int)) Int
  (ite (= x!0 0) 1594
    1594))
(define-fun k!554 ((x!0 Int)) Int
  (ite (= x!0 1) 1592
  (ite (= x!0 0) 1593
    1592)))

Transition:
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))))
Phi:
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
      (a!2 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (not (<= L1_4_n L1_2_0))
       a!1
       (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!2
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_1_1) L1_3_1)))))
  (and (not (<= L1_2_0 0))
       (not (= L1_2_0 0))
       (not (<= L1_4_1 0))
       (not (<= L1_4_1 L1_2_0))
       a!1
       (= L1_0_0 0)
       (= L1_4_0 L1_4_1)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 0)
       (= L1_2_1 0)
       (= L1_5_1 L1_2_0)
       (= (+ (* (- 1) L1_1_1) L1_1_0) 0)
       (<= (+ L1_4_1 (* (- 1) L1_2_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 0)
       (not (<= L1_4_n 0))
       (not (<= L1_2_n 0))
       (not (= L1_2_n 0))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 4
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 0)
       (not (<= L1_4_n 0))
       (not (<= L1_2_n 0))
       (not (= L1_2_n 0))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not |L1#reach_case_0_1|)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not |L1#reach_case_0_0|)
(not |L1#reach_case_0_1|)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L1_tr0:
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
L1_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 1 rused: 11
------------------------------------------------
-------- [spacer] mk_reach_fact ../src/muz/spacer/spacer_context.cpp:3268 ---------
Reach fact, before QE:
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (= L1_3_1 (select aux!24_1 L1_2_1))
       (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))
       (= L1_5_0 0)
       (= (select aux!26_0 L1_2_0) (select aux!24_0 L1_2_0))
       (= (select aux!28_0 L1_0_0) (select aux!25_0 L1_0_0))
       (= (select aux!27_0 L1_2_0) (select aux!26_0 L1_2_0))
       (= (select aux!25_0 L1_0_0) (select aux!23_0 L1_0_0))
       (= L1_1_0 (select aux!23_0 L1_0_0))
       (= L1_3_0 (select aux!24_0 L1_2_0))
       (= L1_5_1 0)
       (= (select aux!26_1 L1_2_1) (select aux!24_1 L1_2_1))
       (= (select aux!28_1 L1_0_1) (select aux!25_1 L1_0_1))
       (= (select aux!27_1 L1_2_1) (select aux!26_1 L1_2_1))
       (= (select aux!25_1 L1_0_1) (select aux!23_1 L1_0_1))
       (= L1_1_1 (select aux!23_1 L1_0_1))))
Vars:
L1_0_0
L1_1_0
L1_2_0
L1_3_0
L1_4_0
L1_5_0
aux!23_0
aux!24_0
aux!25_0
aux!26_0
aux!27_0
aux!28_0
L1_0_1
L1_1_1
L1_2_1
L1_3_1
L1_4_1
L1_5_1
aux!23_1
aux!24_1
aux!25_1
aux!26_1
aux!27_1
aux!28_1
aux!29_n
aux!30_n
aux!31_n
aux!32_n
aux!33_n
aux!34_n
aux!35_n
aux!36_n
------------------------------------------------
-------- [spacer] mk_reach_fact ../src/muz/spacer/spacer_context.cpp:3285 ---------
Reach fact, after QE project:
(and (not (<= L1_2_n (+ (- 1) L1_5_n)))
     (= L1_5_n (+ 1 L1_0_n))
     (= 1 L1_5_n)
     (not (<= L1_4_n (+ (- 1) L1_5_n))))
Vars:
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:504 ---------
add_reach_fact: L1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
     (= L1_5_n (+ 1 L1_0_n))
     (= 1 L1_5_n)
     (not (<= L1_4_n (+ (- 1) L1_5_n))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                (= L1_5_n (+ 1 L1_0_n))
                (= 1 L1_5_n)
                (not (<= L1_4_n (+ (- 1) L1_5_n))))))
  (or (not L1_ext0_n) a!1 L1_ext!612_n))
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:540 ---------
updating reach ctx: (let ((a!1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                (= L1_5_n (+ 1 L1_0_n))
                (= 1 L1_5_n)
                (not (<= L1_4_n (+ (- 1) L1_5_n))))))
  (or (not |L1#reach_case_0_n|) a!1 L1_ext!612_n))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_0 (+ (- 1) L1_5_0)))
                (= L1_5_0 (+ 1 L1_0_0))
                (= 1 L1_5_0)
                (not (<= L1_4_0 (+ (- 1) L1_5_0))))))
  (=> L2_tr0 (or (not |L1#reach_case_0_0|) a!1 L1_ext!612_0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_0 (+ (- 1) L1_5_0)))
                (= L1_5_0 (+ 1 L1_0_0))
                (= 1 L1_5_0)
                (not (<= L1_4_0 (+ (- 1) L1_5_0))))))
  (=> L1_tr1 (or (not |L1#reach_case_0_0|) a!1 L1_ext!612_0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_1 (+ (- 1) L1_5_1)))
                (= L1_5_1 (+ 1 L1_0_1))
                (= 1 L1_5_1)
                (not (<= L1_4_1 (+ (- 1) L1_5_1))))))
  (=> L1_tr1 (or (not |L1#reach_case_0_1|) a!1 L1_ext!612_1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!2 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (not (= L1_5_n 0))
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1
       (not (<= L1_5_n 0))
       a!2
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 1)
       (= L1_5_n 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 4
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!2 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (not (= L1_5_n 0))
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1
       (not (<= L1_5_n 0))
       a!2
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 1)
       (= L1_5_n 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L1_ext!612_1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!2 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!5 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!9 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!10 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!11 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!17 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!18 (= (<= L1_2_n (+ (- 1) L1_5_n))
               (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!19 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!21 (= (= L1_5_n (+ 1 L1_0_n)) (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!22 (= (<= L1_4_n (+ (- 1) L1_5_n))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!23 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!29 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!32 (unit-resolution (asserted (or (not spacer_proxy!2) (<= L1_2_n 0)))
                             (asserted spacer_proxy!2)
                             (<= L1_2_n 0)))
      (a!33 (unit-resolution (asserted (or (not spacer_proxy!59) (>= L1_5_n 1)))
                             (asserted spacer_proxy!59)
                             (>= L1_5_n 1)))
      (a!36 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!37 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!40 (asserted (or (not spacer_proxy!62) (not (= L1_5_n 0)))))
      (a!44 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
      (a!45 (rewrite (= (+ L1_1_n (* (- 1) L1_3_n)) (+ (* (- 1) L1_3_n) L1_1_n))))
      (a!46 (= (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)
               (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)))
      (a!47 (not (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)))
      (a!49 (= (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)
               (>= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!50 (not (>= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!54 (asserted (or (not spacer_proxy!7) (not (<= L1_5_n 0)))))
      (a!60 (asserted (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!61 (rewrite (= (=> L1_tr1 (<= L1_5_1 0))
                        (or (not L1_tr1) (<= L1_5_1 0)))))
      (a!62 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!63 (= (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!64 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!69 (hypothesis (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!71 (not (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!73 (unit-resolution (asserted (or (not spacer_proxy!3) (>= L1_2_n 0)))
                             (asserted spacer_proxy!3)
                             (>= L1_2_n 0)))
      (a!87 (unit-resolution (asserted (or (not spacer_proxy!6) (>= L1_0_n 0)))
                             (asserted spacer_proxy!6)
                             (>= L1_0_n 0)))
      (a!88 (unit-resolution (asserted (or (not spacer_proxy!5) (<= L1_0_n 0)))
                             (asserted spacer_proxy!5)
                             (<= L1_0_n 0))))
(let ((a!3 (or (not (= L1_0_0 L1_0_n))
               (not (= L1_4_0 L1_4_n))
               (not (= L1_5_0 L1_2_0))
               (not (= L1_0_1 L1_0_n))
               (not (= L1_2_1 L1_2_n))
               (not (= L1_4_1 L1_4_n))
               (not (= L1_5_1 L1_2_0))
               (not (= a!1 (select aux!29_n L1_0_n)))
               (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
               (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
               (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
               (not (= L1_3_1 (select aux!35_n L1_2_n)))
               (not (= L1_1_1 (select aux!36_n L1_0_n)))
               (not (= L1_3_0 (select aux!33_n L1_2_0)))
               a!2
               (not (= L1_1_n (select aux!29_n L1_0_n)))
               (not (= L1_1_0 (select aux!34_n L1_0_n)))
               (not (= L1_3_n (select aux!30_n L1_2_n)))
               (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!6 (and (= L1_0_0 L1_0_n)
                (= L1_4_0 L1_4_n)
                (= L1_5_0 L1_2_0)
                (= L1_0_1 L1_0_n)
                (= L1_2_1 L1_2_n)
                (= L1_4_1 L1_4_n)
                (= L1_5_1 L1_2_0)
                a!5
                (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                (= L1_3_1 (select aux!35_n L1_2_n))
                (= L1_1_1 (select aux!36_n L1_0_n))
                (= L1_3_0 (select aux!33_n L1_2_0))
                (= L1_5_n (+ 1 L1_2_0))
                (= L1_1_n (select aux!29_n L1_0_n))
                (= L1_1_0 (select aux!34_n L1_0_n))
                (= L1_3_n (select aux!30_n L1_2_n))
                (not (<= L1_4_n L1_2_0))))
      (a!7 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              a!1))
      (a!12 (monotonicity (rewrite a!10) (= (not (<= L1_4_n L1_2_0)) a!11)))
      (a!13 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!1 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!11))
      (a!20 (= (not (<= L1_2_n (+ (- 1) L1_5_n))) a!19))
      (a!24 (= (not (<= L1_4_n (+ (- 1) L1_5_n))) a!23))
      (a!25 (and a!19 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)) (= L1_5_n 1) a!23))
      (a!30 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!29
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!34 (th-lemma a!32 a!33 (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!38 (monotonicity (rewrite (= a!36 (not a!37)))
                          (= (or (not L1_tr0) a!36)
                             (or (not L1_tr0) (not a!37)))))
      (a!41 (unit-resolution (def-axiom (or a!37 (= L1_5_n 0)))
                             (unit-resolution a!40
                                              (asserted spacer_proxy!62)
                                              (not (= L1_5_n 0)))
                             a!37))
      (a!43 (def-axiom (or (not (= L1_0_n L1_2_0))
                           (= (select aux!32_n L1_2_0) a!1))))
      (a!48 (monotonicity (monotonicity (monotonicity a!45 a!46) (= a!44 a!47))
                          (= (or (not spacer_proxy!18) a!44)
                             (or (not spacer_proxy!18) a!47))))
      (a!51 (monotonicity (monotonicity (rewrite a!49) (= a!47 a!50))
                          (= (or (not spacer_proxy!18) a!47)
                             (or (not spacer_proxy!18) a!50))))
      (a!55 (th-lemma (hypothesis (= L1_5_n 0))
                      (unit-resolution a!54
                                       (asserted spacer_proxy!7)
                                       (not (<= L1_5_n 0)))
                      false))
      (a!85 (= (not (= L1_3_n L1_1_n)) (not (= (select aux!32_n L1_2_0) a!1))))
      (a!89 (trans (monotonicity (th-lemma a!87 a!88 (= L1_0_n 0))
                                 (= (= L1_0_n L1_2_0) (= 0 L1_2_0)))
                   (commutativity (= (= 0 L1_2_0) (= L1_2_0 0)))
                   (= (= L1_0_n L1_2_0) (= L1_2_0 0)))))
(let ((a!4 (or a!3 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!8 (monotonicity (rewrite a!7) (= a!5 (= a!1 (select aux!29_n L1_0_n)))))
      (a!16 (monotonicity (rewrite (= a!13 (not a!3)))
                          (= (or (not L1_tr1) a!13) (or (not L1_tr1) (not a!3)))))
      (a!26 (monotonicity (monotonicity (rewrite a!18) a!20)
                          (rewrite a!21)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!22) a!24)
                          (= a!17 a!25)))
      (a!31 (monotonicity (rewrite (= a!25 (not a!30)))
                          (= (or (not L1_ext0_n) a!25 L1_ext!612_n)
                             (or (not L1_ext0_n) (not a!30) L1_ext!612_n))))
      (a!39 (mp (asserted (or (not L1_tr0) a!36))
                a!38
                (or (not L1_tr0) (not a!37))))
      (a!52 (trans a!48
                   a!51
                   (= (or (not spacer_proxy!18) a!44)
                      (or (not spacer_proxy!18) a!50))))
      (a!56 (unit-resolution (def-axiom (or a!37 (= L1_5_n 0)))
                             (lemma a!55 (not (= L1_5_n 0)))
                             a!37))
      (a!75 (def-axiom (or a!3
                           (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))))
      (a!77 (def-axiom (or a!3 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!79 (def-axiom (or a!3 (= a!1 (select aux!29_n L1_0_n)))))
      (a!80 (def-axiom (or a!3 (= L1_1_n (select aux!29_n L1_0_n))))))
(let ((a!14 (monotonicity (monotonicity a!8 (rewrite a!9) a!12 (= a!6 a!13))
                          (= (or (not L1_tr1) a!6) (or (not L1_tr1) a!13))))
      (a!27 (monotonicity a!26
                          (= (or (not L1_ext0_n) a!17 L1_ext!612_n)
                             (or (not L1_ext0_n) a!25 L1_ext!612_n))))
      (a!53 (mp (asserted (or (not spacer_proxy!18) a!44))
                a!52
                (or (not spacer_proxy!18) a!50))))
(let ((a!15 (mp (asserted (or (not L1_tr1) a!6)) a!14 (or (not L1_tr1) a!13)))
      (a!28 (mp (asserted (or (not L1_ext0_n) a!17 L1_ext!612_n))
                a!27
                (or (not L1_ext0_n) a!25 L1_ext!612_n))))
(let ((a!35 (unit-resolution (mp a!28
                                 a!31
                                 (or (not L1_ext0_n) (not a!30) L1_ext!612_n))
                             (unit-resolution (def-axiom (or a!30 a!19))
                                              a!34
                                              a!30)
                             (asserted (not L1_ext!612_n))
                             (not L1_ext0_n))))
(let ((a!42 (unit-resolution (mp a!15 a!16 (or (not L1_tr1) (not a!3)))
                             (unit-resolution (asserted (or L1_ext0_n
                                                            L1_tr0
                                                            L1_tr1))
                                              a!35
                                              (unit-resolution a!39
                                                               a!41
                                                               (not L1_tr0))
                                              L1_tr1)
                             (not a!3)))
      (a!57 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             (unit-resolution a!39 a!56 (not L1_tr0))
                             a!35
                             L1_tr1)))
(let ((a!58 (unit-resolution (mp a!15 a!16 (or (not L1_tr1) (not a!3)))
                             a!57
                             (not a!3)))
      (a!65 (unit-resolution (mp a!60
                                 (trans (monotonicity a!61 a!62)
                                        (rewrite a!63)
                                        a!64)
                                 (or (not L1_tr1)
                                     (<= L1_5_1 0)
                                     |L1#level_1!112|))
                             a!57
                             (asserted (not |L1#level_1!112|))
                             (<= L1_5_1 0))))
(let ((a!59 (unit-resolution (def-axiom (or a!3 (= L1_5_1 L1_2_0)))
                             a!58
                             (= L1_5_1 L1_2_0)))
      (a!66 (th-lemma (hypothesis (not (= L1_5_1 0)))
                      a!65
                      (hypothesis (>= L1_5_1 0))
                      false))
      (a!78 (symm (unit-resolution a!77
                                   a!58
                                   (= L1_3_n (select aux!30_n L1_2_n)))
                  (= (select aux!30_n L1_2_n) L1_3_n)))
      (a!81 (symm (unit-resolution a!80
                                   a!58
                                   (= L1_1_n (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) L1_1_n))))
(let ((a!67 (lemma a!66 (or (= L1_5_1 0) (not (>= L1_5_1 0)))))
      (a!68 (th-lemma (symm a!59 (= L1_2_0 L1_5_1))
                      (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!82 (trans (unit-resolution a!79 a!58 (= a!1 (select aux!29_n L1_0_n)))
                   a!81
                   (= a!1 L1_1_n)))
      (a!90 (trans (monotonicity a!59 (= (= L1_5_1 0) (= L1_2_0 0)))
                   (symm a!89 (= (= L1_2_0 0) (= L1_0_n L1_2_0)))
                   (= (= L1_5_1 0) (= L1_0_n L1_2_0)))))
(let ((a!70 (th-lemma (hypothesis (not (>= L1_5_1 0)))
                      a!68
                      a!69
                      (unit-resolution a!54
                                       (asserted spacer_proxy!7)
                                       (not (<= L1_5_n 0)))
                      false)))
(let ((a!72 (unit-resolution (lemma a!70 (or (>= L1_5_1 0) a!71))
                             a!69
                             (>= L1_5_1 0))))
(let ((a!74 (trans (trans (symm a!59 (= L1_2_0 L1_5_1))
                          (unit-resolution a!67 a!72 (= L1_5_1 0))
                          (= L1_2_0 0))
                   (symm (th-lemma a!73 a!32 (= L1_2_n 0)) (= 0 L1_2_n))
                   (= L1_2_0 L1_2_n))))
(let ((a!76 (trans (monotonicity a!74
                                 (= (select aux!32_n L1_2_0)
                                    (select aux!32_n L1_2_n)))
                   (unit-resolution a!75
                                    a!58
                                    (= (select aux!32_n L1_2_n)
                                       (select aux!30_n L1_2_n)))
                   (= (select aux!32_n L1_2_0) (select aux!30_n L1_2_n)))))
(let ((a!83 (monotonicity (trans a!76 a!78 (= (select aux!32_n L1_2_0) L1_3_n))
                          a!82
                          (= (= (select aux!32_n L1_2_0) a!1) (= L1_3_n L1_1_n)))))
(let ((a!84 (symm a!83 (= (= L1_3_n L1_1_n) (= (select aux!32_n L1_2_0) a!1)))))
(let ((a!86 (mp (th-lemma (unit-resolution a!53 (asserted spacer_proxy!18) a!50)
                          (not (= L1_3_n L1_1_n)))
                (monotonicity a!84 a!85)
                (not (= (select aux!32_n L1_2_0) a!1)))))
(let ((a!91 (unit-resolution a!43
                             a!86
                             (mp (unit-resolution a!67 a!72 (= L1_5_1 0))
                                 a!90
                                 (= L1_0_n L1_2_0))
                             false)))
  (unit-resolution (def-axiom a!4) a!42 (th-lemma (lemma a!91 a!71) a!2) false)))))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (= L1_5_n 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(<= L1_0_n 0)
(>= L1_0_n 0)
(>= L1_5_n 1)
(<= L1_2_n 0)
(= 0 L1_2_n)
(not (= L1_3_n L1_1_n))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (= L1_5_n 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(<= L1_0_n 0)
(>= L1_0_n 0)
(>= L1_5_n 1)
(<= L1_2_n 0)
(= 0 L1_2_n)
(not (= L1_3_n L1_1_n))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= L1_5_n 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(<= L1_0_n 0)
(>= L1_0_n 0)
(>= L1_5_n 1)
(<= L1_2_n 0)
(= 0 L1_2_n)
(not (= L1_3_n L1_1_n))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (<= 0 L1_2_n))
    (= L1_3_n L1_1_n)
    (not (>= L1_5_n 1)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    |L1#level_1!112|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L2_tr0 a!1) |L2#level_2!63|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L1_tr1 a!1) |L1#level_2!113|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_0_1 0))
               (not (>= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0))))
  (or (=> L1_tr1 a!1) |L1#level_2!113|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 2 depth: 0
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 2 depth: 4
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_2_n 0)
       (= L1_0_n 0)
       (not (<= L1_4_n 0))
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L1_ext!612_1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
      (a!2 (rewrite (= (+ L1_1_n (* (- 1) L1_3_n)) (+ (* (- 1) L1_3_n) L1_1_n))))
      (a!3 (= (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)
              (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)))
      (a!4 (not (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)))
      (a!6 (= (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)
              (>= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!7 (not (>= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!11 (ite (= L1_0_n L1_2_0)
                 (select aux!32_n L1_2_0)
                 (select aux!31_n L1_0_n)))
      (a!12 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!15 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               (select aux!29_n L1_0_n)))
      (a!19 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!20 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!21 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!27 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!28 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!31 (asserted (or (not spacer_proxy!4) (not (<= L1_4_n 0)))))
      (a!32 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!37 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!38 (= (<= L1_2_n (+ (- 1) L1_5_n))
               (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!39 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!41 (= (= L1_5_n (+ 1 L1_0_n)) (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!42 (= (<= L1_4_n (+ (- 1) L1_5_n))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!43 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!49 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!52 (unit-resolution (asserted (or (not spacer_proxy!2) (<= L1_2_n 0)))
                             (asserted spacer_proxy!2)
                             (<= L1_2_n 0)))
      (a!65 (or (not (<= L1_0_1 0))
                (not (<= L1_2_1 0))
                (not (>= L1_0_1 0))
                (not (>= L1_2_1 0))
                (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
                (<= L1_5_1 0)))
      (a!66 (rewrite (= (+ L1_3_1 (* (- 1) L1_1_1)) (+ (* (- 1) L1_1_1) L1_3_1))))
      (a!67 (= (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (= (+ (* (- 1) L1_1_1) L1_3_1) 0)))
      (a!68 (or (not (<= L1_0_1 0))
                (not (<= L1_2_1 0))
                (not (>= L1_0_1 0))
                (not (>= L1_2_1 0))
                (= (+ (* (- 1) L1_1_1) L1_3_1) 0)
                (<= L1_5_1 0)))
      (a!72 (= (= (+ (* (- 1) L1_1_1) L1_3_1) 0)
               (= (+ L1_1_1 (* (- 1) L1_3_1)) 0)))
      (a!73 (or (not (<= L1_0_1 0))
                (not (<= L1_2_1 0))
                (not (>= L1_0_1 0))
                (not (>= L1_2_1 0))
                (= (+ L1_1_1 (* (- 1) L1_3_1)) 0)
                (<= L1_5_1 0)))
      (a!76 (or (not L1_tr1)
                (not (<= L1_0_1 0))
                (not (<= L1_2_1 0))
                (not (>= L1_0_1 0))
                (not (>= L1_2_1 0))
                (= (+ L1_1_1 (* (- 1) L1_3_1)) 0)
                (<= L1_5_1 0)
                |L1#level_2!113|))
      (a!83 (unit-resolution (asserted (or (not spacer_proxy!5) (<= L1_0_n 0)))
                             (asserted spacer_proxy!5)
                             (<= L1_0_n 0)))
      (a!86 (unit-resolution (asserted (or (not spacer_proxy!3) (>= L1_2_n 0)))
                             (asserted spacer_proxy!3)
                             (>= L1_2_n 0)))
      (a!98 (unit-resolution (asserted (or (not spacer_proxy!6) (>= L1_0_n 0)))
                             (asserted spacer_proxy!6)
                             (>= L1_0_n 0)))
      (a!115 (or (not (= L1_0_1 0))
                 (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
                 (<= L1_5_1 0)
                 (not (= L1_2_1 0))))
      (a!116 (= (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
                (<= (+ (* (- 1) L1_1_1) L1_3_1) 0)))
      (a!117 (or (not (= L1_0_1 0))
                 (<= (+ (* (- 1) L1_1_1) L1_3_1) 0)
                 (<= L1_5_1 0)
                 (not (= L1_2_1 0))))
      (a!121 (= (<= (+ (* (- 1) L1_1_1) L1_3_1) 0)
                (>= (+ L1_1_1 (* (- 1) L1_3_1)) 0)))
      (a!122 (or (not (= L1_0_1 0))
                 (>= (+ L1_1_1 (* (- 1) L1_3_1)) 0)
                 (<= L1_5_1 0)
                 (not (= L1_2_1 0))))
      (a!125 (or (not L1_tr1)
                 (not (= L1_0_1 0))
                 (>= (+ L1_1_1 (* (- 1) L1_3_1)) 0)
                 (<= L1_5_1 0)
                 (not (= L1_2_1 0))
                 |L1#level_5!144|)))
(let ((a!5 (monotonicity (monotonicity (monotonicity a!2 a!3) (= a!1 a!4))
                         (= (or (not spacer_proxy!18) a!1)
                            (or (not spacer_proxy!18) a!4))))
      (a!8 (monotonicity (monotonicity (rewrite a!6) (= a!4 a!7))
                         (= (or (not spacer_proxy!18) a!4)
                            (or (not spacer_proxy!18) a!7))))
      (a!13 (or (not (= L1_0_0 L1_0_n))
                (not (= L1_4_0 L1_4_n))
                (not (= L1_5_0 L1_2_0))
                (not (= L1_0_1 L1_0_n))
                (not (= L1_2_1 L1_2_n))
                (not (= L1_4_1 L1_4_n))
                (not (= L1_5_1 L1_2_0))
                (not (= a!11 (select aux!29_n L1_0_n)))
                (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
                (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
                (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
                (not (= L1_3_1 (select aux!35_n L1_2_n)))
                (not (= L1_1_1 (select aux!36_n L1_0_n)))
                (not (= L1_3_0 (select aux!33_n L1_2_0)))
                a!12
                (not (= L1_1_n (select aux!29_n L1_0_n)))
                (not (= L1_1_0 (select aux!34_n L1_0_n)))
                (not (= L1_3_n (select aux!30_n L1_2_n)))
                (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!16 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 a!15
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= L1_5_n (+ 1 L1_2_0))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 (not (<= L1_4_n L1_2_0))))
      (a!17 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               a!11))
      (a!22 (monotonicity (rewrite a!20) (= (not (<= L1_4_n L1_2_0)) a!21)))
      (a!23 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!11 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!21))
      (a!29 (monotonicity (rewrite (= a!27 (not a!28)))
                          (= (or (not L1_tr0) a!27)
                             (or (not L1_tr0) (not a!28)))))
      (a!33 (unit-resolution (asserted a!32)
                             (asserted spacer_proxy!1)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!40 (= (not (<= L1_2_n (+ (- 1) L1_5_n))) a!39))
      (a!44 (= (not (<= L1_4_n (+ (- 1) L1_5_n))) a!43))
      (a!45 (and a!39 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)) (= L1_5_n 1) a!43))
      (a!50 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!49
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!69 (rewrite (= (=> L1_tr1 a!68) (or (not L1_tr1) a!68))))
      (a!71 (= (or (=> L1_tr1 a!65) |L1#level_2!113|)
               (or (or (not L1_tr1) a!68) |L1#level_2!113|)))
      (a!74 (monotonicity (monotonicity (rewrite a!72) (= a!68 a!73))
                          (= (or (not L1_tr1) a!68) (or (not L1_tr1) a!73))))
      (a!75 (= (or (or (not L1_tr1) a!68) |L1#level_2!113|)
               (or (or (not L1_tr1) a!73) |L1#level_2!113|)))
      (a!77 (= (or (or (not L1_tr1) a!73) |L1#level_2!113|) a!76))
      (a!78 (= (or (or (not L1_tr1) a!68) |L1#level_2!113|) a!76))
      (a!84 (def-axiom (or (not (= L1_0_n L1_2_0))
                           (= (select aux!32_n L1_2_0) a!11))))
      (a!96 (= (not (= L1_3_n L1_1_n)) (not (= (select aux!32_n L1_2_0) a!11))))
      (a!99 (trans (monotonicity (th-lemma a!98 a!83 (= L1_0_n 0))
                                 (= (= L1_0_n L1_2_0) (= 0 L1_2_0)))
                   (commutativity (= (= 0 L1_2_0) (= L1_2_0 0)))
                   (= (= L1_0_n L1_2_0) (= L1_2_0 0))))
      (a!118 (rewrite (= (=> L1_tr1 a!117) (or (not L1_tr1) a!117))))
      (a!120 (= (or (=> L1_tr1 a!115) |L1#level_5!144|)
                (or (or (not L1_tr1) a!117) |L1#level_5!144|)))
      (a!123 (monotonicity (monotonicity (rewrite a!121) (= a!117 a!122))
                           (= (or (not L1_tr1) a!117) (or (not L1_tr1) a!122))))
      (a!124 (= (or (or (not L1_tr1) a!117) |L1#level_5!144|)
                (or (or (not L1_tr1) a!122) |L1#level_5!144|)))
      (a!126 (= (or (or (not L1_tr1) a!122) |L1#level_5!144|) a!125))
      (a!127 (= (or (or (not L1_tr1) a!117) |L1#level_5!144|) a!125))
      (a!136 (def-axiom (or (= L1_0_n L1_2_0) (= (select aux!31_n L1_0_n) a!11)))))
(let ((a!9 (trans a!5
                  a!8
                  (= (or (not spacer_proxy!18) a!1)
                     (or (not spacer_proxy!18) a!7))))
      (a!14 (def-axiom (or a!13 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!18 (monotonicity (rewrite a!17)
                          (= a!15 (= a!11 (select aux!29_n L1_0_n)))))
      (a!26 (monotonicity (rewrite (= a!23 (not a!13)))
                          (= (or (not L1_tr1) a!23)
                             (or (not L1_tr1) (not a!13)))))
      (a!30 (mp (asserted (or (not L1_tr0) a!27))
                a!29
                (or (not L1_tr0) (not a!28))))
      (a!34 (th-lemma (unit-resolution a!31
                                       (asserted spacer_proxy!4)
                                       (not (<= L1_4_n 0)))
                      a!33
                      (not (<= L1_5_n 0))))
      (a!46 (monotonicity (monotonicity (rewrite a!38) a!40)
                          (rewrite a!41)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!42) a!44)
                          (= a!37 a!45)))
      (a!51 (monotonicity (rewrite (= a!45 (not a!50)))
                          (= (or (not L1_ext0_n) a!45 L1_ext!612_n)
                             (or (not L1_ext0_n) (not a!50) L1_ext!612_n))))
      (a!57 (def-axiom (or a!13
                           (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))))
      (a!60 (def-axiom (or a!13
                           (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))))
      (a!62 (def-axiom (or a!13 (= L1_3_1 (select aux!35_n L1_2_n)))))
      (a!70 (trans (monotonicity (monotonicity (monotonicity a!66 a!67)
                                               (= a!65 a!68))
                                 (= (=> L1_tr1 a!65) (=> L1_tr1 a!68)))
                   a!69
                   (= (=> L1_tr1 a!65) (or (not L1_tr1) a!68))))
      (a!90 (def-axiom (or a!13 (= a!11 (select aux!29_n L1_0_n)))))
      (a!91 (def-axiom (or a!13 (= L1_1_n (select aux!29_n L1_0_n)))))
      (a!104 (or a!13 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!119 (trans (monotonicity (monotonicity (monotonicity a!66 a!116)
                                                (= a!115 a!117))
                                  (= (=> L1_tr1 a!115) (=> L1_tr1 a!117)))
                    a!118
                    (= (=> L1_tr1 a!115) (or (not L1_tr1) a!117))))
      (a!132 (def-axiom (or a!13 (= L1_1_1 (select aux!36_n L1_0_n)))))
      (a!134 (def-axiom (or a!13
                            (= (select aux!36_n L1_0_n)
                               (select aux!31_n L1_0_n))))))
(let ((a!10 (mp (asserted (or (not spacer_proxy!18) a!1))
                a!9
                (or (not spacer_proxy!18) a!7)))
      (a!24 (monotonicity (monotonicity a!18 (rewrite a!19) a!22 (= a!16 a!23))
                          (= (or (not L1_tr1) a!16) (or (not L1_tr1) a!23))))
      (a!35 (lemma (th-lemma (hypothesis (= L1_5_n 0)) a!34 false)
                   (not (= L1_5_n 0))))
      (a!47 (monotonicity a!46
                          (= (or (not L1_ext0_n) a!37 L1_ext!612_n)
                             (or (not L1_ext0_n) a!45 L1_ext!612_n))))
      (a!53 (th-lemma a!34 a!52 (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!79 (trans (monotonicity a!70 a!71)
                   (trans (monotonicity a!74 a!75) (rewrite a!77) a!78)
                   (= (or (=> L1_tr1 a!65) |L1#level_2!113|) a!76)))
      (a!128 (trans (monotonicity a!119 a!120)
                    (trans (monotonicity a!123 a!124) (rewrite a!126) a!127)
                    (= (or (=> L1_tr1 a!115) |L1#level_5!144|) a!125))))
(let ((a!25 (mp (asserted (or (not L1_tr1) a!16)) a!24 (or (not L1_tr1) a!23)))
      (a!36 (unit-resolution (def-axiom (or a!28 (= L1_5_n 0))) a!35 a!28))
      (a!48 (mp (asserted (or (not L1_ext0_n) a!37 L1_ext!612_n))
                a!47
                (or (not L1_ext0_n) a!45 L1_ext!612_n)))
      (a!80 (mp (asserted (or (=> L1_tr1 a!65) |L1#level_2!113|)) a!79 a!76))
      (a!129 (mp (asserted (or (=> L1_tr1 a!115) |L1#level_5!144|)) a!128 a!125)))
(let ((a!54 (unit-resolution (mp a!48
                                 a!51
                                 (or (not L1_ext0_n) (not a!50) L1_ext!612_n))
                             (unit-resolution (def-axiom (or a!50 a!39))
                                              a!53
                                              a!50)
                             (asserted (not L1_ext!612_n))
                             (not L1_ext0_n))))
(let ((a!55 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             (unit-resolution a!30 a!36 (not L1_tr0))
                             a!54
                             L1_tr1)))
(let ((a!56 (unit-resolution (mp a!25 a!26 (or (not L1_tr1) (not a!13)))
                             a!55
                             (not a!13))))
(let ((a!58 (unit-resolution a!57
                             a!56
                             (= (select aux!32_n L1_2_n)
                                (select aux!30_n L1_2_n))))
      (a!61 (symm (unit-resolution a!60
                                   a!56
                                   (= (select aux!35_n L1_2_n)
                                      (select aux!32_n L1_2_n)))
                  (= (select aux!32_n L1_2_n) (select aux!35_n L1_2_n))))
      (a!63 (symm (unit-resolution a!62
                                   a!56
                                   (= L1_3_1 (select aux!35_n L1_2_n)))
                  (= (select aux!35_n L1_2_n) L1_3_1)))
      (a!81 (unit-resolution (def-axiom (or a!13 (= L1_0_1 L1_0_n)))
                             a!56
                             (= L1_0_1 L1_0_n)))
      (a!85 (unit-resolution (def-axiom (or a!13 (= L1_5_1 L1_2_0)))
                             a!56
                             (= L1_5_1 L1_2_0)))
      (a!89 (symm (unit-resolution a!14
                                   a!56
                                   (= L1_3_n (select aux!30_n L1_2_n)))
                  (= (select aux!30_n L1_2_n) L1_3_n)))
      (a!92 (symm (unit-resolution a!91
                                   a!56
                                   (= L1_1_n (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) L1_1_n)))
      (a!105 (unit-resolution (def-axiom a!104)
                              a!56
                              (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!109 (unit-resolution (def-axiom (or a!13 (= L1_2_1 L1_2_n)))
                              a!56
                              (= L1_2_1 L1_2_n))))
(let ((a!59 (trans (unit-resolution a!14
                                    a!56
                                    (= L1_3_n (select aux!30_n L1_2_n)))
                   (symm a!58
                         (= (select aux!30_n L1_2_n) (select aux!32_n L1_2_n)))
                   (= L1_3_n (select aux!32_n L1_2_n))))
      (a!82 (th-lemma (symm a!81 (= L1_0_n L1_0_1))
                      (>= (+ L1_0_n (* (- 1) L1_0_1)) 0)))
      (a!87 (trans (trans (symm a!85 (= L1_2_0 L1_5_1))
                          (hypothesis (= L1_5_1 0))
                          (= L1_2_0 0))
                   (symm (th-lemma a!86 a!52 (= L1_2_n 0)) (= 0 L1_2_n))
                   (= L1_2_0 L1_2_n)))
      (a!93 (trans (unit-resolution a!90 a!56 (= a!11 (select aux!29_n L1_0_n)))
                   a!92
                   (= a!11 L1_1_n)))
      (a!100 (trans (monotonicity a!85 (= (= L1_5_1 0) (= L1_2_0 0)))
                    (symm a!99 (= (= L1_2_0 0) (= L1_0_n L1_2_0)))
                    (= (= L1_5_1 0) (= L1_0_n L1_2_0))))
      (a!102 (monotonicity (monotonicity a!85 (= (= L1_5_1 0) (= L1_2_0 0)))
                           (= (not (= L1_5_1 0)) (not (= L1_2_0 0)))))
      (a!106 (th-lemma a!105 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!107 (th-lemma (symm a!85 (= L1_2_0 L1_5_1))
                       (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!110 (th-lemma (symm a!109 (= L1_2_n L1_2_1))
                       (<= (+ L1_2_n (* (- 1) L1_2_1)) 0)))
      (a!111 (th-lemma (symm a!109 (= L1_2_n L1_2_1))
                       (>= (+ L1_2_n (* (- 1) L1_2_1)) 0)))
      (a!112 (th-lemma (symm a!81 (= L1_0_n L1_0_1))
                       (<= (+ L1_0_n (* (- 1) L1_0_1)) 0))))
(let ((a!64 (trans (trans a!59 a!61 (= L1_3_n (select aux!35_n L1_2_n)))
                   a!63
                   (= L1_3_n L1_3_1)))
      (a!88 (trans (monotonicity a!87
                                 (= (select aux!32_n L1_2_0)
                                    (select aux!32_n L1_2_n)))
                   a!58
                   (= (select aux!32_n L1_2_0) (select aux!30_n L1_2_n))))
      (a!137 (monotonicity a!100 (= (not (= L1_5_1 0)) (not (= L1_0_n L1_2_0))))))
(let ((a!94 (monotonicity (trans a!88 a!89 (= (select aux!32_n L1_2_0) L1_3_n))
                          a!93
                          (= (= (select aux!32_n L1_2_0) a!11)
                             (= L1_3_n L1_1_n)))))
(let ((a!95 (symm a!94 (= (= L1_3_n L1_1_n) (= (select aux!32_n L1_2_0) a!11)))))
(let ((a!97 (mp (th-lemma (unit-resolution a!10 (asserted spacer_proxy!18) a!7)
                          (not (= L1_3_n L1_1_n)))
                (monotonicity a!95 a!96)
                (not (= (select aux!32_n L1_2_0) a!11)))))
(let ((a!101 (unit-resolution a!84
                              a!97
                              (mp (hypothesis (= L1_5_1 0))
                                  a!100
                                  (= L1_0_n L1_2_0))
                              false)))
(let ((a!103 (mp (lemma a!101 (not (= L1_5_1 0))) a!102 (not (= L1_2_0 0))))
      (a!138 (mp (lemma a!101 (not (= L1_5_1 0))) a!137 (not (= L1_0_n L1_2_0)))))
(let ((a!108 (th-lemma (th-lemma a!103
                                 (th-lemma a!106 a!34 (>= L1_2_0 0))
                                 (not (<= L1_2_0 0)))
                       a!107
                       (not (<= L1_5_1 0)))))
(let ((a!113 (unit-resolution a!80
                              (th-lemma a!82 a!83 (<= L1_0_1 0))
                              (asserted (not |L1#level_2!113|))
                              a!55
                              a!108
                              (th-lemma a!110 a!86 (>= L1_2_1 0))
                              (th-lemma a!111 a!52 (<= L1_2_1 0))
                              (th-lemma a!112 a!98 (>= L1_0_1 0))
                              (= (+ L1_1_1 (* (- 1) L1_3_1)) 0)))
      (a!130 (unit-resolution a!129
                              a!108
                              a!55
                              (trans a!109
                                     (th-lemma a!86 a!52 (= L1_2_n 0))
                                     (= L1_2_1 0))
                              (trans a!81
                                     (th-lemma a!98 a!83 (= L1_0_n 0))
                                     (= L1_0_1 0))
                              (asserted (not |L1#level_5!144|))
                              (>= (+ L1_1_1 (* (- 1) L1_3_1)) 0))))
(let ((a!114 (th-lemma a!113 (<= (+ L1_1_1 (* (- 1) L1_3_1)) 0))))
(let ((a!131 (trans a!64
                    (symm (th-lemma a!114 a!130 (= L1_1_1 L1_3_1))
                          (= L1_3_1 L1_1_1))
                    (= L1_3_n L1_1_1))))
(let ((a!133 (trans a!131
                    (unit-resolution a!132
                                     a!56
                                     (= L1_1_1 (select aux!36_n L1_0_n)))
                    (= L1_3_n (select aux!36_n L1_0_n)))))
(let ((a!135 (trans a!133
                    (unit-resolution a!134
                                     a!56
                                     (= (select aux!36_n L1_0_n)
                                        (select aux!31_n L1_0_n)))
                    (= L1_3_n (select aux!31_n L1_0_n)))))
(let ((a!139 (trans a!135
                    (unit-resolution a!136
                                     a!138
                                     (= (select aux!31_n L1_0_n) a!11))
                    (= L1_3_n a!11))))
(let ((a!140 (trans a!139
                    (unit-resolution a!90
                                     a!56
                                     (= a!11 (select aux!29_n L1_0_n)))
                    (= L1_3_n (select aux!29_n L1_0_n)))))
  (th-lemma (unit-resolution a!10 (asserted spacer_proxy!18) a!7)
            (trans a!140 a!92 (= L1_3_n L1_1_n))
            false)))))))))))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (>= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_5_n 0))
(<= L1_0_n 0)
(>= L1_0_n 0)
(<= L1_2_n 0)
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(not (<= L1_4_n 0))
(= 0 L1_2_n)
(not (= L1_3_n L1_1_n))
(= L1_0_n 0)
(= L1_2_n 0)
(>= L1_2_n 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (>= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_5_n 0))
(<= L1_0_n 0)
(>= L1_0_n 0)
(<= L1_2_n 0)
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(not (<= L1_4_n 0))
(= 0 L1_2_n)
(not (= L1_3_n L1_1_n))
(= L1_0_n 0)
(= L1_2_n 0)
(>= L1_2_n 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (>= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_5_n 0))
(<= L1_0_n 0)
(>= L1_0_n 0)
(<= L1_2_n 0)
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(not (<= L1_4_n 0))
(= 0 L1_2_n)
(not (= L1_3_n L1_1_n))
(= L1_0_n 0)
(= L1_2_n 0)
(>= L1_2_n 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 13 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= L1_3_n L1_1_n))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    |L1#level_2!113|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!1) |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_2_1 0))
               (not (>= L1_0_1 0))
               (<= L1_5_1 0)
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 4
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)))
      (a!2 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!3 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!4 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!8 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
              (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!9 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!12 (or (not L2_tr0)
                (not (<= L1_0_0 0))
                (not (<= L1_2_0 0))
                (not (>= L1_2_0 0))
                (not (>= L1_0_0 0))
                (<= L1_5_0 0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                |L2#level_3!79|))
      (a!17 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!19 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!20 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!21 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!25 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!26 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!27 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1) |L2#level_3!79|))
      (a!30 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!33 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!34 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!35 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!36 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!45 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!56 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!58 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!61 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!66 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!75 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!84 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!85 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
(let ((a!5 (rewrite (= (=> L2_tr0 a!4) (or (not L2_tr0) a!4))))
      (a!7 (= (or (=> L2_tr0 a!1) |L2#level_3!79|)
              (or (or (not L2_tr0) a!4) |L2#level_3!79|)))
      (a!10 (monotonicity (monotonicity (rewrite a!8) (= a!4 a!9))
                          (= (or (not L2_tr0) a!4) (or (not L2_tr0) a!9))))
      (a!11 (= (or (or (not L2_tr0) a!4) |L2#level_3!79|)
               (or (or (not L2_tr0) a!9) |L2#level_3!79|)))
      (a!13 (= (or (or (not L2_tr0) a!9) |L2#level_3!79|) a!12))
      (a!14 (= (or (or (not L2_tr0) a!4) |L2#level_3!79|) a!12))
      (a!18 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!17))
      (a!22 (monotonicity (monotonicity (rewrite a!20) (= a!19 a!21))
                          (= (or (not L2_tr0) a!19) (or (not L2_tr0) a!21))))
      (a!28 (trans (monotonicity (rewrite (= a!25 a!26))
                                 (= (or a!25 |L2#level_3!79|)
                                    (or a!26 |L2#level_3!79|)))
                   (rewrite (= (or a!26 |L2#level_3!79|) a!27))
                   (= (or a!25 |L2#level_3!79|) a!27)))
      (a!31 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!30
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!37 (monotonicity (rewrite a!35) (= (not (<= L2_4_n L2_5_0)) a!36)))
      (a!38 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!36))
      (a!46 (unit-resolution (asserted (or (not spacer_proxy!3) a!45))
                             (asserted spacer_proxy!3)
                             a!45))
      (a!57 (unit-resolution (asserted a!56)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!59 (unit-resolution (asserted a!58)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!62 (unit-resolution (asserted a!61)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!67 (unit-resolution (asserted a!66)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!76 (unit-resolution (asserted (or (not spacer_proxy!14) a!75))
                             (asserted spacer_proxy!14)
                             a!75)))
(let ((a!6 (trans (monotonicity (monotonicity (monotonicity a!2 a!3)
                                              (= a!1 a!4))
                                (= (=> L2_tr0 a!1) (=> L2_tr0 a!4)))
                  a!5
                  (= (=> L2_tr0 a!1) (or (not L2_tr0) a!4))))
      (a!23 (mp (asserted (or (not L2_tr0) a!19)) a!22 (or (not L2_tr0) a!21)))
      (a!24 (monotonicity (rewrite (= a!21 (not a!18)))
                          (= (or (not L2_tr0) a!21)
                             (or (not L2_tr0) (not a!18)))))
      (a!29 (unit-resolution (mp (asserted (or a!25 |L2#level_3!79|)) a!28 a!27)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_3!79|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!32 (or a!31 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!39 (monotonicity (monotonicity (rewrite a!34) a!37 (= a!33 a!38))
                          (= (or (not L2_tr1) a!33) (or (not L2_tr1) a!38))))
      (a!41 (monotonicity (rewrite (= a!38 (not a!31)))
                          (= (or (not L2_tr1) a!38)
                             (or (not L2_tr1) (not a!31)))))
      (a!52 (or a!18 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!68 (def-axiom (or a!18 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!69 (def-axiom (or a!18
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!72 (def-axiom (or a!18 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!77 (def-axiom (or a!18 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!78 (def-axiom (or a!18
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!81 (def-axiom (or a!18 (= L1_1_0 (select aux!15_n L2_0_n))))))
(let ((a!15 (trans (monotonicity a!6 a!7)
                   (trans (monotonicity a!10 a!11) (rewrite a!13) a!14)
                   (= (or (=> L2_tr0 a!1) |L2#level_3!79|) a!12)))
      (a!40 (mp (asserted (or (not L2_tr1) a!33)) a!39 (or (not L2_tr1) a!38))))
(let ((a!16 (mp (asserted (or (=> L2_tr0 a!1) |L2#level_3!79|)) a!15 a!12))
      (a!42 (unit-resolution (mp a!40 a!41 (or (not L2_tr1) (not a!31)))
                             (hypothesis L2_tr1)
                             (not a!31))))
(let ((a!43 (unit-resolution (def-axiom a!32)
                             a!42
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!47 (unit-resolution (def-axiom (or a!31 (= L2_4_0 L2_4_n)))
                             a!42
                             (= L2_4_0 L2_4_n))))
(let ((a!44 (th-lemma a!43 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!48 (th-lemma a!47 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!49 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!29 a!44 a!46 a!48 false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!50 (unit-resolution (mp a!23 a!24 (or (not L2_tr0) (not a!18)))
                             a!49
                             (not a!18))))
(let ((a!51 (unit-resolution (def-axiom (or a!18 (= L2_5_n 0)))
                             a!50
                             (= L2_5_n 0)))
      (a!53 (unit-resolution (def-axiom a!52)
                             a!50
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!54 (unit-resolution (def-axiom (or a!18 (= L1_0_0 L2_0_n)))
                             a!50
                             (= L1_0_0 L2_0_n)))
      (a!63 (unit-resolution (def-axiom (or a!18 (= L1_2_0 L2_2_n)))
                             a!50
                             (= L1_2_0 L2_2_n)))
      (a!70 (symm (unit-resolution a!69
                                   a!50
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!73 (symm (unit-resolution a!72
                                   a!50
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!79 (symm (unit-resolution a!78
                                   a!50
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!82 (symm (unit-resolution a!81
                                   a!50
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0))))
(let ((a!55 (th-lemma (symm a!54 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!60 (th-lemma (symm a!54 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!64 (th-lemma (symm a!63 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!65 (th-lemma (symm a!63 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!71 (trans (unit-resolution a!68
                                    a!50
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!70
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!80 (trans (unit-resolution a!77
                                    a!50
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!79
                   (= L2_1_n (select aux!15_n L2_0_n)))))
(let ((a!74 (th-lemma (trans a!71 a!73 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!83 (th-lemma (trans a!80 a!82 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0))))
  (unit-resolution a!16
                   (th-lemma (th-lemma a!51 (>= L2_5_n 0))
                             a!46
                             a!53
                             (not (<= L1_5_0 0)))
                   (th-lemma a!55
                             a!57
                             (th-lemma a!51 (<= L2_5_n 0))
                             (<= L1_0_0 0))
                   (asserted (not |L2#level_3!79|))
                   a!49
                   (th-lemma (th-lemma a!51 (>= L2_5_n 0))
                             a!59
                             a!60
                             (>= L1_0_0 0))
                   (th-lemma (th-lemma a!51 (>= L2_5_n 0))
                             a!62
                             a!64
                             (>= L1_2_0 0))
                   (th-lemma a!65
                             a!67
                             (th-lemma a!51 (<= L2_5_n 0))
                             (<= L1_2_0 0))
                   (th-lemma (th-lemma a!74 a!76 a!83 a!84) a!85)
                   false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 4 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 4 depth: 4
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not (= L2_0_0 query!0_0_n))
               (not (= L2_2_0 query!0_0_n))
               (not (= L2_4_0 query!0_1_n))
               (not (= L2_5_0 query!0_0_n))
               (not (= L2_0_1 query!0_4_n))
               (not (= L2_2_1 query!0_2_n))
               (not (= L2_4_1 query!0_1_n))
               (not (= L2_5_1 query!0_0_n))
               (not (= L2_0_2 query!0_4_n))
               (not (= L2_2_2 query!0_0_n))
               (not (= L2_4_2 query!0_1_n))
               (not (= L2_5_2 query!0_0_n))
               (not (= L2_0_3 query!0_0_n))
               (not (= L2_2_3 query!0_2_n))
               (not (= L2_4_3 query!0_1_n))
               (not (= L2_5_3 query!0_0_n))
               (not (= (select aux!10_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!4_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!7_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (not (= (select aux!9_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!6_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!5_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!8_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!3_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
               (not (= L2_1_3 (select aux!10_n query!0_0_n)))
               (not (= L2_3_3 (select aux!9_n query!0_2_n)))
               (not (= L2_3_2 (select aux!7_n query!0_0_n)))
               (not (= L2_1_2 (select aux!8_n query!0_4_n)))
               (not (= L2_1_1 (select aux!6_n query!0_4_n)))
               (not (= L2_3_1 (select aux!5_n query!0_2_n)))
               (not (= query!0_3_n (select aux!2_n query!0_2_n)))
               (not (= query!0_5_n (select aux!1_n query!0_4_n)))
               (not (= L2_1_0 (select aux!4_n query!0_0_n)))
               (not (= L2_3_0 (select aux!3_n query!0_0_n)))
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!3 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n))))
      (a!4 (= (<= query!0_1_n query!0_0_n)
              (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!5 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!17 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!18 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!20 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!21 (= (= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
               (= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!22 (not (= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!28 (= (= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!29 (not (= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!49 (hypothesis (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!53 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!54 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!57 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!61 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!62 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!64 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!65 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!66 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!67 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!68 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!74 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!75 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!76 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!77 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0))))
(let ((a!2 (or a!1
               (not (= (select aux!2_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))))
      (a!6 (monotonicity (rewrite a!4)
                         (= (not (<= query!0_1_n query!0_0_n)) a!5)))
      (a!7 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                a!5))
      (a!13 (def-axiom (or a!1
                           (= (select aux!3_n query!0_0_n)
                              (select aux!2_n query!0_0_n)))))
      (a!15 (def-axiom (or a!1 (= L2_3_0 (select aux!3_n query!0_0_n)))))
      (a!19 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!18))
      (a!23 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!22))
      (a!30 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!29))
      (a!33 (or (not query!0_dummy)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!29
                |query!0#level_4!80|))
      (a!63 (or a!61
                a!62
                a!54
                a!57
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!69 (or a!66
                a!68
                a!54
                a!57
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!78 (or a!75
                a!77
                a!54
                a!57
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!81 (or (not query!0_dummy)
                a!75
                a!77
                a!54
                a!57
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                |query!0#level_4!80|))
      (a!90 (def-axiom (or a!1 (= L2_1_0 (select aux!4_n query!0_0_n)))))
      (a!92 (def-axiom (or a!1
                           (= (select aux!4_n query!0_0_n)
                              (select aux!1_n query!0_0_n))))))
(let ((a!8 (monotonicity (monotonicity a!6 (= a!3 a!7))
                         (= (or (not query!0_dummy) a!3)
                            (or (not query!0_dummy) a!7))))
      (a!10 (monotonicity (rewrite (= a!7 (not a!1)))
                          (= (or (not query!0_dummy) a!7)
                             (or (not query!0_dummy) (not a!1)))))
      (a!24 (monotonicity (monotonicity (monotonicity (monotonicity a!20 a!21)
                                                      (= a!18 a!22))
                                        (= a!19 a!23))
                          (= (=> query!0_dummy a!19) (=> query!0_dummy a!23))))
      (a!25 (rewrite (= (=> query!0_dummy a!23) (or (not query!0_dummy) a!23))))
      (a!27 (= (or (=> query!0_dummy a!19) |query!0#level_4!80|)
               (or (or (not query!0_dummy) a!23) |query!0#level_4!80|)))
      (a!31 (monotonicity (monotonicity (monotonicity (rewrite a!28)
                                                      (= a!22 a!29))
                                        (= a!23 a!30))
                          (= (or (not query!0_dummy) a!23)
                             (or (not query!0_dummy) a!30))))
      (a!32 (= (or (or (not query!0_dummy) a!23) |query!0#level_4!80|)
               (or (or (not query!0_dummy) a!30) |query!0#level_4!80|)))
      (a!34 (= (or (or (not query!0_dummy) a!30) |query!0#level_4!80|) a!33))
      (a!35 (= (or (or (not query!0_dummy) a!23) |query!0#level_4!80|) a!33))
      (a!70 (monotonicity (monotonicity (monotonicity (monotonicity a!64 a!65)
                                                      (= a!61 a!66))
                                        (monotonicity (monotonicity a!64 a!67)
                                                      (= a!62 a!68))
                                        (= a!63 a!69))
                          (= (=> query!0_dummy a!63) (=> query!0_dummy a!69))))
      (a!71 (rewrite (= (=> query!0_dummy a!69) (or (not query!0_dummy) a!69))))
      (a!73 (= (or (=> query!0_dummy a!63) |query!0#level_4!80|)
               (or (or (not query!0_dummy) a!69) |query!0#level_4!80|)))
      (a!79 (monotonicity (monotonicity (monotonicity (rewrite a!74)
                                                      (= a!66 a!75))
                                        (monotonicity (rewrite a!76)
                                                      (= a!68 a!77))
                                        (= a!69 a!78))
                          (= (or (not query!0_dummy) a!69)
                             (or (not query!0_dummy) a!78))))
      (a!80 (= (or (or (not query!0_dummy) a!69) |query!0#level_4!80|)
               (or (or (not query!0_dummy) a!78) |query!0#level_4!80|)))
      (a!82 (= (or (or (not query!0_dummy) a!78) |query!0#level_4!80|) a!81))
      (a!83 (= (or (or (not query!0_dummy) a!69) |query!0#level_4!80|) a!81)))
(let ((a!9 (mp (asserted (or (not query!0_dummy) a!3))
               a!8
               (or (not query!0_dummy) a!7)))
      (a!26 (trans a!24
                   a!25
                   (= (=> query!0_dummy a!19) (or (not query!0_dummy) a!23))))
      (a!72 (trans a!70
                   a!71
                   (= (=> query!0_dummy a!63) (or (not query!0_dummy) a!69)))))
(let ((a!11 (unit-resolution (mp a!9 a!10 (or (not query!0_dummy) (not a!1)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!1)))
      (a!36 (trans (monotonicity a!26 a!27)
                   (trans (monotonicity a!31 a!32) (rewrite a!34) a!35)
                   (= (or (=> query!0_dummy a!19) |query!0#level_4!80|) a!33)))
      (a!84 (trans (monotonicity a!72 a!73)
                   (trans (monotonicity a!79 a!80) (rewrite a!82) a!83)
                   (= (or (=> query!0_dummy a!63) |query!0#level_4!80|) a!81))))
(let ((a!12 (unit-resolution (def-axiom a!2)
                             a!11
                             (not (= (select aux!2_n query!0_0_n)
                                     (select aux!1_n query!0_0_n)))))
      (a!14 (symm (unit-resolution a!13
                                   a!11
                                   (= (select aux!3_n query!0_0_n)
                                      (select aux!2_n query!0_0_n)))
                  (= (select aux!2_n query!0_0_n) (select aux!3_n query!0_0_n))))
      (a!16 (symm (unit-resolution a!15
                                   a!11
                                   (= L2_3_0 (select aux!3_n query!0_0_n)))
                  (= (select aux!3_n query!0_0_n) L2_3_0)))
      (a!37 (mp (asserted (or (=> query!0_dummy a!19) |query!0#level_4!80|))
                a!36
                a!33))
      (a!38 (unit-resolution (def-axiom (or a!1 (= L2_0_0 query!0_0_n)))
                             a!11
                             (= L2_0_0 query!0_0_n)))
      (a!40 (unit-resolution (def-axiom (or a!1 (= L2_2_0 query!0_0_n)))
                             a!11
                             (= L2_2_0 query!0_0_n)))
      (a!47 (unit-resolution (def-axiom (or a!1 (= L2_4_0 query!0_1_n)))
                             a!11
                             (= L2_4_0 query!0_1_n)))
      (a!50 (unit-resolution (def-axiom (or a!1 (= L2_5_0 query!0_0_n)))
                             a!11
                             (= L2_5_0 query!0_0_n)))
      (a!85 (mp (asserted (or (=> query!0_dummy a!63) |query!0#level_4!80|))
                a!84
                a!81)))
(let ((a!39 (th-lemma a!38 (>= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!41 (th-lemma a!40 (<= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!43 (th-lemma a!38 (<= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!44 (th-lemma a!40 (>= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!48 (th-lemma a!47 (>= (+ L2_4_0 (* (- 1) query!0_1_n)) 0)))
      (a!51 (th-lemma a!50 (<= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!55 (th-lemma a!50 (>= (+ L2_5_0 (* (- 1) query!0_0_n)) 0))))
(let ((a!42 (th-lemma a!39 a!41 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!45 (th-lemma a!43 a!44 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!52 (th-lemma a!48
                      a!49
                      (unit-resolution (def-axiom (or a!1 a!5)) a!11 a!5)
                      a!51
                      false))
      (a!56 (lemma (th-lemma (hypothesis a!54) a!41 a!55 false)
                   (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!58 (lemma (th-lemma (hypothesis a!57) a!44 a!51 false)
                   (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!86 (lemma (th-lemma (hypothesis a!75) a!43 a!55 false)
                   (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!87 (lemma (th-lemma (hypothesis a!77) a!39 a!51 false)
                   (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0))))
(let ((a!46 (th-lemma a!42 a!45 (= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!59 (th-lemma a!56 a!58 (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!88 (unit-resolution a!85
                             (lemma a!52 a!53)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!86
                             a!56
                             a!58
                             a!87
                             (asserted (not |query!0#level_4!80|))
                             (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!60 (unit-resolution a!37
                             a!46
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (lemma a!52 a!53)
                             a!59
                             (asserted (not |query!0#level_4!80|))
                             (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!89 (trans (trans a!14 a!16 (= (select aux!2_n query!0_0_n) L2_3_0))
                   (symm (th-lemma a!60 a!88 (= L2_1_0 L2_3_0))
                         (= L2_3_0 L2_1_0))
                   (= (select aux!2_n query!0_0_n) L2_1_0))))
(let ((a!91 (trans a!89
                   (unit-resolution a!90
                                    a!11
                                    (= L2_1_0 (select aux!4_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!4_n query!0_0_n)))))
(let ((a!93 (trans a!91
                   (unit-resolution a!92
                                    a!11
                                    (= (select aux!4_n query!0_0_n)
                                       (select aux!1_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))))
  (unit-resolution a!12 a!93 false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_4!80|)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      |L1#level_2!113|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!2) |L2#level_3!79|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_3!130|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (or (not (<= L1_0_1 0))
               a!1
               (not (>= L1_0_1 0))
               (<= L1_4_1 0)
               (not (>= L1_2_1 0))
               (not (<= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_3!130|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    |L1#level_2!113|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L2_tr0 a!1) |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_0_1 0))
               (not (>= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L2 (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2
      |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      |L1#level_3!130|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!2) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_4!141|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (or (not (<= L1_0_1 0))
               a!1
               (not (>= L1_0_1 0))
               (<= L1_4_1 0)
               (not (>= L1_2_1 0))
               (not (<= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_4!141|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    |L1#level_3!130|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L2_tr0 a!1) |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L1_tr1 a!1) |L1#level_4!141|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_0_1 0))
               (not (>= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0))))
  (or (=> L1_tr1 a!1) |L1#level_4!141|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    |L1#level_3!130|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!1) |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_4!141|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_2_1 0))
               (not (>= L1_0_1 0))
               (<= L1_5_1 0)
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_4!141|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      |L1#level_4!141|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!2) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_5!144|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (or (not (<= L1_0_1 0))
               a!1
               (not (>= L1_0_1 0))
               (<= L1_4_1 0)
               (not (>= L1_2_1 0))
               (not (<= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_5!144|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    |L1#level_4!141|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L2_tr0 a!1) |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L1_tr1 a!1) |L1#level_5!144|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_0_1 0))
               (not (>= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0))))
  (or (=> L1_tr1 a!1) |L1#level_5!144|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    |L1#level_4!141|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!1) |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_5!144|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_2_1 0))
               (not (>= L1_0_1 0))
               (<= L1_5_1 0)
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_5!144|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      |L1#level_5!144|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!2) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_6!436|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (or (not (<= L1_0_1 0))
               a!1
               (not (>= L1_0_1 0))
               (<= L1_4_1 0)
               (not (>= L1_2_1 0))
               (not (<= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_6!436|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    |L1#level_5!144|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L2_tr0 a!1) |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L1_tr1 a!1) |L1#level_6!436|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_0_1 0))
               (not (>= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0))))
  (or (=> L1_tr1 a!1) |L1#level_6!436|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    |L1#level_5!144|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!1) |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_6!436|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_2_1 0))
               (not (>= L1_0_1 0))
               (<= L1_5_1 0)
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_6!436|))
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      |L1#level_6!436|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!2) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_7!439|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (or (not (<= L1_0_1 0))
               a!1
               (not (>= L1_0_1 0))
               (<= L1_4_1 0)
               (not (>= L1_2_1 0))
               (not (<= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!2) |L1#level_7!439|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0)
    |L1#level_6!436|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L2_tr0 a!1) |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (or (=> L1_tr1 a!1) |L1#level_7!439|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_0_1 0))
               (not (>= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0))))
  (or (=> L1_tr1 a!1) |L1#level_7!439|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    |L1#level_6!436|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L2_tr0 a!1) |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_7!439|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_2_1 0))
               (not (>= L1_0_1 0))
               (<= L1_5_1 0)
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_7!439|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or (not (<= L1_0_n 0))
      a!1
      (not (>= L1_0_n 0))
      (<= L1_4_n 0)
      (not (>= L1_2_n 0))
      (not (<= L1_2_n 0))
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (=> L2_tr0 a!2)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or (not (<= L1_0_0 0))
               a!1
               (not (>= L1_0_0 0))
               (<= L1_4_0 0)
               (not (>= L1_2_0 0))
               (not (<= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (=> L1_tr1 a!2)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (or (not (<= L1_0_1 0))
               a!1
               (not (>= L1_0_1 0))
               (<= L1_4_1 0)
               (not (>= L1_2_1 0))
               (not (<= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (=> L1_tr1 a!2)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_0_n 0))
    (not (>= L1_2_n 0))
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (=> L2_tr0 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_0_0 0))
               (not (>= L1_2_0 0))
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_0_1 0))
               (not (>= L1_2_1 0))
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_5_1 0))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not (<= L1_0_n 0))
    (not (<= L1_2_n 0))
    (not (>= L1_2_n 0))
    (not (>= L1_0_n 0))
    (<= L1_5_n 0)
    (= (+ L1_3_n (* (- 1) L1_1_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (=> L2_tr0 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_0 0))
               (not (<= L1_2_0 0))
               (not (>= L1_2_0 0))
               (not (>= L1_0_0 0))
               (<= L1_5_0 0)
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not (<= L1_0_1 0))
               (not (<= L1_2_1 0))
               (not (>= L1_2_1 0))
               (not (>= L1_0_1 0))
               (<= L1_5_1 0)
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 5 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 5 depth: 5
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  false)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  2455)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 2))
(define-fun L2_1_3 () Int
  9530)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!859))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!863))
(define-fun query!0_0_n () Int
  (- 1))
(define-fun L2_3_3 () Int
  867)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  (- 3))
(define-fun L2_1_2 () Int
  2455)
(define-fun query!0_3_n () Int
  867)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!862))
(define-fun L2_3_1 () Int
  867)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  (- 3))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun L2_0_2 () Int
  (- 2))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!861))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!857))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  9531)
(define-fun |query!0#level_4!80| () Bool
  true)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun |query!0#level_7!853| () Bool
  false)
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!858))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  false)
(define-fun query!0_4_n () Int
  (- 2))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  2455)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!860))
(define-fun L2_0_0 () Int
  (- 1))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!865))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!856))
(define-fun L2_2_0 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!864))
(define-fun L2_3_2 () Int
  9531)
(define-fun L2_2_1 () Int
  (- 3))
(define-fun L2_4_0 () Int
  0)
(define-fun L2_1_0 () Int
  9530)
(define-fun k!863 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 867
    867))
(define-fun k!860 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 867
  (ite (= x!0 (- 1)) 9531
    867)))
(define-fun k!857 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 9530
  (ite (= x!0 (- 2)) 2455
    9530)))
(define-fun k!865 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 9531
    9531))
(define-fun k!862 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 2455
    2455))
(define-fun k!859 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 9531
    9531))
(define-fun k!856 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 9530
    9530))
(define-fun k!864 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 2455
    2455))
(define-fun k!861 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 867
    867))
(define-fun k!858 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 9530
    9530))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_5_3 L2_0_2))
       (not (<= L2_5_3 L2_2_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 5
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!612_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L2_4_0 () Int
  2)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun L2_1_0 () Int
  973)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!881))
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  973)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!879))
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!880))
(define-fun L2_3_0 () Int
  974)
(define-fun L2_4_n () Int
  2)
(define-fun spacer_proxy!24 () Bool
  false)
(define-fun L1_ext!612_0 () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!883))
(define-fun L2_5_n () Int
  0)
(define-fun L2_0_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!878))
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun L2_3_n () Int
  974)
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!882))
(define-fun L2_2_0 () Int
  0)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun L2_tr1 () Bool
  true)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!879 ((x!0 Int)) Int
  (ite (= x!0 0) 973
    973))
(define-fun k!883 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!880 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!881 ((x!0 Int)) Int
  (ite (= x!0 0) 974
    974))
(define-fun k!878 ((x!0 Int)) Int
  (ite (= x!0 0) 973
    973))
(define-fun k!882 ((x!0 Int)) Int
  (ite (= x!0 0) 973
    973))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0))))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 5
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun L1_4_0 () Int
  2)
(define-fun L1_0_0 () Int
  1)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  973)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  1)
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_4_n () Int
  2)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!890))
(define-fun spacer_proxy!24 () Bool
  true)
(define-fun L1_ext!612_0 () Bool
  true)
(define-fun L1_1_0 () Int
  973)
(define-fun L1_5_0 () Int
  2)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!893))
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!892))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  974)
(define-fun L2_0_n () Int
  1)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  true)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  true)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!891))
(define-fun L2_3_n () Int
  974)
(define-fun spacer_proxy!21 () Bool
  true)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_2_n () Int
  1)
(define-fun spacer_proxy!23 () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun L2_tr0 () Bool
  true)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun k!891 ((x!0 Int)) Int
  (ite (= x!0 1) 973
    973))
(define-fun k!892 ((x!0 Int)) Int
  (ite (= x!0 1) 974
    974))
(define-fun k!893 ((x!0 Int)) Int
  (ite (= x!0 1) 974
    974))
(define-fun k!890 ((x!0 Int)) Int
  (ite (= x!0 1) 973
    973))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and (<= L2_4_n L1_5_0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (= L1_2_0 1) (<= L1_4_0 L1_5_0) (= L1_0_0 1) a!1 (not (<= L1_4_0 1))))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 2 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 2 depth: 5
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L1_ext!612_1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L1_tr0:
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
L1_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 00
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L1_0_1 () Int
  1)
(define-fun spacer_proxy!2 () Bool
  false)
(define-fun L1_ext!612_1 () Bool
  true)
(define-fun L1_0_0 () Int
  1)
(define-fun aux!30_n () (Array Int Int)
  (_ as-array k!905))
(define-fun |L1#level_0!37| () Bool
  true)
(define-fun |L1#level_2!113| () Bool
  false)
(define-fun aux!34_n () (Array Int Int)
  (_ as-array k!901))
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun |L1#level_7!439| () Bool
  false)
(define-fun L1_ext0_n () Bool
  false)
(define-fun aux!29_n () (Array Int Int)
  (_ as-array k!900))
(define-fun L1_3_0 () Int
  1593)
(define-fun L1_ext!612_n () Bool
  false)
(define-fun L1_3_1 () Int
  1595)
(define-fun L1_4_1 () Int
  3)
(define-fun spacer_proxy!42 () Bool
  true)
(define-fun spacer_proxy!5 () Bool
  false)
(define-fun aux!36_n () (Array Int Int)
  (_ as-array k!902))
(define-fun L1_0_n () Int
  1)
(define-fun L1_4_0 () Int
  3)
(define-fun spacer_proxy!40 () Bool
  true)
(define-fun aux!31_n () (Array Int Int)
  (_ as-array k!899))
(define-fun L1_2_n () Int
  1)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L1_tr1 () Bool
  true)
(define-fun |L1#level_1!112| () Bool
  true)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun L1_2_0 () Int
  2)
(define-fun |L1#reach_case_0_1| () Bool
  true)
(define-fun |L1#level_3!130| () Bool
  false)
(define-fun spacer_proxy!41 () Bool
  true)
(define-fun L1_ext!612_0 () Bool
  true)
(define-fun L1_5_0 () Int
  2)
(define-fun |L1#level_8!855| () Bool
  false)
(define-fun L1_1_0 () Int
  1594)
(define-fun spacer_proxy!52 () Bool
  false)
(define-fun spacer_proxy!9 () Bool
  false)
(define-fun L1_5_1 () Int
  2)
(define-fun spacer_proxy!39 () Bool
  true)
(define-fun spacer_proxy!18 () Bool
  false)
(define-fun spacer_proxy!49 () Bool
  false)
(define-fun L1_2_1 () Int
  1)
(define-fun aux!35_n () (Array Int Int)
  (_ as-array k!903))
(define-fun L1_5_n () Int
  3)
(define-fun |L1#level_5!144| () Bool
  false)
(define-fun spacer_proxy!60 () Bool
  false)
(define-fun L1_1_n () Int
  1594)
(define-fun |L1#level_4!141| () Bool
  false)
(define-fun spacer_proxy!43 () Bool
  true)
(define-fun L1_4_n () Int
  3)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun |L1#level_6!436| () Bool
  false)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun spacer_proxy!56 () Bool
  false)
(define-fun L1_3_n () Int
  1595)
(define-fun L1_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!33_n () (Array Int Int)
  (_ as-array k!904))
(define-fun L1_1_1 () Int
  1594)
(define-fun aux!32_n () (Array Int Int)
  (_ as-array k!898))
(define-fun k!903 ((x!0 Int)) Int
  (ite (= x!0 1) 1595
    1595))
(define-fun k!900 ((x!0 Int)) Int
  (ite (= x!0 1) 1594
    1594))
(define-fun k!905 ((x!0 Int)) Int
  (ite (= x!0 1) 1595
    1595))
(define-fun k!902 ((x!0 Int)) Int
  (ite (= x!0 1) 1594
    1594))
(define-fun k!899 ((x!0 Int)) Int
  (ite (= x!0 1) 1594
    1594))
(define-fun k!904 ((x!0 Int)) Int
  (ite (= x!0 2) 1593
    1593))
(define-fun k!901 ((x!0 Int)) Int
  (ite (= x!0 1) 1594
    1594))
(define-fun k!898 ((x!0 Int)) Int
  (ite (= x!0 2) 1593
  (ite (= x!0 1) 1595
    1593)))

Transition:
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))))
Phi:
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!2 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (not (<= L1_4_n L1_2_0))
       (not (<= L1_4_n 1))
       (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!2
       (= L1_2_n 1)
       (= L1_0_n 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L1_1_1 (* (- 1) L1_3_1))))))
  (and (not (<= L1_2_0 1))
       (not (= L1_2_0 1))
       (not (<= L1_4_1 L1_2_0))
       (not (<= L1_4_1 1))
       (= L1_0_0 1)
       (= L1_4_0 L1_4_1)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 1)
       (= L1_2_1 1)
       (= L1_5_1 L1_2_0)
       (= (+ (* (- 1) L1_1_1) L1_1_0) 0)
       (<= (+ L1_4_1 (* (- 1) L1_2_0)) 1)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (not (<= L1_2_n 1))
       (not (= L1_2_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 5
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (not (<= L1_2_n 1))
       (not (= L1_2_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L1_ext!612_1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (unit-resolution (asserted (or (not spacer_proxy!43) (>= L1_0_n 1)))
                            (asserted spacer_proxy!43)
                            (>= L1_0_n 1)))
      (a!2 (unit-resolution (asserted (or (not spacer_proxy!42) (<= L1_0_n 1)))
                            (asserted spacer_proxy!42)
                            (<= L1_0_n 1)))
      (a!3 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!5 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                (= L1_5_n (+ 1 L1_0_n))
                (= 1 L1_5_n)
                (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!6 (= (<= L1_2_n (+ (- 1) L1_5_n))
              (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!7 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!9 (= (= L1_5_n (+ 1 L1_0_n)) (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!10 (= (<= L1_4_n (+ (- 1) L1_5_n))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!11 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!18 (ite (= L1_0_n L1_2_0)
                 (select aux!32_n L1_2_0)
                 (select aux!31_n L1_0_n)))
      (a!19 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!22 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               (select aux!29_n L1_0_n)))
      (a!26 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!27 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!28 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!37 (asserted (or (not spacer_proxy!93) (not (<= L1_2_n 1)))))
      (a!38 (or (not spacer_proxy!53) (>= (+ L1_5_n (* (- 1) L1_2_n)) 0)))
      (a!39 (rewrite (= (+ L1_5_n (* (- 1) L1_2_n)) (+ (* (- 1) L1_2_n) L1_5_n))))
      (a!40 (= (>= (+ L1_5_n (* (- 1) L1_2_n)) 0)
               (>= (+ (* (- 1) L1_2_n) L1_5_n) 0)))
      (a!41 (or (not spacer_proxy!53) (>= (+ (* (- 1) L1_2_n) L1_5_n) 0)))
      (a!42 (= (>= (+ (* (- 1) L1_2_n) L1_5_n) 0)
               (<= (+ L1_2_n (* (- 1) L1_5_n)) 0)))
      (a!43 (or (not spacer_proxy!53) (<= (+ L1_2_n (* (- 1) L1_5_n)) 0)))
      (a!47 (asserted (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!48 (rewrite (= (=> L1_tr1 (<= L1_5_1 0))
                        (or (not L1_tr1) (<= L1_5_1 0)))))
      (a!49 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)))
      (a!50 (= (or (or (not L1_tr1) (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!51 (= (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_1 0) |L1#level_1!112|)))
      (a!53 (not (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!56 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!57 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!60 (or (not spacer_proxy!56) (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)))
      (a!61 (rewrite (= (+ L1_4_n (* (- 1) L1_2_n)) (+ (* (- 1) L1_2_n) L1_4_n))))
      (a!62 (= (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
               (<= (+ (* (- 1) L1_2_n) L1_4_n) 1)))
      (a!63 (or (not spacer_proxy!56) (<= (+ (* (- 1) L1_2_n) L1_4_n) 1)))
      (a!64 (= (<= (+ (* (- 1) L1_2_n) L1_4_n) 1)
               (>= (+ L1_2_n (* (- 1) L1_4_n)) (- 1))))
      (a!65 (or (not spacer_proxy!56) (>= (+ L1_2_n (* (- 1) L1_4_n)) (- 1))))
      (a!68 (asserted (or (not spacer_proxy!39) (not (<= L1_4_n 1))))))
(let ((a!4 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
               a!3
               (not (= L1_5_n 1))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!8 (= (not (<= L1_2_n (+ (- 1) L1_5_n))) a!7))
      (a!12 (= (not (<= L1_4_n (+ (- 1) L1_5_n))) a!11))
      (a!13 (and a!7 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)) (= L1_5_n 1) a!11))
      (a!20 (or (not (= L1_0_0 L1_0_n))
                (not (= L1_4_0 L1_4_n))
                (not (= L1_5_0 L1_2_0))
                (not (= L1_0_1 L1_0_n))
                (not (= L1_2_1 L1_2_n))
                (not (= L1_4_1 L1_4_n))
                (not (= L1_5_1 L1_2_0))
                (not (= a!18 (select aux!29_n L1_0_n)))
                (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
                (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
                (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
                (not (= L1_3_1 (select aux!35_n L1_2_n)))
                (not (= L1_1_1 (select aux!36_n L1_0_n)))
                (not (= L1_3_0 (select aux!33_n L1_2_0)))
                a!19
                (not (= L1_1_n (select aux!29_n L1_0_n)))
                (not (= L1_1_0 (select aux!34_n L1_0_n)))
                (not (= L1_3_n (select aux!30_n L1_2_n)))
                (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!23 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 a!22
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= L1_5_n (+ 1 L1_2_0))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 (not (<= L1_4_n L1_2_0))))
      (a!24 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               a!18))
      (a!29 (monotonicity (rewrite a!27) (= (not (<= L1_4_n L1_2_0)) a!28)))
      (a!30 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!18 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!28))
      (a!44 (mp (asserted a!38)
                (trans (monotonicity (monotonicity a!39 a!40) (= a!38 a!41))
                       (monotonicity (rewrite a!42) (= a!41 a!43))
                       (= a!38 a!43))
                a!43))
      (a!52 (unit-resolution (mp a!47
                                 (trans (monotonicity a!48 a!49)
                                        (rewrite a!50)
                                        a!51)
                                 (or (not L1_tr1)
                                     (<= L1_5_1 0)
                                     |L1#level_1!112|))
                             (hypothesis L1_tr1)
                             (asserted (not |L1#level_1!112|))
                             (<= L1_5_1 0)))
      (a!58 (monotonicity (rewrite (= a!56 (not a!57)))
                          (= (or (not L1_tr0) a!56)
                             (or (not L1_tr0) (not a!57)))))
      (a!66 (mp (asserted a!60)
                (trans (monotonicity (monotonicity a!61 a!62) (= a!60 a!63))
                       (monotonicity (rewrite a!64) (= a!63 a!65))
                       (= a!60 a!65))
                a!65)))
(let ((a!14 (monotonicity (monotonicity (rewrite a!6) a!8)
                          (rewrite a!9)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!10) a!12)
                          (= a!5 a!13)))
      (a!17 (monotonicity (rewrite (= a!13 (not a!4)))
                          (= (or (not L1_ext0_n) a!13 L1_ext!612_n)
                             (or (not L1_ext0_n) (not a!4) L1_ext!612_n))))
      (a!21 (or a!20 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!25 (monotonicity (rewrite a!24)
                          (= a!22 (= a!18 (select aux!29_n L1_0_n)))))
      (a!33 (monotonicity (rewrite (= a!30 (not a!20)))
                          (= (or (not L1_tr1) a!30)
                             (or (not L1_tr1) (not a!20)))))
      (a!45 (unit-resolution a!44
                             (asserted spacer_proxy!53)
                             (<= (+ L1_2_n (* (- 1) L1_5_n)) 0)))
      (a!59 (mp (asserted (or (not L1_tr0) a!56))
                a!58
                (or (not L1_tr0) (not a!57))))
      (a!67 (unit-resolution a!66
                             (asserted spacer_proxy!56)
                             (>= (+ L1_2_n (* (- 1) L1_4_n)) (- 1))))
      (a!74 (or a!4 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
(let ((a!15 (monotonicity a!14
                          (= (or (not L1_ext0_n) a!5 L1_ext!612_n)
                             (or (not L1_ext0_n) a!13 L1_ext!612_n))))
      (a!31 (monotonicity (monotonicity a!25 (rewrite a!26) a!29 (= a!23 a!30))
                          (= (or (not L1_tr1) a!23) (or (not L1_tr1) a!30))))
      (a!69 (th-lemma a!67
                      (unit-resolution a!68
                                       (asserted spacer_proxy!39)
                                       (not (<= L1_4_n 1)))
                      (not (<= L1_2_n 0)))))
(let ((a!16 (mp (asserted (or (not L1_ext0_n) a!5 L1_ext!612_n))
                a!15
                (or (not L1_ext0_n) a!13 L1_ext!612_n)))
      (a!32 (mp (asserted (or (not L1_tr1) a!23)) a!31 (or (not L1_tr1) a!30)))
      (a!70 (th-lemma (hypothesis (= L1_5_n 0))
                      (th-lemma a!69 a!45 (not (<= L1_5_n 0)))
                      false)))
(let ((a!34 (unit-resolution (mp a!32 a!33 (or (not L1_tr1) (not a!20)))
                             (hypothesis L1_tr1)
                             (not a!20)))
      (a!71 (unit-resolution (def-axiom (or a!57 (= L1_5_n 0)))
                             (lemma a!70 (not (= L1_5_n 0)))
                             a!57)))
(let ((a!35 (unit-resolution (def-axiom a!21)
                             a!34
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!54 (unit-resolution (def-axiom (or a!20 (= L1_5_1 L1_2_0)))
                             a!34
                             (= L1_5_1 L1_2_0))))
(let ((a!36 (th-lemma a!35 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1)))))
(let ((a!46 (th-lemma a!36
                      (unit-resolution a!37
                                       (asserted spacer_proxy!93)
                                       (not (<= L1_2_n 1)))
                      a!45
                      (not (<= L1_2_0 0)))))
(let ((a!55 (lemma (th-lemma (th-lemma a!46 a!52 a!53)
                             (symm a!54 (= L1_2_0 L1_5_1))
                             false)
                   (not L1_tr1))))
(let ((a!72 (unit-resolution (mp a!16
                                 a!17
                                 (or (not L1_ext0_n) (not a!4) L1_ext!612_n))
                             (unit-resolution (asserted (or L1_ext0_n
                                                            L1_tr0
                                                            L1_tr1))
                                              a!55
                                              (unit-resolution a!59
                                                               a!71
                                                               (not L1_tr0))
                                              L1_ext0_n)
                             (asserted (not L1_ext!612_n))
                             (not a!4))))
(let ((a!73 (unit-resolution (def-axiom (or a!4 (= L1_5_n 1)))
                             a!72
                             (= L1_5_n 1)))
      (a!75 (unit-resolution (def-axiom a!74)
                             a!72
                             (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
(let ((a!76 (th-lemma a!75 (<= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
(let ((a!77 (th-lemma (th-lemma (th-lemma a!73 (<= L1_5_n 1))
                                a!76
                                (<= L1_0_n 0))
                      (th-lemma a!1 (>= L1_0_n 0))
                      (= L1_0_n 0))))
(let ((a!78 (trans (symm (th-lemma a!1 a!2 (= L1_0_n 1)) (= 1 L1_0_n))
                   a!77
                   (= 1 0))))
  (mp a!78 (rewrite (= (= 1 0) false)) false))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(= 1 L1_0_n)
(not (<= L1_5_n 0))
(not (<= L1_2_n 1))
(<= (+ L1_2_n (* (- 1) L1_5_n)) 0)
(>= L1_0_n 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(= 1 L1_0_n)
(not (<= L1_5_n 0))
(not (<= L1_2_n 1))
(<= (+ L1_2_n (* (- 1) L1_5_n)) 0)
(>= L1_0_n 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(= 1 L1_0_n)
(not (<= L1_5_n 0))
(not (<= L1_2_n 1))
(<= (+ L1_2_n (* (- 1) L1_5_n)) 0)
(>= L1_0_n 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 5 new size: 2
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) 0))))
  (or a!1 (<= L1_2_n 1)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 L1 (let ((a!1 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) 0))))
  (or a!1 (<= L1_2_n 1)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 L1 (let ((a!1 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) 0))))
  (or a!1 (<= L1_2_n 1)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) 0))))
  (or a!1 (<= L1_2_n 1) |L1#level_1!112|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0))))
  (or (=> L2_tr0 (or a!1 (<= L1_2_0 1))) |L2#level_2!63|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0))))
  (or (=> L1_tr1 (or a!1 (<= L1_2_0 1))) |L1#level_2!113|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_2_1 (* (- 1) L1_5_1)) 0))))
  (or (=> L1_tr1 (or a!1 (<= L1_2_1 1))) |L1#level_2!113|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 2 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 2 depth: 5
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L1_ext!612_1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!3 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!5 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!7 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!11 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!12 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!13 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!19 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!20 (= (<= L1_2_n (+ (- 1) L1_5_n))
               (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!21 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!23 (= (= L1_5_n (+ 1 L1_0_n)) (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!24 (= (<= L1_4_n (+ (- 1) L1_5_n))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!25 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!31 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!34 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!36 (asserted (or (not spacer_proxy!39) (not (<= L1_4_n 1)))))
      (a!40 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!41 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!52 (unit-resolution (asserted (or (not spacer_proxy!43) (>= L1_0_n 1)))
                             (asserted spacer_proxy!43)
                             (>= L1_0_n 1)))
      (a!53 (not (>= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!56 (not (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!64 (not (<= (+ L1_0_1 (* (- 1) L1_5_1)) (- 1))))
      (a!66 (unit-resolution (asserted (or (not spacer_proxy!42) (<= L1_0_n 1)))
                             (asserted spacer_proxy!42)
                             (<= L1_0_n 1)))
      (a!74 (unit-resolution (asserted (or (not spacer_proxy!40) (<= L1_2_n 1)))
                             (asserted spacer_proxy!40)
                             (<= L1_2_n 1)))
      (a!75 (unit-resolution (asserted (or (not spacer_proxy!41) (>= L1_2_n 1)))
                             (asserted spacer_proxy!41)
                             (>= L1_2_n 1))))
(let ((a!2 (def-axiom (or (not (= L1_0_n L1_2_0))
                          (= (select aux!32_n L1_2_0) a!1))))
      (a!4 (unit-resolution (asserted (or (not spacer_proxy!0) a!3))
                            (asserted spacer_proxy!0)
                            a!3))
      (a!6 (or (not (= L1_0_0 L1_0_n))
               (not (= L1_4_0 L1_4_n))
               (not (= L1_5_0 L1_2_0))
               (not (= L1_0_1 L1_0_n))
               (not (= L1_2_1 L1_2_n))
               (not (= L1_4_1 L1_4_n))
               (not (= L1_5_1 L1_2_0))
               (not (= a!1 (select aux!29_n L1_0_n)))
               (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
               (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
               (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
               (not (= L1_3_1 (select aux!35_n L1_2_n)))
               (not (= L1_1_1 (select aux!36_n L1_0_n)))
               (not (= L1_3_0 (select aux!33_n L1_2_0)))
               a!5
               (not (= L1_1_n (select aux!29_n L1_0_n)))
               (not (= L1_1_0 (select aux!34_n L1_0_n)))
               (not (= L1_3_n (select aux!30_n L1_2_n)))
               (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!8 (and (= L1_0_0 L1_0_n)
                (= L1_4_0 L1_4_n)
                (= L1_5_0 L1_2_0)
                (= L1_0_1 L1_0_n)
                (= L1_2_1 L1_2_n)
                (= L1_4_1 L1_4_n)
                (= L1_5_1 L1_2_0)
                a!7
                (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                (= L1_3_1 (select aux!35_n L1_2_n))
                (= L1_1_1 (select aux!36_n L1_0_n))
                (= L1_3_0 (select aux!33_n L1_2_0))
                (= L1_5_n (+ 1 L1_2_0))
                (= L1_1_n (select aux!29_n L1_0_n))
                (= L1_1_0 (select aux!34_n L1_0_n))
                (= L1_3_n (select aux!30_n L1_2_n))
                (not (<= L1_4_n L1_2_0))))
      (a!9 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              a!1))
      (a!14 (monotonicity (rewrite a!12) (= (not (<= L1_4_n L1_2_0)) a!13)))
      (a!15 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!1 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!13))
      (a!22 (= (not (<= L1_2_n (+ (- 1) L1_5_n))) a!21))
      (a!26 (= (not (<= L1_4_n (+ (- 1) L1_5_n))) a!25))
      (a!27 (and a!21 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)) (= L1_5_n 1) a!25))
      (a!32 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!31
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!35 (unit-resolution (asserted a!34)
                             (asserted spacer_proxy!1)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!42 (monotonicity (rewrite (= a!40 (not a!41)))
                          (= (or (not L1_tr0) a!40)
                             (or (not L1_tr0) (not a!41)))))
      (a!44 (th-lemma (unit-resolution a!36
                                       (asserted spacer_proxy!39)
                                       (not (<= L1_4_n 1)))
                      (not (<= L1_4_n 0))))
      (a!57 (or (=> L1_tr1 (or a!56 (<= L1_2_0 1))) |L1#level_2!113|))
      (a!58 (= (=> L1_tr1 (or a!56 (<= L1_2_0 1)))
               (or (not L1_tr1) (or a!56 (<= L1_2_0 1)))))
      (a!59 (or (or (not L1_tr1) (or a!56 (<= L1_2_0 1))) |L1#level_2!113|))
      (a!87 (= (not (= L1_3_n L1_1_n)) (not (= (select aux!32_n L1_2_0) a!1)))))
(let ((a!10 (monotonicity (rewrite a!9)
                          (= a!7 (= a!1 (select aux!29_n L1_0_n)))))
      (a!18 (monotonicity (rewrite (= a!15 (not a!6)))
                          (= (or (not L1_tr1) a!15) (or (not L1_tr1) (not a!6)))))
      (a!28 (monotonicity (monotonicity (rewrite a!20) a!22)
                          (rewrite a!23)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!24) a!26)
                          (= a!19 a!27)))
      (a!33 (monotonicity (rewrite (= a!27 (not a!32)))
                          (= (or (not L1_ext0_n) a!27 L1_ext!612_n)
                             (or (not L1_ext0_n) (not a!32) L1_ext!612_n))))
      (a!37 (th-lemma a!35
                      (unit-resolution a!36
                                       (asserted spacer_proxy!39)
                                       (not (<= L1_4_n 1)))
                      (not (<= L1_5_n 1))))
      (a!43 (mp (asserted (or (not L1_tr0) a!40))
                a!42
                (or (not L1_tr0) (not a!41))))
      (a!45 (th-lemma (hypothesis (= L1_5_n 0))
                      (th-lemma a!35 a!44 (not (<= L1_5_n 0)))
                      false))
      (a!60 (rewrite (= a!59
                        (or (not L1_tr1) a!56 (<= L1_2_0 1) |L1#level_2!113|))))
      (a!69 (or a!6 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!77 (def-axiom (or a!6
                           (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))))
      (a!79 (def-axiom (or a!6 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!81 (def-axiom (or a!6 (= a!1 (select aux!29_n L1_0_n)))))
      (a!82 (def-axiom (or a!6 (= L1_1_n (select aux!29_n L1_0_n))))))
(let ((a!16 (monotonicity (monotonicity a!10 (rewrite a!11) a!14 (= a!8 a!15))
                          (= (or (not L1_tr1) a!8) (or (not L1_tr1) a!15))))
      (a!29 (monotonicity a!28
                          (= (or (not L1_ext0_n) a!19 L1_ext!612_n)
                             (or (not L1_ext0_n) a!27 L1_ext!612_n))))
      (a!38 (unit-resolution (def-axiom (or a!32 (= L1_5_n 1)))
                             (th-lemma a!37 (not (= L1_5_n 1)))
                             a!32))
      (a!46 (unit-resolution (def-axiom (or a!41 (= L1_5_n 0)))
                             (lemma a!45 (not (= L1_5_n 0)))
                             a!41))
      (a!61 (trans (monotonicity (rewrite a!58) (= a!57 a!59))
                   a!60
                   (= a!57
                      (or (not L1_tr1) a!56 (<= L1_2_0 1) |L1#level_2!113|)))))
(let ((a!17 (mp (asserted (or (not L1_tr1) a!8)) a!16 (or (not L1_tr1) a!15)))
      (a!30 (mp (asserted (or (not L1_ext0_n) a!19 L1_ext!612_n))
                a!29
                (or (not L1_ext0_n) a!27 L1_ext!612_n))))
(let ((a!39 (unit-resolution (mp a!30
                                 a!33
                                 (or (not L1_ext0_n) (not a!32) L1_ext!612_n))
                             a!38
                             (asserted (not L1_ext!612_n))
                             (not L1_ext0_n))))
(let ((a!47 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             a!39
                             (unit-resolution a!43 a!46 (not L1_tr0))
                             L1_tr1)))
(let ((a!48 (unit-resolution (mp a!17 a!18 (or (not L1_tr1) (not a!6)))
                             a!47
                             (not a!6))))
(let ((a!49 (unit-resolution (def-axiom (or a!6 (= L1_5_0 L1_2_0)))
                             a!48
                             (= L1_5_0 L1_2_0)))
      (a!50 (unit-resolution (def-axiom (or a!6 (= L1_0_1 L1_0_n)))
                             a!48
                             (= L1_0_1 L1_0_n)))
      (a!54 (unit-resolution (def-axiom (or a!6 (= L1_5_1 L1_2_0)))
                             a!48
                             (= L1_5_1 L1_2_0)))
      (a!70 (unit-resolution (def-axiom a!69)
                             a!48
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!80 (symm (unit-resolution a!79
                                   a!48
                                   (= L1_3_n (select aux!30_n L1_2_n)))
                  (= (select aux!30_n L1_2_n) L1_3_n)))
      (a!83 (symm (unit-resolution a!82
                                   a!48
                                   (= L1_1_n (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) L1_1_n))))
(let ((a!51 (th-lemma (symm a!50 (= L1_0_n L1_0_1))
                      (<= (+ L1_0_n (* (- 1) L1_0_1)) 0)))
      (a!55 (lemma (th-lemma (hypothesis a!53)
                             (symm a!54 (= L1_2_0 L1_5_1))
                             false)
                   (>= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!62 (th-lemma (symm a!49 (= L1_2_0 L1_5_0))
                      (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!65 (th-lemma (symm a!49 (= L1_2_0 L1_5_0))
                      (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!67 (th-lemma (symm a!50 (= L1_0_n L1_0_1))
                      (>= (+ L1_0_n (* (- 1) L1_0_1)) 0)))
      (a!68 (th-lemma (symm a!54 (= L1_2_0 L1_5_1))
                      (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!71 (th-lemma a!70 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!84 (trans (unit-resolution a!81 a!48 (= a!1 (select aux!29_n L1_0_n)))
                   a!83
                   (= a!1 L1_1_n)))
      (a!89 (monotonicity (trans a!49
                                 (symm a!54 (= L1_2_0 L1_5_1))
                                 (= L1_5_0 L1_5_1))
                          (= (= L1_5_0 1) (= L1_5_1 1))))
      (a!90 (trans (monotonicity (th-lemma a!52 a!66 (= L1_0_n 1))
                                 (symm a!54 (= L1_2_0 L1_5_1))
                                 (= (= L1_0_n L1_2_0) (= 1 L1_5_1)))
                   (commutativity (= (= 1 L1_5_1) (= L1_5_1 1)))
                   (= (= L1_0_n L1_2_0) (= L1_5_1 1)))))
(let ((a!63 (unit-resolution (mp (asserted a!57)
                                 a!61
                                 (or (not L1_tr1)
                                     a!56
                                     (<= L1_2_0 1)
                                     |L1#level_2!113|))
                             a!62
                             (asserted (not |L1#level_2!113|))
                             a!47
                             (<= L1_2_0 1)))
      (a!72 (th-lemma a!71
                      (unit-resolution a!36
                                       (asserted spacer_proxy!39)
                                       (not (<= L1_4_n 1)))
                      a!35
                      (not (<= L1_2_0 0))))
      (a!91 (trans a!89
                   (symm a!90 (= (= L1_5_1 1) (= L1_0_n L1_2_0)))
                   (= (= L1_5_0 1) (= L1_0_n L1_2_0)))))
(let ((a!73 (th-lemma (th-lemma (th-lemma a!51 a!52 a!55 a!63 a!64)
                                a!65
                                a!66
                                a!67
                                a!68
                                (<= L1_5_0 1))
                      (th-lemma a!62 a!72 (>= L1_5_0 1))
                      (= L1_5_0 1))))
(let ((a!76 (trans (trans (symm a!49 (= L1_2_0 L1_5_0)) a!73 (= L1_2_0 1))
                   (symm (th-lemma a!74 a!75 (= L1_2_n 1)) (= 1 L1_2_n))
                   (= L1_2_0 L1_2_n))))
(let ((a!78 (trans (monotonicity a!76
                                 (= (select aux!32_n L1_2_0)
                                    (select aux!32_n L1_2_n)))
                   (unit-resolution a!77
                                    a!48
                                    (= (select aux!32_n L1_2_n)
                                       (select aux!30_n L1_2_n)))
                   (= (select aux!32_n L1_2_0) (select aux!30_n L1_2_n)))))
(let ((a!85 (monotonicity (trans a!78 a!80 (= (select aux!32_n L1_2_0) L1_3_n))
                          a!84
                          (= (= (select aux!32_n L1_2_0) a!1) (= L1_3_n L1_1_n)))))
(let ((a!86 (symm a!85 (= (= L1_3_n L1_1_n) (= (select aux!32_n L1_2_0) a!1)))))
(let ((a!88 (mp (th-lemma a!4 (not (= L1_3_n L1_1_n)))
                (monotonicity a!86 a!87)
                (not (= (select aux!32_n L1_2_0) a!1)))))
  (unit-resolution a!2 a!88 (mp a!73 a!91 (= L1_0_n L1_2_0)) false))))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (= L1_3_n L1_1_n))
(not (<= L1_5_n 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(= L1_0_n 1)
(not (<= L1_4_n 1))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(>= L1_0_n 1)
(<= L1_0_n 1)
(= 1 L1_2_n)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (= L1_3_n L1_1_n))
(not (<= L1_5_n 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(= L1_0_n 1)
(not (<= L1_4_n 1))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(>= L1_0_n 1)
(<= L1_0_n 1)
(= 1 L1_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= L1_3_n L1_1_n))
(not (<= L1_5_n 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(= L1_0_n 1)
(not (<= L1_4_n 1))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(>= L1_0_n 1)
(<= L1_0_n 1)
(= 1 L1_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 9 new size: 7
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1
      (= L1_3_n L1_1_n)
      (not (>= L1_0_n 1))
      (not (<= L1_0_n 1))
      (<= L1_4_n 1)
      (not (<= 1 L1_2_n))
      (not (>= 1 L1_2_n))))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_0_n 0)
      (not (<= L1_0_n 1))
      (<= L1_4_n 1)
      (<= L1_2_n 0)
      (not (<= L1_2_n 1))))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_0_n 0)
      (not (<= L1_0_n 1))
      (<= L1_4_n 1)
      (<= L1_2_n 0)
      (not (<= L1_2_n 1))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_0_n 0)
      (not (<= L1_0_n 1))
      (<= L1_4_n 1)
      (<= L1_2_n 0)
      (not (<= L1_2_n 1))
      |L1#level_2!113|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or a!1
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_4_0 1)
               (<= L1_2_0 0)
               (not (<= L1_2_0 1)))))
  (or (=> L2_tr0 a!2) |L2#level_3!79|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or a!1
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_4_0 1)
               (<= L1_2_0 0)
               (not (<= L1_2_0 1)))))
  (or (=> L1_tr1 a!2) |L1#level_3!130|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (or a!1
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_0_1 0)
               (not (<= L1_0_1 1))
               (<= L1_4_1 1)
               (<= L1_2_1 0)
               (not (<= L1_2_1 1)))))
  (or (=> L1_tr1 a!2) |L1#level_3!130|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 5
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!3 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!4 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!9 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
              (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!18 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!20 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!21 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!22 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!26 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!27 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!28 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1) |L2#level_3!79|))
      (a!31 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!34 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!35 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!36 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!37 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!46 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!48 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!55 (or (not spacer_proxy!21) (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!60 (or (not spacer_proxy!24) (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!62 (or (not spacer_proxy!22) (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!65 (or (not spacer_proxy!25) (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!75 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!76 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!77 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!78 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!80 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!81 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!92 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!93 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
(let ((a!2 (or a!1
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_4_0 1)
               (<= L1_2_0 0)
               (not (<= L1_2_0 1))))
      (a!5 (or a!1
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_4_0 1)
               (<= L1_2_0 0)
               (not (<= L1_2_0 1))))
      (a!10 (or a!1
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!13 (or (not L2_tr0)
                a!1
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))
                |L2#level_3!79|))
      (a!19 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!18))
      (a!23 (monotonicity (monotonicity (rewrite a!21) (= a!20 a!22))
                          (= (or (not L2_tr0) a!20) (or (not L2_tr0) a!22))))
      (a!29 (trans (monotonicity (rewrite (= a!26 a!27))
                                 (= (or a!26 |L2#level_3!79|)
                                    (or a!27 |L2#level_3!79|)))
                   (rewrite (= (or a!27 |L2#level_3!79|) a!28))
                   (= (or a!26 |L2#level_3!79|) a!28)))
      (a!32 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!31
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!38 (monotonicity (rewrite a!36) (= (not (<= L2_4_n L2_5_0)) a!37)))
      (a!39 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!37))
      (a!47 (unit-resolution (asserted (or (not spacer_proxy!23) a!46))
                             (asserted spacer_proxy!23)
                             a!46))
      (a!56 (unit-resolution (asserted a!55)
                             (asserted spacer_proxy!21)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!61 (unit-resolution (asserted a!60)
                             (asserted spacer_proxy!24)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!63 (unit-resolution (asserted a!62)
                             (asserted spacer_proxy!22)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!66 (unit-resolution (asserted a!65)
                             (asserted spacer_proxy!25)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!79 (monotonicity (monotonicity (monotonicity a!76 a!77) (= a!75 a!78))
                          (= (or (not spacer_proxy!0) a!75)
                             (or (not spacer_proxy!0) a!78))))
      (a!82 (monotonicity (monotonicity (rewrite a!80) (= a!78 a!81))
                          (= (or (not spacer_proxy!0) a!78)
                             (or (not spacer_proxy!0) a!81)))))
(let ((a!6 (rewrite (= (=> L2_tr0 a!5) (or (not L2_tr0) a!5))))
      (a!8 (= (or (=> L2_tr0 a!2) |L2#level_3!79|)
              (or (or (not L2_tr0) a!5) |L2#level_3!79|)))
      (a!11 (monotonicity (monotonicity (rewrite a!9) (= a!5 a!10))
                          (= (or (not L2_tr0) a!5) (or (not L2_tr0) a!10))))
      (a!12 (= (or (or (not L2_tr0) a!5) |L2#level_3!79|)
               (or (or (not L2_tr0) a!10) |L2#level_3!79|)))
      (a!14 (= (or (or (not L2_tr0) a!10) |L2#level_3!79|) a!13))
      (a!15 (= (or (or (not L2_tr0) a!5) |L2#level_3!79|) a!13))
      (a!24 (mp (asserted (or (not L2_tr0) a!20)) a!23 (or (not L2_tr0) a!22)))
      (a!25 (monotonicity (rewrite (= a!22 (not a!19)))
                          (= (or (not L2_tr0) a!22)
                             (or (not L2_tr0) (not a!19)))))
      (a!30 (unit-resolution (mp (asserted (or a!26 |L2#level_3!79|)) a!29 a!28)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_3!79|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!33 (or a!32 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!40 (monotonicity (monotonicity (rewrite a!35) a!38 (= a!34 a!39))
                          (= (or (not L2_tr1) a!34) (or (not L2_tr1) a!39))))
      (a!42 (monotonicity (rewrite (= a!39 (not a!32)))
                          (= (or (not L2_tr1) a!39)
                             (or (not L2_tr1) (not a!32)))))
      (a!64 (th-lemma a!61 a!63 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!68 (def-axiom (or a!19 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!69 (def-axiom (or a!19
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!72 (def-axiom (or a!19 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!83 (trans a!79
                   a!82
                   (= (or (not spacer_proxy!0) a!75)
                      (or (not spacer_proxy!0) a!81))))
      (a!85 (def-axiom (or a!19 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!86 (def-axiom (or a!19
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!89 (def-axiom (or a!19 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!98 (or a!19 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!7 (trans (monotonicity (monotonicity (monotonicity a!3 a!4)
                                              (= a!2 a!5))
                                (= (=> L2_tr0 a!2) (=> L2_tr0 a!5)))
                  a!6
                  (= (=> L2_tr0 a!2) (or (not L2_tr0) a!5))))
      (a!41 (mp (asserted (or (not L2_tr1) a!34)) a!40 (or (not L2_tr1) a!39)))
      (a!84 (mp (asserted (or (not spacer_proxy!0) a!75))
                a!83
                (or (not spacer_proxy!0) a!81))))
(let ((a!16 (trans (monotonicity a!7 a!8)
                   (trans (monotonicity a!11 a!12) (rewrite a!14) a!15)
                   (= (or (=> L2_tr0 a!2) |L2#level_3!79|) a!13)))
      (a!43 (unit-resolution (mp a!41 a!42 (or (not L2_tr1) (not a!32)))
                             (hypothesis L2_tr1)
                             (not a!32))))
(let ((a!17 (mp (asserted (or (=> L2_tr0 a!2) |L2#level_3!79|)) a!16 a!13))
      (a!44 (unit-resolution (def-axiom a!33)
                             a!43
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!49 (unit-resolution (def-axiom (or a!32 (= L2_4_0 L2_4_n)))
                             a!43
                             (= L2_4_0 L2_4_n))))
(let ((a!45 (th-lemma a!44 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!50 (th-lemma a!49 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!51 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!30
                                              a!45
                                              (th-lemma a!47 a!48)
                                              a!50
                                              false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!52 (unit-resolution (mp a!24 a!25 (or (not L2_tr0) (not a!19)))
                             a!51
                             (not a!19))))
(let ((a!53 (unit-resolution (def-axiom (or a!19 (= L1_0_0 L2_0_n)))
                             a!52
                             (= L1_0_0 L2_0_n)))
      (a!57 (unit-resolution (def-axiom (or a!19 (= L2_5_n 0)))
                             a!52
                             (= L2_5_n 0)))
      (a!58 (unit-resolution (def-axiom (or a!19 (= L1_2_0 L2_2_n)))
                             a!52
                             (= L1_2_0 L2_2_n)))
      (a!70 (symm (unit-resolution a!69
                                   a!52
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!73 (symm (unit-resolution a!72
                                   a!52
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!87 (symm (unit-resolution a!86
                                   a!52
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!90 (symm (unit-resolution a!89
                                   a!52
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!95 (unit-resolution (def-axiom (or a!19 (= L1_4_0 L2_4_n)))
                             a!52
                             (= L1_4_0 L2_4_n)))
      (a!99 (unit-resolution (def-axiom a!98)
                             a!52
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!54 (th-lemma (symm a!53 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!59 (th-lemma (symm a!58 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!67 (th-lemma (symm a!58 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!71 (trans (unit-resolution a!68
                                    a!52
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!70
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!88 (trans (unit-resolution a!85
                                    a!52
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!87
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!96 (th-lemma (symm a!95 (= L2_4_n L1_4_0))
                      (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!97 (th-lemma (symm a!95 (= L2_4_n L1_4_0))
                      (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!101 (th-lemma (symm a!53 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!74 (th-lemma (trans a!71 a!73 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!91 (th-lemma (trans a!88 a!90 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!100 (th-lemma a!97 a!99 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!94 (th-lemma (th-lemma a!74
                                (unit-resolution a!84
                                                 (asserted spacer_proxy!0)
                                                 a!81)
                                a!91
                                a!92)
                      a!93)))
  (unit-resolution a!17
                   (th-lemma a!54
                             a!56
                             (th-lemma a!57 (<= L2_5_n 0))
                             (<= L1_0_0 1))
                   (th-lemma a!59
                             a!56
                             a!64
                             (th-lemma a!57 (<= L2_5_n 0))
                             (<= L1_2_0 1))
                   (asserted (not |L2#level_3!79|))
                   a!51
                   (th-lemma (th-lemma a!57 (>= L2_5_n 0))
                             a!66
                             a!67
                             (not (<= L1_2_0 0)))
                   a!94
                   (th-lemma (th-lemma a!57 (>= L2_5_n 0))
                             a!47
                             a!96
                             (not (<= L1_4_0 1)))
                   a!100
                   (th-lemma a!101
                             a!63
                             (th-lemma a!57 (>= L2_5_n 0))
                             (not (<= L1_0_0 0)))
                   false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2
      a!3))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 5
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!3 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= L2_4_n L1_5_0)))
      (a!4 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!5 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!9 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!12 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!13 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!14 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!15 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!25 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!27 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!29 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!32 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!37 (symm (commutativity (= (= L2_2_0 L2_0_0) (= L2_0_0 L2_2_0)))
                  (= (= L2_0_0 L2_2_0) (= L2_2_0 L2_0_0))))
      (a!41 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!42 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!44 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!45 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!46 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!47 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!48 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
               (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!49 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!55 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!56 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!57 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!58 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!67 (hypothesis (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!68 (hypothesis (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!69 (hypothesis (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!70 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!71 (not (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!72 (not (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!77 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!79 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!89 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!90 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!91 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!92 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!94 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!95 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!107 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!114 (or (not (= L1_0_0 0))
                 (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                 (<= L1_5_0 0)
                 (not (= L1_2_0 0))))
      (a!115 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0))
                         (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!116 (= (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!117 (or (not (= L1_0_0 0))
                 (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                 (<= L1_5_0 0)
                 (not (= L1_2_0 0))))
      (a!121 (= (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!122 (or (not (= L1_0_0 0))
                 (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                 (<= L1_5_0 0)
                 (not (= L1_2_0 0))))
      (a!125 (or (not L2_tr0)
                 (not (= L1_0_0 0))
                 (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                 (<= L1_5_0 0)
                 (not (= L1_2_0 0))
                 |L2#level_4!81|)))
(let ((a!2 (or (not (= L2_5_n 0))
               (not (= L1_0_0 L2_0_n))
               (not (= L1_2_0 L2_2_n))
               (not (= L1_4_0 L2_4_n))
               (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
               (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
               (not (= L1_1_0 (select aux!15_n L2_0_n)))
               (not (= L1_3_0 (select aux!14_n L2_2_n)))
               (not (= L2_1_n (select aux!12_n L2_0_n)))
               (not (= L2_3_n (select aux!13_n L2_2_n)))
               a!1))
      (a!6 (monotonicity (monotonicity (rewrite a!4) (= a!3 a!5))
                         (= (or (not L2_tr0) a!3) (or (not L2_tr0) a!5))))
      (a!10 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!9
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!16 (monotonicity (rewrite a!14) (= (not (<= L2_4_n L2_5_0)) a!15)))
      (a!17 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!15))
      (a!26 (unit-resolution (asserted a!25)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!28 (unit-resolution (asserted a!27)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!30 (unit-resolution (asserted a!29)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!33 (unit-resolution (asserted a!32)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!43 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!41
                a!42))
      (a!50 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!46
                a!49))
      (a!59 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!56
                a!58))
      (a!62 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!56
                a!58
                |L2#level_4!81|))
      (a!78 (unit-resolution (asserted (or (not spacer_proxy!3) a!77))
                             (asserted spacer_proxy!3)
                             a!77))
      (a!93 (monotonicity (monotonicity (monotonicity a!90 a!91) (= a!89 a!92))
                          (= (or (not spacer_proxy!0) a!89)
                             (or (not spacer_proxy!0) a!92))))
      (a!96 (monotonicity (monotonicity (rewrite a!94) (= a!92 a!95))
                          (= (or (not spacer_proxy!0) a!92)
                             (or (not spacer_proxy!0) a!95))))
      (a!118 (rewrite (= (=> L2_tr0 a!117) (or (not L2_tr0) a!117))))
      (a!120 (= (or (=> L2_tr0 a!114) |L2#level_4!81|)
                (or (or (not L2_tr0) a!117) |L2#level_4!81|)))
      (a!123 (monotonicity (monotonicity (rewrite a!121) (= a!117 a!122))
                           (= (or (not L2_tr0) a!117) (or (not L2_tr0) a!122))))
      (a!124 (= (or (or (not L2_tr0) a!117) |L2#level_4!81|)
                (or (or (not L2_tr0) a!122) |L2#level_4!81|)))
      (a!126 (= (or (or (not L2_tr0) a!122) |L2#level_4!81|) a!125))
      (a!127 (= (or (or (not L2_tr0) a!117) |L2#level_4!81|) a!125)))
(let ((a!7 (mp (asserted (or (not L2_tr0) a!3)) a!6 (or (not L2_tr0) a!5)))
      (a!8 (monotonicity (rewrite (= a!5 (not a!2)))
                         (= (or (not L2_tr0) a!5) (or (not L2_tr0) (not a!2)))))
      (a!11 (or a!10 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!18 (monotonicity (monotonicity (rewrite a!13) a!16 (= a!12 a!17))
                          (= (or (not L2_tr1) a!12) (or (not L2_tr1) a!17))))
      (a!20 (monotonicity (rewrite (= a!17 (not a!10)))
                          (= (or (not L2_tr1) a!17)
                             (or (not L2_tr1) (not a!10)))))
      (a!31 (th-lemma a!30 a!26 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!34 (th-lemma a!28 a!33 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!51 (monotonicity (monotonicity (monotonicity (monotonicity a!44 a!45)
                                                      (= a!41 a!46))
                                        (monotonicity (monotonicity a!47 a!48)
                                                      (= a!42 a!49))
                                        (= a!43 a!50))
                          (= (=> L2_tr1 a!43) (=> L2_tr1 a!50))))
      (a!52 (rewrite (= (=> L2_tr1 a!50) (or (not L2_tr1) a!50))))
      (a!54 (= (or (=> L2_tr1 a!43) |L2#level_4!81|)
               (or (or (not L2_tr1) a!50) |L2#level_4!81|)))
      (a!60 (monotonicity (monotonicity (monotonicity (rewrite a!55)
                                                      (= a!46 a!56))
                                        (monotonicity (rewrite a!57)
                                                      (= a!49 a!58))
                                        (= a!50 a!59))
                          (= (or (not L2_tr1) a!50) (or (not L2_tr1) a!59))))
      (a!61 (= (or (or (not L2_tr1) a!50) |L2#level_4!81|)
               (or (or (not L2_tr1) a!59) |L2#level_4!81|)))
      (a!63 (= (or (or (not L2_tr1) a!59) |L2#level_4!81|) a!62))
      (a!64 (= (or (or (not L2_tr1) a!50) |L2#level_4!81|) a!62))
      (a!81 (def-axiom (or a!10 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!82 (def-axiom (or a!10
                           (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))))
      (a!84 (def-axiom (or a!10
                           (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))))
      (a!86 (def-axiom (or a!10 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!97 (trans a!93
                   a!96
                   (= (or (not spacer_proxy!0) a!89)
                      (or (not spacer_proxy!0) a!95))))
      (a!99 (def-axiom (or a!10 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!100 (def-axiom (or a!10
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!102 (def-axiom (or a!10
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!104 (def-axiom (or a!10 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!112 (or a!2 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!119 (trans (monotonicity (monotonicity (monotonicity a!115 a!116)
                                                (= a!114 a!117))
                                  (= (=> L2_tr0 a!114) (=> L2_tr0 a!117)))
                    a!118
                    (= (=> L2_tr0 a!114) (or (not L2_tr0) a!117))))
      (a!138 (def-axiom (or a!2 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!139 (def-axiom (or a!2
                            (= (select aux!15_n L2_0_n)
                               (select aux!12_n L2_0_n)))))
      (a!142 (def-axiom (or a!2 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!145 (def-axiom (or a!2 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!146 (def-axiom (or a!2
                            (= (select aux!14_n L2_2_n)
                               (select aux!13_n L2_2_n)))))
      (a!149 (def-axiom (or a!2 (= L1_3_0 (select aux!14_n L2_2_n))))))
(let ((a!19 (mp (asserted (or (not L2_tr1) a!12)) a!18 (or (not L2_tr1) a!17)))
      (a!53 (trans a!51 a!52 (= (=> L2_tr1 a!43) (or (not L2_tr1) a!50))))
      (a!98 (mp (asserted (or (not spacer_proxy!0) a!89))
                a!97
                (or (not spacer_proxy!0) a!95)))
      (a!128 (trans (monotonicity a!119 a!120)
                    (trans (monotonicity a!123 a!124) (rewrite a!126) a!127)
                    (= (or (=> L2_tr0 a!114) |L2#level_4!81|) a!125))))
(let ((a!21 (unit-resolution (mp a!19 a!20 (or (not L2_tr1) (not a!10)))
                             (hypothesis L2_tr1)
                             (not a!10)))
      (a!65 (trans (monotonicity a!53 a!54)
                   (trans (monotonicity a!60 a!61) (rewrite a!63) a!64)
                   (= (or (=> L2_tr1 a!43) |L2#level_4!81|) a!62)))
      (a!129 (mp (asserted (or (=> L2_tr0 a!114) |L2#level_4!81|)) a!128 a!125)))
(let ((a!22 (unit-resolution (def-axiom a!11)
                             a!21
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!24 (unit-resolution (def-axiom (or a!10 (= L2_0_0 L2_0_n)))
                             a!21
                             (= L2_0_0 L2_0_n)))
      (a!35 (unit-resolution (def-axiom (or a!10 (= L2_2_0 L2_2_n)))
                             a!21
                             (= L2_2_0 L2_2_n)))
      (a!66 (mp (asserted (or (=> L2_tr1 a!43) |L2#level_4!81|)) a!65 a!62))
      (a!75 (unit-resolution (def-axiom (or a!10 (= L2_4_0 L2_4_n)))
                             a!21
                             (= L2_4_0 L2_4_n)))
      (a!83 (trans (unit-resolution a!81
                                    a!21
                                    (= L2_3_0 (select aux!20_n L2_2_n)))
                   (unit-resolution a!82
                                    a!21
                                    (= (select aux!20_n L2_2_n)
                                       (select aux!19_n L2_2_n)))
                   (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!87 (symm (unit-resolution a!86
                                   a!21
                                   (= L2_3_n (select aux!17_n L2_2_n)))
                  (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!101 (trans (unit-resolution a!99
                                     a!21
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!100
                                     a!21
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!105 (symm (unit-resolution a!104
                                    a!21
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n))))
(let ((a!23 (th-lemma a!22 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!36 (monotonicity (trans (th-lemma a!26
                                           a!28
                                           a!31
                                           a!34
                                           a!26
                                           a!28
                                           (= L2_0_n L2_2_n))
                                 (symm a!35 (= L2_2_n L2_2_0))
                                 (= L2_0_n L2_2_0))
                          (= (= L2_0_0 L2_0_n) (= L2_0_0 L2_2_0))))
      (a!40 (th-lemma a!35 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!73 (th-lemma a!35 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!74 (th-lemma a!22 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!76 (th-lemma a!75 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!85 (trans a!83
                   (unit-resolution a!84
                                    a!21
                                    (= (select aux!19_n L2_2_n)
                                       (select aux!17_n L2_2_n)))
                   (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!103 (trans a!101
                    (unit-resolution a!102
                                     a!21
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n)))))
(let ((a!38 (mp a!24
                (trans a!36 a!37 (= (= L2_0_0 L2_0_n) (= L2_2_0 L2_0_0)))
                (= L2_2_0 L2_0_0)))
      (a!88 (th-lemma (trans a!85 a!87 (= L2_3_0 L2_3_n))
                      (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!106 (th-lemma (trans a!103 a!105 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0))))
(let ((a!39 (th-lemma a!38 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!80 (th-lemma a!38 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!108 (unit-resolution a!66
                              (unit-resolution (lemma (th-lemma a!33
                                                                a!67
                                                                a!68
                                                                a!69
                                                                false)
                                                      (or a!70 a!71 a!72))
                                               a!73
                                               a!74
                                               a!70)
                              (hypothesis L2_tr1)
                              (asserted (not |L2#level_4!81|))
                              (th-lemma a!76 a!78 a!74 a!79)
                              a!80
                              (th-lemma a!88
                                        (unit-resolution a!98
                                                         (asserted spacer_proxy!0)
                                                         a!95)
                                        a!106
                                        a!107)
                              a!56)))
(let ((a!109 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma (th-lemma a!23
                                               a!39
                                               a!40
                                               a!31
                                               a!28
                                               a!108
                                               false)
                                     (not L2_tr1))
                              (asserted (not L2_ext0_n))
                              L2_tr0)))
(let ((a!110 (unit-resolution (mp a!7 a!8 (or (not L2_tr0) (not a!2)))
                              a!109
                              (not a!2))))
(let ((a!111 (unit-resolution (def-axiom (or a!2 (= L2_5_n 0)))
                              a!110
                              (= L2_5_n 0)))
      (a!113 (unit-resolution (def-axiom a!112)
                              a!110
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!130 (unit-resolution (def-axiom (or a!2 (= L1_0_0 L2_0_n)))
                              a!110
                              (= L1_0_0 L2_0_n)))
      (a!133 (unit-resolution (def-axiom (or a!2 (= L1_2_0 L2_2_n)))
                              a!110
                              (= L1_2_0 L2_2_n)))
      (a!140 (symm (unit-resolution a!139
                                    a!110
                                    (= (select aux!15_n L2_0_n)
                                       (select aux!12_n L2_0_n)))
                   (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!143 (symm (unit-resolution a!142
                                    a!110
                                    (= L1_1_0 (select aux!15_n L2_0_n)))
                   (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!147 (symm (unit-resolution a!146
                                    a!110
                                    (= (select aux!14_n L2_2_n)
                                       (select aux!13_n L2_2_n)))
                   (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!150 (symm (unit-resolution a!149
                                    a!110
                                    (= L1_3_0 (select aux!14_n L2_2_n)))
                   (= (select aux!14_n L2_2_n) L1_3_0))))
(let ((a!131 (monotonicity (trans a!130
                                  (th-lemma a!26 a!28 (= L2_0_n L2_5_n))
                                  (= L1_0_0 L2_5_n))
                           (= (= L1_0_0 0) (= L2_5_n 0))))
      (a!134 (monotonicity (trans a!133
                                  (th-lemma a!33 a!30 (= L2_2_n L2_5_n))
                                  (= L1_2_0 L2_5_n))
                           (= (= L1_2_0 0) (= L2_5_n 0))))
      (a!141 (trans (unit-resolution a!138
                                     a!110
                                     (= L2_1_n (select aux!12_n L2_0_n)))
                    a!140
                    (= L2_1_n (select aux!15_n L2_0_n))))
      (a!148 (trans (unit-resolution a!145
                                     a!110
                                     (= L2_3_n (select aux!13_n L2_2_n)))
                    a!147
                    (= L2_3_n (select aux!14_n L2_2_n)))))
(let ((a!132 (mp a!111 (symm a!131 (= (= L2_5_n 0) (= L1_0_0 0))) (= L1_0_0 0)))
      (a!135 (mp a!111 (symm a!134 (= (= L2_5_n 0) (= L1_2_0 0))) (= L1_2_0 0)))
      (a!144 (th-lemma (trans a!141 a!143 (= L2_1_n L1_1_0))
                       (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!151 (th-lemma (trans a!148 a!150 (= L2_3_n L1_3_0))
                       (<= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!136 (unit-resolution (hypothesis (not (= L1_2_0 0))) a!135 false)))
(let ((a!137 (unit-resolution a!129
                              a!132
                              a!109
                              (hypothesis (not (<= L1_5_0 0)))
                              (lemma a!136 (= L1_2_0 0))
                              (asserted (not |L2#level_4!81|))
                              (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
(let ((a!152 (lemma (th-lemma a!137
                              a!144
                              (unit-resolution a!98
                                               (asserted spacer_proxy!0)
                                               a!95)
                              a!151
                              false)
                    (<= L1_5_0 0))))
  (th-lemma a!111 (th-lemma a!113 a!78 a!152 (not (>= L2_5_n 0))) false)))))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(= L2_0_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(= L2_0_n L2_2_n)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_5_n (* (- 1) L2_2_n)) (- 1)))
(= L2_2_n L2_5_n)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(= L2_0_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(= L2_0_n L2_2_n)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_5_n (* (- 1) L2_2_n)) (- 1)))
(= L2_2_n L2_5_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(= L2_0_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(= L2_0_n L2_2_n)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_5_n (* (- 1) L2_2_n)) (- 1)))
(= L2_2_n L2_5_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
    (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
    (not (<= L2_2_n L2_5_n))
    (not (>= L2_2_n L2_5_n))
    (not (<= L2_0_n L2_2_n))
    (not (>= L2_0_n L2_2_n)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!4 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!5 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!4 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!5 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!4 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!5 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> L2_tr1 a!5) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 5 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 5 depth: 5
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  false)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  7886)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 2))
(define-fun L2_1_3 () Int
  1)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!1042))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!1046))
(define-fun query!0_0_n () Int
  (- 1))
(define-fun L2_3_3 () Int
  1594)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  (- 3))
(define-fun L2_1_2 () Int
  7886)
(define-fun query!0_3_n () Int
  1594)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!1045))
(define-fun L2_3_1 () Int
  1594)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  (- 3))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun L2_0_2 () Int
  (- 2))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!1044))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!1040))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  0)
(define-fun |query!0#level_4!80| () Bool
  true)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun |query!0#level_7!853| () Bool
  false)
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!1041))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  false)
(define-fun query!0_4_n () Int
  (- 2))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  7886)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!1043))
(define-fun L2_0_0 () Int
  (- 1))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!1048))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!1039))
(define-fun L2_2_0 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!1047))
(define-fun L2_3_2 () Int
  0)
(define-fun L2_2_1 () Int
  (- 3))
(define-fun L2_4_0 () Int
  0)
(define-fun L2_1_0 () Int
  1)
(define-fun k!1039 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!1047 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 7886
    7886))
(define-fun k!1044 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 1594
    1594))
(define-fun k!1041 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!1046 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 1594
    1594))
(define-fun k!1043 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 1594
  (ite (= x!0 (- 1)) 0
    1594)))
(define-fun k!1040 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
  (ite (= x!0 (- 2)) 7886
    1)))
(define-fun k!1048 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))
(define-fun k!1045 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 7886
    7886))
(define-fun k!1042 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L2_1_3) L2_3_2)))))
  (and (not (<= L2_5_3 L2_0_2))
       (not (<= L2_5_3 L2_2_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 5
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!612_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L2_4_0 () Int
  1)
(define-fun spacer_proxy!14 () Bool
  true)
(define-fun L2_1_0 () Int
  1324)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!1064))
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun L2_1_n () Int
  1324)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!1062))
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!1063))
(define-fun L2_3_0 () Int
  1323)
(define-fun L2_4_n () Int
  1)
(define-fun L1_ext!612_0 () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!1066))
(define-fun L2_5_n () Int
  0)
(define-fun L2_0_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!42 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!1061))
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun L2_3_n () Int
  1323)
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!1065))
(define-fun spacer_proxy!23 () Bool
  false)
(define-fun spacer_proxy!26 () Bool
  false)
(define-fun L2_2_0 () Int
  0)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun L2_tr1 () Bool
  true)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!1063 ((x!0 Int)) Int
  (ite (= x!0 0) 1323
    1323))
(define-fun k!1064 ((x!0 Int)) Int
  (ite (= x!0 0) 1323
    1323))
(define-fun k!1061 ((x!0 Int)) Int
  (ite (= x!0 0) 1324
    1324))
(define-fun k!1065 ((x!0 Int)) Int
  (ite (= x!0 0) 1324
    1324))
(define-fun k!1062 ((x!0 Int)) Int
  (ite (= x!0 0) 1324
    1324))
(define-fun k!1066 ((x!0 Int)) Int
  (ite (= x!0 0) 1323
    1323))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ (* (- 1) L2_1_0) L2_3_0)))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 5
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!3 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!4 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!9 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
              (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!18 (or (not spacer_proxy!25) (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!20 (or (not spacer_proxy!21) (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!23 (or (not spacer_proxy!22) (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!25 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!26 (or (not spacer_proxy!24) (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!30 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!32 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!33 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!34 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!38 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!39 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!40 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1) |L2#level_3!79|))
      (a!43 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!46 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!47 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!48 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!49 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!58 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!60 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!84 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!93 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!94 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
(let ((a!2 (or a!1
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_4_0 1)
               (<= L1_2_0 0)
               (not (<= L1_2_0 1))))
      (a!5 (or a!1
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_4_0 1)
               (<= L1_2_0 0)
               (not (<= L1_2_0 1))))
      (a!10 (or a!1
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!13 (or (not L2_tr0)
                a!1
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))
                |L2#level_3!79|))
      (a!19 (unit-resolution (asserted a!18)
                             (asserted spacer_proxy!25)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!21 (unit-resolution (asserted a!20)
                             (asserted spacer_proxy!21)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!24 (unit-resolution (asserted a!23)
                             (asserted spacer_proxy!22)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!27 (unit-resolution (asserted a!26)
                             (asserted spacer_proxy!24)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!31 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!30))
      (a!35 (monotonicity (monotonicity (rewrite a!33) (= a!32 a!34))
                          (= (or (not L2_tr0) a!32) (or (not L2_tr0) a!34))))
      (a!41 (trans (monotonicity (rewrite (= a!38 a!39))
                                 (= (or a!38 |L2#level_3!79|)
                                    (or a!39 |L2#level_3!79|)))
                   (rewrite (= (or a!39 |L2#level_3!79|) a!40))
                   (= (or a!38 |L2#level_3!79|) a!40)))
      (a!44 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!43
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!50 (monotonicity (rewrite a!48) (= (not (<= L2_4_n L2_5_0)) a!49)))
      (a!51 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!49))
      (a!59 (unit-resolution (asserted (or (not spacer_proxy!23) a!58))
                             (asserted spacer_proxy!23)
                             a!58))
      (a!85 (unit-resolution (asserted (or (not spacer_proxy!14) a!84))
                             (asserted spacer_proxy!14)
                             a!84)))
(let ((a!6 (rewrite (= (=> L2_tr0 a!5) (or (not L2_tr0) a!5))))
      (a!8 (= (or (=> L2_tr0 a!2) |L2#level_3!79|)
              (or (or (not L2_tr0) a!5) |L2#level_3!79|)))
      (a!11 (monotonicity (monotonicity (rewrite a!9) (= a!5 a!10))
                          (= (or (not L2_tr0) a!5) (or (not L2_tr0) a!10))))
      (a!12 (= (or (or (not L2_tr0) a!5) |L2#level_3!79|)
               (or (or (not L2_tr0) a!10) |L2#level_3!79|)))
      (a!14 (= (or (or (not L2_tr0) a!10) |L2#level_3!79|) a!13))
      (a!15 (= (or (or (not L2_tr0) a!5) |L2#level_3!79|) a!13))
      (a!22 (th-lemma a!19 a!21 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!28 (th-lemma a!27 a!24 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!36 (mp (asserted (or (not L2_tr0) a!32)) a!35 (or (not L2_tr0) a!34)))
      (a!37 (monotonicity (rewrite (= a!34 (not a!31)))
                          (= (or (not L2_tr0) a!34)
                             (or (not L2_tr0) (not a!31)))))
      (a!42 (unit-resolution (mp (asserted (or a!38 |L2#level_3!79|)) a!41 a!40)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_3!79|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!45 (or a!44 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!52 (monotonicity (monotonicity (rewrite a!47) a!50 (= a!46 a!51))
                          (= (or (not L2_tr1) a!46) (or (not L2_tr1) a!51))))
      (a!54 (monotonicity (rewrite (= a!51 (not a!44)))
                          (= (or (not L2_tr1) a!51)
                             (or (not L2_tr1) (not a!44)))))
      (a!74 (or a!31 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!77 (def-axiom (or a!31 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!78 (def-axiom (or a!31
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!81 (def-axiom (or a!31 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!86 (def-axiom (or a!31 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!87 (def-axiom (or a!31
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!90 (def-axiom (or a!31 (= L1_3_0 (select aux!14_n L2_2_n))))))
(let ((a!7 (trans (monotonicity (monotonicity (monotonicity a!3 a!4)
                                              (= a!2 a!5))
                                (= (=> L2_tr0 a!2) (=> L2_tr0 a!5)))
                  a!6
                  (= (=> L2_tr0 a!2) (or (not L2_tr0) a!5))))
      (a!29 (th-lemma (th-lemma a!22 a!24 a!25)
                      a!28
                      (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!53 (mp (asserted (or (not L2_tr1) a!46)) a!52 (or (not L2_tr1) a!51))))
(let ((a!16 (trans (monotonicity a!7 a!8)
                   (trans (monotonicity a!11 a!12) (rewrite a!14) a!15)
                   (= (or (=> L2_tr0 a!2) |L2#level_3!79|) a!13)))
      (a!55 (unit-resolution (mp a!53 a!54 (or (not L2_tr1) (not a!44)))
                             (hypothesis L2_tr1)
                             (not a!44))))
(let ((a!17 (mp (asserted (or (=> L2_tr0 a!2) |L2#level_3!79|)) a!16 a!13))
      (a!56 (unit-resolution (def-axiom a!45)
                             a!55
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!61 (unit-resolution (def-axiom (or a!44 (= L2_4_0 L2_4_n)))
                             a!55
                             (= L2_4_0 L2_4_n))))
(let ((a!57 (th-lemma a!56 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!62 (th-lemma a!61 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!63 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!42
                                              a!57
                                              (th-lemma a!59 a!60)
                                              a!62
                                              false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!64 (unit-resolution (mp a!36 a!37 (or (not L2_tr0) (not a!31)))
                             a!63
                             (not a!31))))
(let ((a!65 (unit-resolution (def-axiom (or a!31 (= L1_0_0 L2_0_n)))
                             a!64
                             (= L1_0_0 L2_0_n)))
      (a!67 (unit-resolution (def-axiom (or a!31 (= L2_5_n 0)))
                             a!64
                             (= L2_5_n 0)))
      (a!69 (unit-resolution (def-axiom (or a!31 (= L1_2_0 L2_2_n)))
                             a!64
                             (= L1_2_0 L2_2_n)))
      (a!71 (unit-resolution (def-axiom (or a!31 (= L1_4_0 L2_4_n)))
                             a!64
                             (= L1_4_0 L2_4_n)))
      (a!75 (unit-resolution (def-axiom a!74)
                             a!64
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!79 (symm (unit-resolution a!78
                                   a!64
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!82 (symm (unit-resolution a!81
                                   a!64
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!88 (symm (unit-resolution a!87
                                   a!64
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!91 (symm (unit-resolution a!90
                                   a!64
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0))))
(let ((a!66 (th-lemma (symm a!65 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!68 (th-lemma (symm a!65 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!70 (th-lemma (symm a!69 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!72 (th-lemma (symm a!71 (= L2_4_n L1_4_0))
                      (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!73 (th-lemma (symm a!71 (= L2_4_n L1_4_0))
                      (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!80 (trans (unit-resolution a!77
                                    a!64
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!79
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!89 (trans (unit-resolution a!86
                                    a!64
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!88
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!96 (th-lemma (symm a!69 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0))))
(let ((a!76 (th-lemma a!73 a!75 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!83 (th-lemma (trans a!80 a!82 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!92 (th-lemma (trans a!89 a!91 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!95 (unit-resolution a!17
                             (th-lemma a!29
                                       a!66
                                       (th-lemma a!67 (>= L2_5_n 0))
                                       (not (<= L1_0_0 0)))
                             (asserted (not |L2#level_3!79|))
                             a!63
                             (th-lemma a!68
                                       a!21
                                       (th-lemma a!67 (<= L2_5_n 0))
                                       (<= L1_0_0 1))
                             (th-lemma a!70
                                       a!28
                                       a!21
                                       (th-lemma a!67 (<= L2_5_n 0))
                                       (<= L1_2_0 1))
                             (th-lemma (th-lemma a!67 (>= L2_5_n 0))
                                       a!59
                                       a!72
                                       (not (<= L1_4_0 1)))
                             a!76
                             (th-lemma (th-lemma a!83 a!85 a!92 a!93) a!94)
                             (<= L1_2_0 0))))
  (th-lemma a!95
            a!96
            (th-lemma a!67 (>= L2_5_n 0))
            (th-lemma a!22 a!24 a!25)
            false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2
      |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 5
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!5 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!6 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!7 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!8 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!9 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!15 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!16 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!17 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!18 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!27 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!29 (hypothesis (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!30 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!33 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!34 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!35 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!36 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!42 (or (not (<= L1_0_0 0))
                (not (<= L1_2_0 0))
                (not (>= L1_0_0 0))
                (not (>= L1_2_0 0))
                (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_5_0 0)))
      (a!43 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!44 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!45 (or (not (<= L1_0_0 0))
                (not (<= L1_2_0 0))
                (not (>= L1_0_0 0))
                (not (>= L1_2_0 0))
                (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_5_0 0)))
      (a!49 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!50 (or (not (<= L1_0_0 0))
                (not (<= L1_2_0 0))
                (not (>= L1_0_0 0))
                (not (>= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)))
      (a!53 (or (not L2_tr0)
                (not (<= L1_0_0 0))
                (not (<= L1_2_0 0))
                (not (>= L1_0_0 0))
                (not (>= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                |L2#level_5!143|))
      (a!58 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!61 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!62 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!63 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!74 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!83 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!84 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!86 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!90 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!96 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!100 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!109 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!112 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!118 (hypothesis (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!135 (not (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2))
      (a!10 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                a!6
                a!9))
      (a!19 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                a!16
                a!18))
      (a!22 (or (not L2_tr1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                a!16
                a!18
                |L2#level_4!81|))
      (a!28 (unit-resolution (asserted a!27)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!31 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!30
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!37 (monotonicity (rewrite a!35) (= (not (<= L2_4_n L2_5_0)) a!36)))
      (a!38 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!36))
      (a!46 (rewrite (= (=> L2_tr0 a!45) (or (not L2_tr0) a!45))))
      (a!48 (= (or (=> L2_tr0 a!42) |L2#level_5!143|)
               (or (or (not L2_tr0) a!45) |L2#level_5!143|)))
      (a!51 (monotonicity (monotonicity (rewrite a!49) (= a!45 a!50))
                          (= (or (not L2_tr0) a!45) (or (not L2_tr0) a!50))))
      (a!52 (= (or (or (not L2_tr0) a!45) |L2#level_5!143|)
               (or (or (not L2_tr0) a!50) |L2#level_5!143|)))
      (a!54 (= (or (or (not L2_tr0) a!50) |L2#level_5!143|) a!53))
      (a!55 (= (or (or (not L2_tr0) a!45) |L2#level_5!143|) a!53))
      (a!59 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!58))
      (a!64 (monotonicity (monotonicity (rewrite a!62) (= a!61 a!63))
                          (= (or (not L2_tr0) a!61) (or (not L2_tr0) a!63))))
      (a!75 (unit-resolution (asserted (or (not spacer_proxy!14) a!74))
                             (asserted spacer_proxy!14)
                             a!74))
      (a!87 (unit-resolution (asserted a!86)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!91 (unit-resolution (asserted (or (not spacer_proxy!3) a!90))
                             (asserted spacer_proxy!3)
                             a!90))
      (a!97 (unit-resolution (asserted a!96)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!101 (unit-resolution (asserted a!100)
                              (asserted spacer_proxy!4)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
(let ((a!11 (monotonicity (monotonicity (monotonicity (monotonicity a!4 a!5)
                                                      (= a!1 a!6))
                                        (monotonicity (monotonicity a!7 a!8)
                                                      (= a!2 a!9))
                                        (= a!3 a!10))
                          (= (=> L2_tr1 a!3) (=> L2_tr1 a!10))))
      (a!12 (rewrite (= (=> L2_tr1 a!10) (or (not L2_tr1) a!10))))
      (a!14 (= (or (=> L2_tr1 a!3) |L2#level_4!81|)
               (or (or (not L2_tr1) a!10) |L2#level_4!81|)))
      (a!20 (monotonicity (monotonicity (monotonicity (rewrite a!15)
                                                      (= a!6 a!16))
                                        (monotonicity (rewrite a!17)
                                                      (= a!9 a!18))
                                        (= a!10 a!19))
                          (= (or (not L2_tr1) a!10) (or (not L2_tr1) a!19))))
      (a!21 (= (or (or (not L2_tr1) a!10) |L2#level_4!81|)
               (or (or (not L2_tr1) a!19) |L2#level_4!81|)))
      (a!23 (= (or (or (not L2_tr1) a!19) |L2#level_4!81|) a!22))
      (a!24 (= (or (or (not L2_tr1) a!10) |L2#level_4!81|) a!22))
      (a!32 (or a!31 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!39 (monotonicity (monotonicity (rewrite a!34) a!37 (= a!33 a!38))
                          (= (or (not L2_tr1) a!33) (or (not L2_tr1) a!38))))
      (a!41 (monotonicity (rewrite (= a!38 (not a!31)))
                          (= (or (not L2_tr1) a!38)
                             (or (not L2_tr1) (not a!31)))))
      (a!47 (trans (monotonicity (monotonicity (monotonicity a!43 a!44)
                                               (= a!42 a!45))
                                 (= (=> L2_tr0 a!42) (=> L2_tr0 a!45)))
                   a!46
                   (= (=> L2_tr0 a!42) (or (not L2_tr0) a!45))))
      (a!60 (def-axiom (or a!59 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!65 (mp (asserted (or (not L2_tr0) a!61)) a!64 (or (not L2_tr0) a!63)))
      (a!66 (monotonicity (rewrite (= a!63 (not a!59)))
                          (= (or (not L2_tr0) a!63)
                             (or (not L2_tr0) (not a!59)))))
      (a!68 (def-axiom (or a!59
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!71 (def-axiom (or a!59 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!76 (def-axiom (or a!59 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!77 (def-axiom (or a!59
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!80 (def-axiom (or a!59 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!92 (or a!59 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!115 (th-lemma a!97 a!87 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!119 (def-axiom (or a!31 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!120 (def-axiom (or a!31
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!122 (def-axiom (or a!31
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!124 (def-axiom (or a!31 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!127 (def-axiom (or a!31 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!128 (def-axiom (or a!31
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!130 (def-axiom (or a!31
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!132 (def-axiom (or a!31 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!137 (th-lemma a!101 a!28 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
(let ((a!13 (trans a!11 a!12 (= (=> L2_tr1 a!3) (or (not L2_tr1) a!10))))
      (a!40 (mp (asserted (or (not L2_tr1) a!33)) a!39 (or (not L2_tr1) a!38)))
      (a!56 (trans (monotonicity a!47 a!48)
                   (trans (monotonicity a!51 a!52) (rewrite a!54) a!55)
                   (= (or (=> L2_tr0 a!42) |L2#level_5!143|) a!53)))
      (a!67 (unit-resolution (mp a!65 a!66 (or (not L2_tr0) (not a!59)))
                             (hypothesis L2_tr0)
                             (not a!59))))
(let ((a!25 (trans (monotonicity a!13 a!14)
                   (trans (monotonicity a!20 a!21) (rewrite a!23) a!24)
                   (= (or (=> L2_tr1 a!3) |L2#level_4!81|) a!22)))
      (a!57 (mp (asserted (or (=> L2_tr0 a!42) |L2#level_5!143|)) a!56 a!53))
      (a!69 (symm (unit-resolution a!68
                                   a!67
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!72 (symm (unit-resolution a!71
                                   a!67
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!78 (symm (unit-resolution a!77
                                   a!67
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!81 (symm (unit-resolution a!80
                                   a!67
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!85 (unit-resolution (def-axiom (or a!59 (= L2_5_n 0)))
                             a!67
                             (= L2_5_n 0)))
      (a!88 (unit-resolution (def-axiom (or a!59 (= L1_0_0 L2_0_n)))
                             a!67
                             (= L1_0_0 L2_0_n)))
      (a!93 (unit-resolution (def-axiom a!92)
                             a!67
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!94 (unit-resolution (def-axiom (or a!59 (= L1_2_0 L2_2_n)))
                             a!67
                             (= L1_2_0 L2_2_n))))
(let ((a!26 (mp (asserted (or (=> L2_tr1 a!3) |L2#level_4!81|)) a!25 a!22))
      (a!70 (trans (unit-resolution a!60
                                    a!67
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!69
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!79 (trans (unit-resolution a!76
                                    a!67
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!78
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!89 (th-lemma (symm a!88 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!95 (th-lemma (symm a!94 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!98 (th-lemma (symm a!94 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!99 (th-lemma (symm a!88 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!73 (th-lemma (trans a!70 a!72 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!82 (th-lemma (trans a!79 a!81 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!102 (unit-resolution a!57
                              (th-lemma (th-lemma a!73 a!75 a!82 a!83) a!84)
                              (th-lemma (th-lemma a!85 (>= L2_5_n 0))
                                        a!87
                                        a!89
                                        (>= L1_0_0 0))
                              (hypothesis L2_tr0)
                              (th-lemma (th-lemma a!85 (>= L2_5_n 0))
                                        a!91
                                        a!93
                                        (not (<= L1_5_0 0)))
                              (th-lemma a!95
                                        a!97
                                        (th-lemma a!85 (<= L2_5_n 0))
                                        (<= L1_2_0 0))
                              (th-lemma (th-lemma a!85 (>= L2_5_n 0))
                                        a!28
                                        a!98
                                        (>= L1_2_0 0))
                              (th-lemma a!99
                                        a!101
                                        (th-lemma a!85 (<= L2_5_n 0))
                                        (<= L1_0_0 0))
                              (asserted (not |L2#level_5!143|))
                              false)))
(let ((a!103 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!102 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!104 (unit-resolution (mp a!40 a!41 (or (not L2_tr1) (not a!31)))
                              a!103
                              (not a!31))))
(let ((a!105 (unit-resolution (def-axiom a!32)
                              a!104
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!107 (unit-resolution (def-axiom (or a!31 (= L2_2_0 L2_2_n)))
                              a!104
                              (= L2_2_0 L2_2_n)))
      (a!110 (unit-resolution (def-axiom (or a!31 (= L2_4_0 L2_4_n)))
                              a!104
                              (= L2_4_0 L2_4_n)))
      (a!113 (unit-resolution (def-axiom (or a!31 (= L2_0_0 L2_0_n)))
                              a!104
                              (= L2_0_0 L2_0_n)))
      (a!121 (trans (unit-resolution a!119
                                     a!104
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!120
                                     a!104
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!125 (symm (unit-resolution a!124
                                    a!104
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!129 (trans (unit-resolution a!127
                                     a!104
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!128
                                     a!104
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!133 (symm (unit-resolution a!132
                                    a!104
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n))))
(let ((a!106 (th-lemma a!105 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!108 (th-lemma a!107 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!111 (th-lemma a!110 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!114 (th-lemma a!113 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!116 (th-lemma a!107 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!123 (trans a!121
                    (unit-resolution a!122
                                     a!104
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!131 (trans a!129
                    (unit-resolution a!130
                                     a!104
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!136 (th-lemma a!113 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!139 (th-lemma a!105 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!117 (th-lemma a!114 a!115 a!116 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!126 (th-lemma (trans a!123 a!125 (= L2_1_0 L2_1_n))
                       (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!134 (th-lemma (trans a!131 a!133 (= L2_3_0 L2_3_n))
                       (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!138 (th-lemma a!136 a!108 a!137 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
  (th-lemma (unit-resolution a!26
                             (lemma (th-lemma a!28 a!29 a!106 a!108 false)
                                    a!109)
                             a!103
                             (asserted (not |L2#level_4!81|))
                             (th-lemma a!111 a!91 a!106 a!112)
                             a!117
                             (lemma (th-lemma a!118 a!126 a!75 a!134 false)
                                    a!135)
                             a!16)
            a!138
            a!115
            a!101
            a!139
            a!116
            false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 5 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 5 depth: 5
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not (= L2_0_0 query!0_0_n))
               (not (= L2_2_0 query!0_0_n))
               (not (= L2_4_0 query!0_1_n))
               (not (= L2_5_0 query!0_0_n))
               (not (= L2_0_1 query!0_4_n))
               (not (= L2_2_1 query!0_2_n))
               (not (= L2_4_1 query!0_1_n))
               (not (= L2_5_1 query!0_0_n))
               (not (= L2_0_2 query!0_4_n))
               (not (= L2_2_2 query!0_0_n))
               (not (= L2_4_2 query!0_1_n))
               (not (= L2_5_2 query!0_0_n))
               (not (= L2_0_3 query!0_0_n))
               (not (= L2_2_3 query!0_2_n))
               (not (= L2_4_3 query!0_1_n))
               (not (= L2_5_3 query!0_0_n))
               (not (= (select aux!10_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!4_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!7_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (not (= (select aux!9_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!6_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!5_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!8_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!3_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
               (not (= L2_1_3 (select aux!10_n query!0_0_n)))
               (not (= L2_3_3 (select aux!9_n query!0_2_n)))
               (not (= L2_3_2 (select aux!7_n query!0_0_n)))
               (not (= L2_1_2 (select aux!8_n query!0_4_n)))
               (not (= L2_1_1 (select aux!6_n query!0_4_n)))
               (not (= L2_3_1 (select aux!5_n query!0_2_n)))
               (not (= query!0_3_n (select aux!2_n query!0_2_n)))
               (not (= query!0_5_n (select aux!1_n query!0_4_n)))
               (not (= L2_1_0 (select aux!4_n query!0_0_n)))
               (not (= L2_3_0 (select aux!3_n query!0_0_n)))
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!3 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n))))
      (a!4 (= (<= query!0_1_n query!0_0_n)
              (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!5 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!17 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!18 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!19 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!21 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!22 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!23 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!24 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!25 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
               (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!26 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!32 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!33 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!34 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!35 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!46 (hypothesis (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!50 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!62 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!63 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!65 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
               (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!66 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!72 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!73 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!2 (or a!1
               (not (= (select aux!2_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))))
      (a!6 (monotonicity (rewrite a!4)
                         (= (not (<= query!0_1_n query!0_0_n)) a!5)))
      (a!7 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                a!5))
      (a!13 (def-axiom (or a!1
                           (= (select aux!3_n query!0_0_n)
                              (select aux!2_n query!0_0_n)))))
      (a!15 (def-axiom (or a!1 (= L2_3_0 (select aux!3_n query!0_0_n)))))
      (a!20 (or a!17
                a!18
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19))
      (a!27 (or a!23
                a!18
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!26))
      (a!36 (or a!33
                a!18
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!35))
      (a!39 (or (not query!0_dummy)
                a!33
                a!18
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!35
                |query!0#level_5!142|))
      (a!64 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!18
                a!62
                a!19
                a!63))
      (a!67 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!18
                a!62
                a!26
                a!66))
      (a!74 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!18
                a!62
                a!35
                a!73))
      (a!77 (or (not query!0_dummy)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!18
                a!62
                a!35
                a!73
                |query!0#level_5!142|))
      (a!86 (def-axiom (or a!1 (= L2_1_0 (select aux!4_n query!0_0_n)))))
      (a!88 (def-axiom (or a!1
                           (= (select aux!4_n query!0_0_n)
                              (select aux!1_n query!0_0_n))))))
(let ((a!8 (monotonicity (monotonicity a!6 (= a!3 a!7))
                         (= (or (not query!0_dummy) a!3)
                            (or (not query!0_dummy) a!7))))
      (a!10 (monotonicity (rewrite (= a!7 (not a!1)))
                          (= (or (not query!0_dummy) a!7)
                             (or (not query!0_dummy) (not a!1)))))
      (a!28 (monotonicity (monotonicity (monotonicity (monotonicity a!21 a!22)
                                                      (= a!17 a!23))
                                        (monotonicity (monotonicity a!24 a!25)
                                                      (= a!19 a!26))
                                        (= a!20 a!27))
                          (= (=> query!0_dummy a!20) (=> query!0_dummy a!27))))
      (a!29 (rewrite (= (=> query!0_dummy a!27) (or (not query!0_dummy) a!27))))
      (a!31 (= (or (=> query!0_dummy a!20) |query!0#level_5!142|)
               (or (or (not query!0_dummy) a!27) |query!0#level_5!142|)))
      (a!37 (monotonicity (monotonicity (monotonicity (rewrite a!32)
                                                      (= a!23 a!33))
                                        (monotonicity (rewrite a!34)
                                                      (= a!26 a!35))
                                        (= a!27 a!36))
                          (= (or (not query!0_dummy) a!27)
                             (or (not query!0_dummy) a!36))))
      (a!38 (= (or (or (not query!0_dummy) a!27) |query!0#level_5!142|)
               (or (or (not query!0_dummy) a!36) |query!0#level_5!142|)))
      (a!40 (= (or (or (not query!0_dummy) a!36) |query!0#level_5!142|) a!39))
      (a!41 (= (or (or (not query!0_dummy) a!27) |query!0#level_5!142|) a!39))
      (a!68 (monotonicity (monotonicity (monotonicity (monotonicity a!24 a!25)
                                                      (= a!19 a!26))
                                        (monotonicity (monotonicity a!24 a!65)
                                                      (= a!63 a!66))
                                        (= a!64 a!67))
                          (= (=> query!0_dummy a!64) (=> query!0_dummy a!67))))
      (a!69 (rewrite (= (=> query!0_dummy a!67) (or (not query!0_dummy) a!67))))
      (a!71 (= (or (=> query!0_dummy a!64) |query!0#level_5!142|)
               (or (or (not query!0_dummy) a!67) |query!0#level_5!142|)))
      (a!75 (monotonicity (monotonicity (monotonicity (rewrite a!34)
                                                      (= a!26 a!35))
                                        (monotonicity (rewrite a!72)
                                                      (= a!66 a!73))
                                        (= a!67 a!74))
                          (= (or (not query!0_dummy) a!67)
                             (or (not query!0_dummy) a!74))))
      (a!76 (= (or (or (not query!0_dummy) a!67) |query!0#level_5!142|)
               (or (or (not query!0_dummy) a!74) |query!0#level_5!142|)))
      (a!78 (= (or (or (not query!0_dummy) a!74) |query!0#level_5!142|) a!77))
      (a!79 (= (or (or (not query!0_dummy) a!67) |query!0#level_5!142|) a!77)))
(let ((a!9 (mp (asserted (or (not query!0_dummy) a!3))
               a!8
               (or (not query!0_dummy) a!7)))
      (a!30 (trans a!28
                   a!29
                   (= (=> query!0_dummy a!20) (or (not query!0_dummy) a!27))))
      (a!70 (trans a!68
                   a!69
                   (= (=> query!0_dummy a!64) (or (not query!0_dummy) a!67)))))
(let ((a!11 (unit-resolution (mp a!9 a!10 (or (not query!0_dummy) (not a!1)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!1)))
      (a!42 (trans (monotonicity a!30 a!31)
                   (trans (monotonicity a!37 a!38) (rewrite a!40) a!41)
                   (= (or (=> query!0_dummy a!20) |query!0#level_5!142|) a!39)))
      (a!80 (trans (monotonicity a!70 a!71)
                   (trans (monotonicity a!75 a!76) (rewrite a!78) a!79)
                   (= (or (=> query!0_dummy a!64) |query!0#level_5!142|) a!77))))
(let ((a!12 (unit-resolution (def-axiom a!2)
                             a!11
                             (not (= (select aux!2_n query!0_0_n)
                                     (select aux!1_n query!0_0_n)))))
      (a!14 (symm (unit-resolution a!13
                                   a!11
                                   (= (select aux!3_n query!0_0_n)
                                      (select aux!2_n query!0_0_n)))
                  (= (select aux!2_n query!0_0_n) (select aux!3_n query!0_0_n))))
      (a!16 (symm (unit-resolution a!15
                                   a!11
                                   (= L2_3_0 (select aux!3_n query!0_0_n)))
                  (= (select aux!3_n query!0_0_n) L2_3_0)))
      (a!43 (mp (asserted (or (=> query!0_dummy a!20) |query!0#level_5!142|))
                a!42
                a!39))
      (a!44 (unit-resolution (def-axiom (or a!1 (= L2_4_0 query!0_1_n)))
                             a!11
                             (= L2_4_0 query!0_1_n)))
      (a!47 (unit-resolution (def-axiom (or a!1 (= L2_5_0 query!0_0_n)))
                             a!11
                             (= L2_5_0 query!0_0_n)))
      (a!51 (unit-resolution (def-axiom (or a!1 (= L2_2_0 query!0_0_n)))
                             a!11
                             (= L2_2_0 query!0_0_n)))
      (a!55 (unit-resolution (def-axiom (or a!1 (= L2_0_0 query!0_0_n)))
                             a!11
                             (= L2_0_0 query!0_0_n)))
      (a!81 (mp (asserted (or (=> query!0_dummy a!64) |query!0#level_5!142|))
                a!80
                a!77)))
(let ((a!45 (th-lemma a!44 (>= (+ L2_4_0 (* (- 1) query!0_1_n)) 0)))
      (a!48 (th-lemma a!47 (<= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!52 (th-lemma a!51 (<= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!53 (th-lemma a!47 (>= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!56 (th-lemma a!55 (>= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!58 (th-lemma a!55 (<= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!59 (th-lemma a!51 (>= (+ L2_2_0 (* (- 1) query!0_0_n)) 0))))
(let ((a!49 (th-lemma a!45
                      a!46
                      (unit-resolution (def-axiom (or a!1 a!5)) a!11 a!5)
                      a!48
                      false))
      (a!54 (lemma (th-lemma (hypothesis a!18) a!52 a!53 false)
                   (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!57 (lemma (th-lemma (hypothesis a!33) a!56 a!48 false)
                   (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!60 (th-lemma a!58 a!59 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!82 (lemma (th-lemma (hypothesis a!62) a!59 a!48 false)
                   (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!83 (th-lemma a!56 a!52 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!61 (unit-resolution a!43
                             (lemma a!49 a!50)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!54
                             a!57
                             a!60
                             (asserted (not |query!0#level_5!142|))
                             (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!84 (unit-resolution a!81
                             (lemma a!49 a!50)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!54
                             a!82
                             a!83
                             a!60
                             (asserted (not |query!0#level_5!142|))
                             (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!85 (trans (trans a!14 a!16 (= (select aux!2_n query!0_0_n) L2_3_0))
                   (symm (th-lemma a!61 a!84 (= L2_1_0 L2_3_0))
                         (= L2_3_0 L2_1_0))
                   (= (select aux!2_n query!0_0_n) L2_1_0))))
(let ((a!87 (trans a!85
                   (unit-resolution a!86
                                    a!11
                                    (= L2_1_0 (select aux!4_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!4_n query!0_0_n)))))
(let ((a!89 (trans a!87
                   (unit-resolution a!88
                                    a!11
                                    (= (select aux!4_n query!0_0_n)
                                       (select aux!1_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))))
  (unit-resolution a!12 a!89 false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 5 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_5!142|)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 6 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 6 depth: 6
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  false)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  4386)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 2))
(define-fun L2_1_3 () Int
  2327)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!1207))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!1211))
(define-fun query!0_0_n () Int
  (- 1))
(define-fun L2_3_3 () Int
  1648)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  (- 3))
(define-fun L2_1_2 () Int
  4386)
(define-fun query!0_3_n () Int
  1648)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!1210))
(define-fun L2_3_1 () Int
  1648)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  (- 3))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |query!0#level_8!1203| () Bool
  false)
(define-fun L2_0_2 () Int
  (- 2))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!1209))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!1205))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  2328)
(define-fun |query!0#level_4!80| () Bool
  true)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun |query!0#level_7!853| () Bool
  false)
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!1206))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  true)
(define-fun query!0_4_n () Int
  (- 2))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  4386)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!1208))
(define-fun L2_0_0 () Int
  (- 1))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!1213))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!1204))
(define-fun L2_2_0 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!1212))
(define-fun L2_3_2 () Int
  2328)
(define-fun L2_2_1 () Int
  (- 3))
(define-fun L2_4_0 () Int
  0)
(define-fun L2_1_0 () Int
  2327)
(define-fun k!1207 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 2328
    2328))
(define-fun k!1204 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 2327
    2327))
(define-fun k!1212 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 4386
    4386))
(define-fun k!1209 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 1648
    1648))
(define-fun k!1206 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 2327
    2327))
(define-fun k!1211 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 1648
    1648))
(define-fun k!1208 ((x!0 Int)) Int
  (ite (= x!0 (- 3)) 1648
  (ite (= x!0 (- 1)) 2328
    1648)))
(define-fun k!1205 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 2327
  (ite (= x!0 (- 2)) 4386
    2327)))
(define-fun k!1213 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 2328
    2328))
(define-fun k!1210 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 4386
    4386))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_5_3 L2_0_2))
       (not (<= L2_5_3 L2_2_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 6
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!612_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!1229))
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L2_4_n () Int
  2)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!1231))
(define-fun L2_0_n () Int
  0)
(define-fun spacer_proxy!42 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!1230))
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun spacer_proxy!40 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun spacer_proxy!57 () Bool
  false)
(define-fun L2_1_n () Int
  589)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!1228))
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!1227))
(define-fun L2_3_0 () Int
  590)
(define-fun L1_ext!612_0 () Bool
  false)
(define-fun spacer_proxy!41 () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun spacer_proxy!46 () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!1226))
(define-fun spacer_proxy!43 () Bool
  false)
(define-fun L2_3_n () Int
  590)
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun spacer_proxy!45 () Bool
  false)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun L2_2_0 () Int
  0)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  589)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  2)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!1227 ((x!0 Int)) Int
  (ite (= x!0 0) 589
    589))
(define-fun k!1231 ((x!0 Int)) Int
  (ite (= x!0 0) 590
    590))
(define-fun k!1228 ((x!0 Int)) Int
  (ite (= x!0 0) 590
    590))
(define-fun k!1229 ((x!0 Int)) Int
  (ite (= x!0 0) 590
    590))
(define-fun k!1226 ((x!0 Int)) Int
  (ite (= x!0 0) 589
    589))
(define-fun k!1230 ((x!0 Int)) Int
  (ite (= x!0 0) 589
    589))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0))))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 6
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun L1_4_0 () Int
  2)
(define-fun L1_0_0 () Int
  1)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  589)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  1)
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_4_n () Int
  2)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!1238))
(define-fun spacer_proxy!24 () Bool
  true)
(define-fun L1_ext!612_0 () Bool
  true)
(define-fun L1_1_0 () Int
  589)
(define-fun L1_5_0 () Int
  2)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!1241))
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!1240))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  590)
(define-fun L2_0_n () Int
  1)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  true)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  true)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!1239))
(define-fun L2_3_n () Int
  590)
(define-fun spacer_proxy!21 () Bool
  true)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_2_n () Int
  1)
(define-fun spacer_proxy!23 () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun L2_tr0 () Bool
  true)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun k!1239 ((x!0 Int)) Int
  (ite (= x!0 1) 589
    589))
(define-fun k!1240 ((x!0 Int)) Int
  (ite (= x!0 1) 590
    590))
(define-fun k!1241 ((x!0 Int)) Int
  (ite (= x!0 1) 590
    590))
(define-fun k!1238 ((x!0 Int)) Int
  (ite (= x!0 1) 589
    589))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and (<= L2_4_n L1_5_0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (= L1_2_0 1) (<= L1_4_0 L1_5_0) (= L1_0_0 1) a!1 (not (<= L1_4_0 1))))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 3 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 3 depth: 6
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L1_ext!612_1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L1_tr0:
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
L1_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 00
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L1_0_1 () Int
  1)
(define-fun spacer_proxy!2 () Bool
  false)
(define-fun L1_ext!612_1 () Bool
  true)
(define-fun L1_0_0 () Int
  1)
(define-fun aux!30_n () (Array Int Int)
  (_ as-array k!1253))
(define-fun |L1#level_0!37| () Bool
  true)
(define-fun spacer_proxy!97 () Bool
  false)
(define-fun |L1#level_2!113| () Bool
  true)
(define-fun spacer_proxy!100 () Bool
  false)
(define-fun aux!34_n () (Array Int Int)
  (_ as-array k!1249))
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun |L1#level_7!439| () Bool
  false)
(define-fun L1_ext0_n () Bool
  false)
(define-fun spacer_proxy!95 () Bool
  false)
(define-fun aux!29_n () (Array Int Int)
  (_ as-array k!1248))
(define-fun L1_3_0 () Int
  1109)
(define-fun L1_ext!612_n () Bool
  false)
(define-fun L1_3_1 () Int
  1110)
(define-fun L1_4_1 () Int
  3)
(define-fun spacer_proxy!42 () Bool
  true)
(define-fun spacer_proxy!5 () Bool
  false)
(define-fun aux!36_n () (Array Int Int)
  (_ as-array k!1250))
(define-fun L1_0_n () Int
  1)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun spacer_proxy!99 () Bool
  false)
(define-fun L1_4_0 () Int
  3)
(define-fun spacer_proxy!40 () Bool
  true)
(define-fun aux!31_n () (Array Int Int)
  (_ as-array k!1247))
(define-fun L1_2_n () Int
  1)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L1_tr1 () Bool
  true)
(define-fun |L1#level_1!112| () Bool
  true)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun spacer_proxy!101 () Bool
  false)
(define-fun L1_2_0 () Int
  2)
(define-fun |L1#reach_case_0_1| () Bool
  true)
(define-fun |L1#level_3!130| () Bool
  false)
(define-fun spacer_proxy!41 () Bool
  true)
(define-fun L1_ext!612_0 () Bool
  true)
(define-fun spacer_proxy!93 () Bool
  false)
(define-fun |L1#level_8!855| () Bool
  false)
(define-fun L1_5_0 () Int
  2)
(define-fun L1_1_0 () Int
  1108)
(define-fun spacer_proxy!52 () Bool
  false)
(define-fun spacer_proxy!9 () Bool
  false)
(define-fun L1_5_1 () Int
  2)
(define-fun spacer_proxy!39 () Bool
  true)
(define-fun spacer_proxy!18 () Bool
  false)
(define-fun spacer_proxy!49 () Bool
  false)
(define-fun L1_2_1 () Int
  1)
(define-fun aux!35_n () (Array Int Int)
  (_ as-array k!1251))
(define-fun L1_5_n () Int
  3)
(define-fun |L1#level_5!144| () Bool
  false)
(define-fun spacer_proxy!60 () Bool
  false)
(define-fun L1_1_n () Int
  1108)
(define-fun |L1#level_4!141| () Bool
  false)
(define-fun spacer_proxy!43 () Bool
  true)
(define-fun L1_4_n () Int
  3)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun |L1#level_6!436| () Bool
  false)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun spacer_proxy!56 () Bool
  false)
(define-fun spacer_proxy!92 () Bool
  false)
(define-fun L1_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L1_3_n () Int
  1110)
(define-fun aux!33_n () (Array Int Int)
  (_ as-array k!1252))
(define-fun L1_1_1 () Int
  1108)
(define-fun aux!32_n () (Array Int Int)
  (_ as-array k!1246))
(define-fun k!1247 ((x!0 Int)) Int
  (ite (= x!0 1) 1108
    1108))
(define-fun k!1252 ((x!0 Int)) Int
  (ite (= x!0 2) 1109
    1109))
(define-fun k!1249 ((x!0 Int)) Int
  (ite (= x!0 1) 1108
    1108))
(define-fun k!1246 ((x!0 Int)) Int
  (ite (= x!0 2) 1109
  (ite (= x!0 1) 1110
    1109)))
(define-fun k!1251 ((x!0 Int)) Int
  (ite (= x!0 1) 1110
    1110))
(define-fun k!1248 ((x!0 Int)) Int
  (ite (= x!0 1) 1108
    1108))
(define-fun k!1253 ((x!0 Int)) Int
  (ite (= x!0 1) 1110
    1110))
(define-fun k!1250 ((x!0 Int)) Int
  (ite (= x!0 1) 1108
    1108))

Transition:
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))))
Phi:
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!2 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (not (<= L1_4_n L1_2_0))
       (not (<= L1_4_n 1))
       (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!2
       (= L1_2_n 1)
       (= L1_0_n 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L1_1_1 (* (- 1) L1_3_1))))))
  (and (not (<= L1_2_0 1))
       (not (= L1_2_0 1))
       (not (<= L1_4_1 L1_2_0))
       (not (<= L1_4_1 1))
       (= L1_0_0 1)
       (= L1_4_0 L1_4_1)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 1)
       (= L1_2_1 1)
       (= L1_5_1 L1_2_0)
       (= (+ (* (- 1) L1_1_1) L1_1_0) 0)
       (<= (+ L1_4_1 (* (- 1) L1_2_0)) 1)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 2 depth: 0
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (not (<= L1_2_n 1))
       (not (= L1_2_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 2 depth: 6
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (not (<= L1_2_n 1))
       (not (= L1_2_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L1_ext!612_1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L1_tr0:
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
L1_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 00
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!104 () Bool
  false)
(define-fun L1_0_1 () Int
  1)
(define-fun spacer_proxy!2 () Bool
  false)
(define-fun L1_ext!612_1 () Bool
  true)
(define-fun L1_0_0 () Int
  1)
(define-fun aux!30_n () (Array Int Int)
  (_ as-array k!1270))
(define-fun |L1#level_0!37| () Bool
  true)
(define-fun |L1#level_2!113| () Bool
  false)
(define-fun aux!34_n () (Array Int Int)
  (_ as-array k!1266))
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun |L1#level_7!439| () Bool
  false)
(define-fun spacer_proxy!102 () Bool
  false)
(define-fun L1_ext0_n () Bool
  false)
(define-fun aux!29_n () (Array Int Int)
  (_ as-array k!1265))
(define-fun spacer_proxy!53 () Bool
  true)
(define-fun L1_3_0 () Int
  1108)
(define-fun L1_ext!612_n () Bool
  false)
(define-fun L1_3_1 () Int
  1109)
(define-fun L1_4_1 () Int
  3)
(define-fun spacer_proxy!42 () Bool
  true)
(define-fun spacer_proxy!5 () Bool
  false)
(define-fun aux!36_n () (Array Int Int)
  (_ as-array k!1267))
(define-fun L1_0_n () Int
  1)
(define-fun spacer_proxy!99 () Bool
  false)
(define-fun L1_4_0 () Int
  3)
(define-fun spacer_proxy!40 () Bool
  false)
(define-fun aux!31_n () (Array Int Int)
  (_ as-array k!1264))
(define-fun L1_2_n () Int
  2)
(define-fun spacer_proxy!57 () Bool
  true)
(define-fun L1_tr1 () Bool
  true)
(define-fun |L1#level_1!112| () Bool
  true)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun L1_2_0 () Int
  1)
(define-fun |L1#reach_case_0_1| () Bool
  true)
(define-fun |L1#level_3!130| () Bool
  false)
(define-fun L1_ext!612_0 () Bool
  true)
(define-fun spacer_proxy!93 () Bool
  true)
(define-fun L1_5_0 () Int
  1)
(define-fun |L1#level_8!855| () Bool
  false)
(define-fun L1_1_0 () Int
  1108)
(define-fun spacer_proxy!52 () Bool
  true)
(define-fun spacer_proxy!9 () Bool
  false)
(define-fun L1_5_1 () Int
  1)
(define-fun spacer_proxy!39 () Bool
  true)
(define-fun spacer_proxy!18 () Bool
  false)
(define-fun spacer_proxy!49 () Bool
  false)
(define-fun L1_2_1 () Int
  2)
(define-fun aux!35_n () (Array Int Int)
  (_ as-array k!1268))
(define-fun L1_5_n () Int
  2)
(define-fun |L1#level_5!144| () Bool
  false)
(define-fun L1_1_n () Int
  1108)
(define-fun |L1#level_4!141| () Bool
  false)
(define-fun spacer_proxy!43 () Bool
  true)
(define-fun L1_4_n () Int
  3)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun |L1#level_6!436| () Bool
  false)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun spacer_proxy!56 () Bool
  true)
(define-fun spacer_proxy!92 () Bool
  true)
(define-fun L1_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L1_3_n () Int
  1109)
(define-fun aux!33_n () (Array Int Int)
  (_ as-array k!1269))
(define-fun L1_1_1 () Int
  1108)
(define-fun aux!32_n () (Array Int Int)
  (_ as-array k!1263))
(define-fun k!1263 ((x!0 Int)) Int
  (ite (= x!0 2) 1109
  (ite (= x!0 1) 1108
    1109)))
(define-fun k!1268 ((x!0 Int)) Int
  (ite (= x!0 2) 1109
    1109))
(define-fun k!1265 ((x!0 Int)) Int
  (ite (= x!0 1) 1108
    1108))
(define-fun k!1270 ((x!0 Int)) Int
  (ite (= x!0 2) 1109
    1109))
(define-fun k!1267 ((x!0 Int)) Int
  (ite (= x!0 1) 1108
    1108))
(define-fun k!1264 ((x!0 Int)) Int
  (ite (= x!0 1) 1108
    1108))
(define-fun k!1269 ((x!0 Int)) Int
  (ite (= x!0 1) 1108
    1108))
(define-fun k!1266 ((x!0 Int)) Int
  (ite (= x!0 1) 1108
    1108))

Transition:
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))))
Phi:
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (not (<= L1_2_n 1))
       (not (= L1_2_n 1))))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!2 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (not (<= L1_4_n L1_2_0))
       (< 1 L1_2_n)
       (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!2
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (not (<= L1_2_n 1))))
Projected Implicant
(let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_2_1)) 0))))
  (and (not (<= L1_2_1 L1_2_0))
       (= L1_2_0 1)
       (not (<= L1_2_1 1))
       (not (<= L1_4_1 L1_2_0))
       (= L1_0_0 1)
       (= L1_4_0 L1_4_1)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 1)
       (= L1_5_1 L1_2_0)
       (= (+ (* (- 1) L1_1_1) L1_1_0) 0)
       (not (<= L1_4_1 1))
       (<= (+ L1_4_1 (* (- 1) L1_2_1)) 1)
       a!1
       (= (+ L1_2_0 (* (- 1) L1_2_1)) (- 1))))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 1))))
  (and (not (<= L1_2_n 0))
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 2)
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 6
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 1))))
  (and (not (<= L1_2_n 0))
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 2)
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!612_0)
(not L1_ext!612_1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!612_0)
(not L1_ext!612_1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L1_tr0:
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
L1_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 1 rused: 11
------------------------------------------------
-------- [spacer] mk_reach_fact ../src/muz/spacer/spacer_context.cpp:3268 ---------
Reach fact, before QE:
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (= L1_3_1 (select aux!24_1 L1_2_1))
       (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))
       (= L1_5_0 0)
       (= (select aux!26_0 L1_2_0) (select aux!24_0 L1_2_0))
       (= (select aux!28_0 L1_0_0) (select aux!25_0 L1_0_0))
       (= (select aux!27_0 L1_2_0) (select aux!26_0 L1_2_0))
       (= (select aux!25_0 L1_0_0) (select aux!23_0 L1_0_0))
       (= L1_1_0 (select aux!23_0 L1_0_0))
       (= L1_3_0 (select aux!24_0 L1_2_0))
       (= L1_5_1 0)
       (= (select aux!26_1 L1_2_1) (select aux!24_1 L1_2_1))
       (= (select aux!28_1 L1_0_1) (select aux!25_1 L1_0_1))
       (= (select aux!27_1 L1_2_1) (select aux!26_1 L1_2_1))
       (= (select aux!25_1 L1_0_1) (select aux!23_1 L1_0_1))
       (= L1_1_1 (select aux!23_1 L1_0_1))))
Vars:
L1_0_0
L1_1_0
L1_2_0
L1_3_0
L1_4_0
L1_5_0
aux!23_0
aux!24_0
aux!25_0
aux!26_0
aux!27_0
aux!28_0
L1_0_1
L1_1_1
L1_2_1
L1_3_1
L1_4_1
L1_5_1
aux!23_1
aux!24_1
aux!25_1
aux!26_1
aux!27_1
aux!28_1
aux!29_n
aux!30_n
aux!31_n
aux!32_n
aux!33_n
aux!34_n
aux!35_n
aux!36_n
------------------------------------------------
-------- [spacer] mk_reach_fact ../src/muz/spacer/spacer_context.cpp:3285 ---------
Reach fact, after QE project:
(and (not (<= L1_2_n (+ (- 1) L1_5_n)))
     (not (= L1_5_n (+ 1 L1_0_n)))
     (= 1 L1_5_n)
     (not (<= L1_4_n (+ (- 1) L1_5_n))))
Vars:
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:504 ---------
add_reach_fact: L1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
     (not (= L1_5_n (+ 1 L1_0_n)))
     (= 1 L1_5_n)
     (not (<= L1_4_n (+ (- 1) L1_5_n))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                (not (= L1_5_n (+ 1 L1_0_n)))
                (= 1 L1_5_n)
                (not (<= L1_4_n (+ (- 1) L1_5_n))))))
  (or (not L1_ext!612_n) a!1 L1_ext!1321_n))
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:540 ---------
updating reach ctx: (let ((a!1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                (not (= L1_5_n (+ 1 L1_0_n)))
                (= 1 L1_5_n)
                (not (<= L1_4_n (+ (- 1) L1_5_n))))))
  (or (not L1_ext!612_n) a!1 L1_ext!1321_n))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_0 (+ (- 1) L1_5_0)))
                (not (= L1_5_0 (+ 1 L1_0_0)))
                (= 1 L1_5_0)
                (not (<= L1_4_0 (+ (- 1) L1_5_0))))))
  (=> L2_tr0 (or (not L1_ext!612_0) a!1 L1_ext!1321_0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_0 (+ (- 1) L1_5_0)))
                (not (= L1_5_0 (+ 1 L1_0_0)))
                (= 1 L1_5_0)
                (not (<= L1_4_0 (+ (- 1) L1_5_0))))))
  (=> L1_tr1 (or (not L1_ext!612_0) a!1 L1_ext!1321_0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_1 (+ (- 1) L1_5_1)))
                (not (= L1_5_1 (+ 1 L1_0_1)))
                (= 1 L1_5_1)
                (not (<= L1_4_1 (+ (- 1) L1_5_1))))))
  (=> L1_tr1 (or (not L1_ext!612_1) a!1 L1_ext!1321_1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= L1_5_n 1)
       (not (<= L1_2_n 1))
       (= L1_2_n 2)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 6
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= L1_5_n 1)
       (not (<= L1_2_n 1))
       (= L1_2_n 2)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1321_0)
(not L1_ext!1321_1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1321_0)
(not L1_ext!1321_1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L1_tr0:
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
L1_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 1 rused: 11
------------------------------------------------
-------- [spacer] mk_reach_fact ../src/muz/spacer/spacer_context.cpp:3268 ---------
Reach fact, before QE:
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (= L1_3_1 (select aux!24_1 L1_2_1))
       (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))
       (= L1_5_0 0)
       (= (select aux!26_0 L1_2_0) (select aux!24_0 L1_2_0))
       (= (select aux!28_0 L1_0_0) (select aux!25_0 L1_0_0))
       (= (select aux!27_0 L1_2_0) (select aux!26_0 L1_2_0))
       (= (select aux!25_0 L1_0_0) (select aux!23_0 L1_0_0))
       (= L1_1_0 (select aux!23_0 L1_0_0))
       (= L1_3_0 (select aux!24_0 L1_2_0))
       (= L1_5_1 0)
       (= (select aux!26_1 L1_2_1) (select aux!24_1 L1_2_1))
       (= (select aux!28_1 L1_0_1) (select aux!25_1 L1_0_1))
       (= (select aux!27_1 L1_2_1) (select aux!26_1 L1_2_1))
       (= (select aux!25_1 L1_0_1) (select aux!23_1 L1_0_1))
       (= L1_1_1 (select aux!23_1 L1_0_1))))
Vars:
L1_0_0
L1_1_0
L1_2_0
L1_3_0
L1_4_0
L1_5_0
aux!23_0
aux!24_0
aux!25_0
aux!26_0
aux!27_0
aux!28_0
L1_0_1
L1_1_1
L1_2_1
L1_3_1
L1_4_1
L1_5_1
aux!23_1
aux!24_1
aux!25_1
aux!26_1
aux!27_1
aux!28_1
aux!29_n
aux!30_n
aux!31_n
aux!32_n
aux!33_n
aux!34_n
aux!35_n
aux!36_n
------------------------------------------------
-------- [spacer] mk_reach_fact ../src/muz/spacer/spacer_context.cpp:3285 ---------
Reach fact, after QE project:
(and (not (<= L1_2_n (+ (- 1) L1_5_n)))
     (not (= L1_5_n (+ 1 L1_0_n)))
     (= 1 L1_5_n)
     (not (<= L1_4_n (+ (- 1) L1_5_n))))
Vars:
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:504 ---------
add_reach_fact: L1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
     (not (= L1_5_n (+ 1 L1_0_n)))
     (= 1 L1_5_n)
     (not (<= L1_4_n (+ (- 1) L1_5_n))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:2789 ---------
is-reachable: L1 level: 2 depth: 0
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (not (<= L1_2_n 1))
       (not (= L1_2_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 4294967295 depth: 6
(let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_2_n)) 0))))
  (and (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_2_n)) 1)
       a!1
       (= (+ L1_5_n (* (- 1) L1_2_n)) 0)
       (not (<= L1_2_n 1))
       (not (= L1_2_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1321_0)
(not L1_ext!1321_1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1321_0)
(not L1_ext!1321_1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L1_tr0:
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
L1_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 1 rused: 11
------------------------------------------------
-------- [spacer] mk_reach_fact ../src/muz/spacer/spacer_context.cpp:3268 ---------
Reach fact, before QE:
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (not (<= L1_4_1 (+ (- 1) L1_5_1)))
       (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))
       (not (<= L1_2_0 (+ (- 1) L1_5_0)))
       (< L1_5_0 (+ 1 L1_0_0))
       (= 1 L1_5_0)
       (not (<= L1_4_0 (+ (- 1) L1_5_0)))
       (not (<= L1_2_1 (+ (- 1) L1_5_1)))
       (< L1_5_1 (+ 1 L1_0_1))
       (= 1 L1_5_1)))
Vars:
L1_0_0
L1_1_0
L1_2_0
L1_3_0
L1_4_0
L1_5_0
L1_0_1
L1_1_1
L1_2_1
L1_3_1
L1_4_1
L1_5_1
aux!29_n
aux!30_n
aux!31_n
aux!32_n
aux!33_n
aux!34_n
aux!35_n
aux!36_n
------------------------------------------------
-------- [spacer] mk_reach_fact ../src/muz/spacer/spacer_context.cpp:3285 ---------
Reach fact, after QE project:
(and (not (<= L1_2_n (+ (- 1) L1_5_n)))
     (= L1_5_n (+ 1 L1_0_n))
     (not (<= L1_4_n 0))
     (= 2 L1_5_n)
     (not (<= L1_4_n (+ (- 1) L1_5_n)))
     (not (<= L1_5_n 1))
     (not (<= L1_0_n 0))
     (not (<= L1_2_n 0)))
Vars:
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:504 ---------
add_reach_fact: L1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
     (= L1_5_n (+ 1 L1_0_n))
     (not (<= L1_4_n 0))
     (= 2 L1_5_n)
     (not (<= L1_4_n (+ (- 1) L1_5_n)))
     (not (<= L1_5_n 1))
     (not (<= L1_0_n 0))
     (not (<= L1_2_n 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                (= L1_5_n (+ 1 L1_0_n))
                (not (<= L1_4_n 0))
                (= 2 L1_5_n)
                (not (<= L1_4_n (+ (- 1) L1_5_n)))
                (not (<= L1_5_n 1))
                (not (<= L1_0_n 0))
                (not (<= L1_2_n 0)))))
  (or (not L1_ext!1321_n) a!1 L1_ext!1380_n))
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:540 ---------
updating reach ctx: (let ((a!1 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                (= L1_5_n (+ 1 L1_0_n))
                (not (<= L1_4_n 0))
                (= 2 L1_5_n)
                (not (<= L1_4_n (+ (- 1) L1_5_n)))
                (not (<= L1_5_n 1))
                (not (<= L1_0_n 0))
                (not (<= L1_2_n 0)))))
  (or (not L1_ext!1321_n) a!1 L1_ext!1380_n))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_0 (+ (- 1) L1_5_0)))
                (= L1_5_0 (+ 1 L1_0_0))
                (not (<= L1_4_0 0))
                (= 2 L1_5_0)
                (not (<= L1_4_0 (+ (- 1) L1_5_0)))
                (not (<= L1_5_0 1))
                (not (<= L1_0_0 0))
                (not (<= L1_2_0 0)))))
  (=> L2_tr0 (or (not L1_ext!1321_0) a!1 L1_ext!1380_0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_0 (+ (- 1) L1_5_0)))
                (= L1_5_0 (+ 1 L1_0_0))
                (not (<= L1_4_0 0))
                (= 2 L1_5_0)
                (not (<= L1_4_0 (+ (- 1) L1_5_0)))
                (not (<= L1_5_0 1))
                (not (<= L1_0_0 0))
                (not (<= L1_2_0 0)))))
  (=> L1_tr1 (or (not L1_ext!1321_0) a!1 L1_ext!1380_0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (not (<= L1_2_1 (+ (- 1) L1_5_1)))
                (= L1_5_1 (+ 1 L1_0_1))
                (not (<= L1_4_1 0))
                (= 2 L1_5_1)
                (not (<= L1_4_1 (+ (- 1) L1_5_1)))
                (not (<= L1_5_1 1))
                (not (<= L1_0_1 0))
                (not (<= L1_2_1 0)))))
  (=> L1_tr1 (or (not L1_ext!1321_1) a!1 L1_ext!1380_1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:2789 ---------
is-reachable: L1 level: 2 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!2 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (and a!1
       a!2
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 1)
       (not (= L1_5_n 1))
       (not (<= L1_5_n 1))
       (= L1_5_n 2)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 4294967295 depth: 6
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!2 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (and a!1
       a!2
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 1)
       (not (= L1_5_n 1))
       (not (<= L1_5_n 1))
       (= L1_5_n 2)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L1_ext!1380_1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 2 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!2 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (and a!1
       a!2
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 1)
       (not (= L1_5_n 1))
       (not (<= L1_5_n 1))
       (= L1_5_n 2)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 2 depth: 6
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!2 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (and a!1
       a!2
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 1)
       (not (= L1_5_n 1))
       (not (<= L1_5_n 1))
       (= L1_5_n 2)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L1_ext!1380_1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!2 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!5 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!9 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!10 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!11 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!17 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!18 (= (<= L1_2_n (+ (- 1) L1_5_n))
               (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!19 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!21 (= (= L1_5_n (+ 1 L1_0_n)) (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!22 (= (<= L1_4_n (+ (- 1) L1_5_n))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!23 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!29 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!32 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (not (= L1_5_n (+ 1 L1_0_n)))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!38 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!41 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (not (<= L1_4_n 0))
                 (= 2 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!48 (unit-resolution (asserted (or (not spacer_proxy!40) (<= L1_2_n 1)))
                             (asserted spacer_proxy!40)
                             (<= L1_2_n 1)))
      (a!49 (asserted (or (not spacer_proxy!131) (not (<= L1_5_n 1)))))
      (a!50 (not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)))
      (a!54 (asserted (or (not spacer_proxy!130) (not (= L1_5_n 1)))))
      (a!59 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!60 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!63 (or (not spacer_proxy!61) (<= (+ L1_4_n (* (- 1) L1_5_n)) 1)))
      (a!65 (asserted (or (not spacer_proxy!39) (not (<= L1_4_n 1)))))
      (a!72 (unit-resolution (asserted (or (not spacer_proxy!128) (<= L1_5_n 2)))
                             (asserted spacer_proxy!128)
                             (<= L1_5_n 2)))
      (a!73 (not (>= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!77 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!79 (unit-resolution (asserted (or (not spacer_proxy!41) (>= L1_2_n 1)))
                             (asserted spacer_proxy!41)
                             (>= L1_2_n 1)))
      (a!93 (unit-resolution (asserted (or (not spacer_proxy!43) (>= L1_0_n 1)))
                             (asserted spacer_proxy!43)
                             (>= L1_0_n 1)))
      (a!94 (unit-resolution (asserted (or (not spacer_proxy!42) (<= L1_0_n 1)))
                             (asserted spacer_proxy!42)
                             (<= L1_0_n 1)))
      (a!101 (not (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0))))
(let ((a!3 (or (not (= L1_0_0 L1_0_n))
               (not (= L1_4_0 L1_4_n))
               (not (= L1_5_0 L1_2_0))
               (not (= L1_0_1 L1_0_n))
               (not (= L1_2_1 L1_2_n))
               (not (= L1_4_1 L1_4_n))
               (not (= L1_5_1 L1_2_0))
               (not (= a!1 (select aux!29_n L1_0_n)))
               (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
               (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
               (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
               (not (= L1_3_1 (select aux!35_n L1_2_n)))
               (not (= L1_1_1 (select aux!36_n L1_0_n)))
               (not (= L1_3_0 (select aux!33_n L1_2_0)))
               a!2
               (not (= L1_1_n (select aux!29_n L1_0_n)))
               (not (= L1_1_0 (select aux!34_n L1_0_n)))
               (not (= L1_3_n (select aux!30_n L1_2_n)))
               (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!6 (and (= L1_0_0 L1_0_n)
                (= L1_4_0 L1_4_n)
                (= L1_5_0 L1_2_0)
                (= L1_0_1 L1_0_n)
                (= L1_2_1 L1_2_n)
                (= L1_4_1 L1_4_n)
                (= L1_5_1 L1_2_0)
                a!5
                (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                (= L1_3_1 (select aux!35_n L1_2_n))
                (= L1_1_1 (select aux!36_n L1_0_n))
                (= L1_3_0 (select aux!33_n L1_2_0))
                (= L1_5_n (+ 1 L1_2_0))
                (= L1_1_n (select aux!29_n L1_0_n))
                (= L1_1_0 (select aux!34_n L1_0_n))
                (= L1_3_n (select aux!30_n L1_2_n))
                (not (<= L1_4_n L1_2_0))))
      (a!7 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              a!1))
      (a!12 (monotonicity (rewrite a!10) (= (not (<= L1_4_n L1_2_0)) a!11)))
      (a!13 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!1 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!11))
      (a!20 (= (not (<= L1_2_n (+ (- 1) L1_5_n))) a!19))
      (a!24 (= (not (<= L1_4_n (+ (- 1) L1_5_n))) a!23))
      (a!25 (and a!19 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)) (= L1_5_n 1) a!23))
      (a!30 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!29
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!33 (= (not (= L1_5_n (+ 1 L1_0_n))) a!29))
      (a!35 (or (not L1_ext!612_n)
                (and a!19 a!29 (= L1_5_n 1) a!23)
                L1_ext!1321_n))
      (a!39 (rewrite (= (and a!19 a!29 (= L1_5_n 1) a!23) (not a!38))))
      (a!42 (and a!19
                 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                 (not (<= L1_4_n 0))
                 (= L1_5_n 2)
                 a!23
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!46 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!29
                (<= L1_4_n 0)
                (not (= L1_5_n 2))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
                (<= L1_5_n 1)
                (<= L1_0_n 0)
                (<= L1_2_n 0)))
      (a!51 (th-lemma a!48
                      (unit-resolution a!49
                                       (asserted spacer_proxy!131)
                                       (not (<= L1_5_n 1)))
                      a!50))
      (a!55 (unit-resolution (def-axiom (or a!38 (= L1_5_n 1)))
                             (unit-resolution a!54
                                              (asserted spacer_proxy!130)
                                              (not (= L1_5_n 1)))
                             a!38))
      (a!61 (monotonicity (rewrite (= a!59 (not a!60)))
                          (= (or (not L1_tr0) a!59)
                             (or (not L1_tr0) (not a!60)))))
      (a!64 (unit-resolution (asserted a!63)
                             (asserted spacer_proxy!61)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 1)))
      (a!76 (def-axiom (or (not (= L1_0_n L1_2_0))
                           (= (select aux!32_n L1_2_0) a!1))))
      (a!78 (unit-resolution (asserted (or (not spacer_proxy!0) a!77))
                             (asserted spacer_proxy!0)
                             a!77))
      (a!91 (= (not (= L1_3_n L1_1_n)) (not (= (select aux!32_n L1_2_0) a!1))))
      (a!95 (trans (monotonicity (th-lemma a!93 a!94 (= L1_0_n 1))
                                 (= (= L1_0_n L1_2_0) (= 1 L1_2_0)))
                   (commutativity (= (= 1 L1_2_0) (= L1_2_0 1)))
                   (= (= L1_0_n L1_2_0) (= L1_2_0 1)))))
(let ((a!4 (or a!3 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!8 (monotonicity (rewrite a!7) (= a!5 (= a!1 (select aux!29_n L1_0_n)))))
      (a!16 (monotonicity (rewrite (= a!13 (not a!3)))
                          (= (or (not L1_tr1) a!13) (or (not L1_tr1) (not a!3)))))
      (a!26 (monotonicity (monotonicity (rewrite a!18) a!20)
                          (rewrite a!21)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!22) a!24)
                          (= a!17 a!25)))
      (a!31 (monotonicity (rewrite (= a!25 (not a!30)))
                          (= (or (not L1_ext0_n) a!25 L1_ext!612_n)
                             (or (not L1_ext0_n) (not a!30) L1_ext!612_n))))
      (a!34 (monotonicity (monotonicity (rewrite a!18) a!20)
                          (monotonicity (rewrite a!21) a!33)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!22) a!24)
                          (= a!32 (and a!19 a!29 (= L1_5_n 1) a!23))))
      (a!40 (monotonicity a!39
                          (= a!35
                             (or (not L1_ext!612_n) (not a!38) L1_ext!1321_n))))
      (a!43 (monotonicity (monotonicity (rewrite a!18) a!20)
                          (rewrite a!21)
                          (rewrite (= (= 2 L1_5_n) (= L1_5_n 2)))
                          (monotonicity (rewrite a!22) a!24)
                          (= a!41 a!42)))
      (a!47 (monotonicity (rewrite (= a!42 (not a!46)))
                          (= (or (not L1_ext!1321_n) a!42 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) (not a!46) L1_ext!1380_n))))
      (a!52 (th-lemma a!51 (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!57 (unit-resolution (def-axiom (or a!30 (= L1_5_n 1)))
                             (unit-resolution a!54
                                              (asserted spacer_proxy!130)
                                              (not (= L1_5_n 1)))
                             a!30))
      (a!62 (mp (asserted (or (not L1_tr0) a!59))
                a!61
                (or (not L1_tr0) (not a!60))))
      (a!66 (th-lemma a!64
                      (unit-resolution a!65
                                       (asserted spacer_proxy!39)
                                       (not (<= L1_4_n 1)))
                      (not (<= L1_5_n 0))))
      (a!81 (def-axiom (or a!3
                           (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))))
      (a!83 (def-axiom (or a!3 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!85 (def-axiom (or a!3 (= a!1 (select aux!29_n L1_0_n)))))
      (a!86 (def-axiom (or a!3 (= L1_1_n (select aux!29_n L1_0_n))))))
(let ((a!14 (monotonicity (monotonicity a!8 (rewrite a!9) a!12 (= a!6 a!13))
                          (= (or (not L1_tr1) a!6) (or (not L1_tr1) a!13))))
      (a!27 (monotonicity a!26
                          (= (or (not L1_ext0_n) a!17 L1_ext!612_n)
                             (or (not L1_ext0_n) a!25 L1_ext!612_n))))
      (a!36 (monotonicity a!34
                          (= (or (not L1_ext!612_n) a!32 L1_ext!1321_n) a!35)))
      (a!44 (monotonicity a!43
                          (= (or (not L1_ext!1321_n) a!41 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) a!42 L1_ext!1380_n))))
      (a!67 (lemma (th-lemma (hypothesis (= L1_5_n 0)) a!66 false)
                   (not (= L1_5_n 0)))))
(let ((a!15 (mp (asserted (or (not L1_tr1) a!6)) a!14 (or (not L1_tr1) a!13)))
      (a!28 (mp (asserted (or (not L1_ext0_n) a!17 L1_ext!612_n))
                a!27
                (or (not L1_ext0_n) a!25 L1_ext!612_n)))
      (a!37 (mp (asserted (or (not L1_ext!612_n) a!32 L1_ext!1321_n)) a!36 a!35))
      (a!45 (mp (asserted (or (not L1_ext!1321_n) a!41 L1_ext!1380_n))
                a!44
                (or (not L1_ext!1321_n) a!42 L1_ext!1380_n)))
      (a!68 (unit-resolution (def-axiom (or a!60 (= L1_5_n 0))) a!67 a!60)))
(let ((a!53 (unit-resolution (mp a!45
                                 a!47
                                 (or (not L1_ext!1321_n)
                                     (not a!46)
                                     L1_ext!1380_n))
                             (unit-resolution (def-axiom (or a!46 a!19))
                                              a!52
                                              a!46)
                             (asserted (not L1_ext!1380_n))
                             (not L1_ext!1321_n))))
(let ((a!56 (unit-resolution (mp a!37
                                 a!40
                                 (or (not L1_ext!612_n)
                                     (not a!38)
                                     L1_ext!1321_n))
                             a!53
                             a!55
                             (not L1_ext!612_n))))
(let ((a!58 (unit-resolution (mp a!28
                                 a!31
                                 (or (not L1_ext0_n) (not a!30) L1_ext!612_n))
                             a!56
                             a!57
                             (not L1_ext0_n))))
(let ((a!69 (unit-resolution (mp a!15 a!16 (or (not L1_tr1) (not a!3)))
                             (unit-resolution (asserted (or L1_ext0_n
                                                            L1_tr0
                                                            L1_tr1))
                                              a!58
                                              (unit-resolution a!62
                                                               a!68
                                                               (not L1_tr0))
                                              L1_tr1)
                             (not a!3))))
(let ((a!70 (unit-resolution (def-axiom a!4)
                             a!69
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!74 (unit-resolution (def-axiom (or a!3 (= L1_5_1 L1_2_0)))
                             a!69
                             (= L1_5_1 L1_2_0)))
      (a!84 (symm (unit-resolution a!83
                                   a!69
                                   (= L1_3_n (select aux!30_n L1_2_n)))
                  (= (select aux!30_n L1_2_n) L1_3_n)))
      (a!87 (symm (unit-resolution a!86
                                   a!69
                                   (= L1_1_n (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) L1_1_n))))
(let ((a!71 (th-lemma a!70 (<= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!75 (lemma (th-lemma (hypothesis a!73)
                             (symm a!74 (= L1_2_0 L1_5_1))
                             false)
                   (>= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!80 (trans (trans (symm a!74 (= L1_2_0 L1_5_1))
                          (hypothesis (= L1_5_1 1))
                          (= L1_2_0 1))
                   (symm (th-lemma a!48 a!79 (= L1_2_n 1)) (= 1 L1_2_n))
                   (= L1_2_0 L1_2_n)))
      (a!88 (trans (unit-resolution a!85 a!69 (= a!1 (select aux!29_n L1_0_n)))
                   a!87
                   (= a!1 L1_1_n)))
      (a!96 (trans (monotonicity a!74 (= (= L1_5_1 1) (= L1_2_0 1)))
                   (symm a!95 (= (= L1_2_0 1) (= L1_0_n L1_2_0)))
                   (= (= L1_5_1 1) (= L1_0_n L1_2_0))))
      (a!99 (th-lemma a!70 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1)))))
(let ((a!82 (trans (monotonicity a!80
                                 (= (select aux!32_n L1_2_0)
                                    (select aux!32_n L1_2_n)))
                   (unit-resolution a!81
                                    a!69
                                    (= (select aux!32_n L1_2_n)
                                       (select aux!30_n L1_2_n)))
                   (= (select aux!32_n L1_2_0) (select aux!30_n L1_2_n))))
      (a!100 (th-lemma a!99
                       (unit-resolution a!49
                                        (asserted spacer_proxy!131)
                                        (not (<= L1_5_n 1)))
                       (not (<= L1_2_0 0)))))
(let ((a!89 (monotonicity (trans a!82 a!84 (= (select aux!32_n L1_2_0) L1_3_n))
                          a!88
                          (= (= (select aux!32_n L1_2_0) a!1) (= L1_3_n L1_1_n)))))
(let ((a!90 (symm a!89 (= (= L1_3_n L1_1_n) (= (select aux!32_n L1_2_0) a!1)))))
(let ((a!92 (mp (th-lemma a!78 (not (= L1_3_n L1_1_n)))
                (monotonicity a!90 a!91)
                (not (= (select aux!32_n L1_2_0) a!1)))))
(let ((a!97 (unit-resolution a!76
                             a!92
                             (mp (hypothesis (= L1_5_1 1))
                                 a!96
                                 (= L1_0_n L1_2_0))
                             false)))
(let ((a!98 (th-lemma (th-lemma (th-lemma a!71 a!72 (<= L1_2_0 1))
                                a!75
                                (<= L1_5_1 1))
                      (lemma a!97 (not (= L1_5_1 1)))
                      (not (>= L1_5_1 1)))))
  (th-lemma (th-lemma a!98 a!100 a!101) (symm a!74 (= L1_2_0 L1_5_1)) false))))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= L1_5_n 2)
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_5_n 1))
(<= L1_0_n 1)
(>= L1_0_n 1)
(not (<= L1_4_n 1))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 1)
(not (= L1_5_n 1))
(= 1 L1_2_n)
(not (= L1_3_n L1_1_n))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= L1_5_n 2)
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_5_n 1))
(<= L1_0_n 1)
(>= L1_0_n 1)
(not (<= L1_4_n 1))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 1)
(not (= L1_5_n 1))
(= 1 L1_2_n)
(not (= L1_3_n L1_1_n))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= L1_5_n 2)
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_5_n 1))
(<= L1_0_n 1)
(>= L1_0_n 1)
(not (<= L1_4_n 1))
(<= (+ L1_4_n (* (- 1) L1_5_n)) 1)
(not (= L1_5_n 1))
(= 1 L1_2_n)
(not (= L1_3_n L1_1_n))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 13 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (= L1_3_n L1_1_n)
    (not (>= L1_0_n 1))
    (not (<= L1_0_n 1))
    (not (<= 1 L1_2_n))
    (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_0_n 0)
    (not (<= L1_0_n 1))
    (<= L1_2_n 0)
    (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_0_n 0)
    (not (<= L1_0_n 1))
    (<= L1_2_n 0)
    (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= L1_0_n 0)
    (not (<= L1_0_n 1))
    (<= L1_2_n 0)
    (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
    |L1#level_2!113|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_2_0 0)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0))))
  (or (=> L2_tr0 a!1) |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_2_0 0)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_0_1 0)
               (not (<= L1_0_1 1))
               (<= L1_2_1 0)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 3 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 3 depth: 6
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 1)
       (= L1_0_n 1)
       (not (<= L1_4_n 1))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L1_ext!1380_1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!2 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!5 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n)))
      (a!9 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!10 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!11 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!17 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!18 (= (<= L1_2_n (+ (- 1) L1_5_n))
               (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!19 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!21 (= (= L1_5_n (+ 1 L1_0_n)) (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!22 (= (<= L1_4_n (+ (- 1) L1_5_n))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!23 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!29 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!32 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (not (= L1_5_n (+ 1 L1_0_n)))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!38 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!41 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (not (<= L1_4_n 0))
                 (= 2 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!48 (unit-resolution (asserted (or (not spacer_proxy!40) (<= L1_2_n 1)))
                             (asserted spacer_proxy!40)
                             (<= L1_2_n 1)))
      (a!49 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!51 (asserted (or (not spacer_proxy!39) (not (<= L1_4_n 1)))))
      (a!53 (not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)))
      (a!60 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!61 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!73 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!80 (unit-resolution (asserted (or (not spacer_proxy!41) (>= L1_2_n 1)))
                             (asserted spacer_proxy!41)
                             (>= L1_2_n 1)))
      (a!84 (unit-resolution (asserted (or (not spacer_proxy!43) (>= L1_0_n 1)))
                             (asserted spacer_proxy!43)
                             (>= L1_0_n 1)))
      (a!87 (unit-resolution (asserted (or (not spacer_proxy!42) (<= L1_0_n 1)))
                             (asserted spacer_proxy!42)
                             (<= L1_0_n 1)))
      (a!110 (symm (commutativity (= (= L1_1_1 L1_3_1) (= L1_3_1 L1_1_1)))
                   (= (= L1_3_1 L1_1_1) (= L1_1_1 L1_3_1))))
      (a!114 (not (>= (+ L1_1_1 (* (- 1) L1_3_1)) 0)))
      (a!115 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
                 (<= L1_0_1 0)
                 (not (<= L1_0_1 1))
                 (<= L1_2_1 0)
                 (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)))
      (a!116 (rewrite (= (+ L1_3_1 (* (- 1) L1_1_1))
                         (+ (* (- 1) L1_1_1) L1_3_1))))
      (a!117 (= (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
                (= (+ (* (- 1) L1_1_1) L1_3_1) 0)))
      (a!118 (rewrite (= (+ L1_5_1 (* (- 1) L1_2_1))
                         (+ (* (- 1) L1_2_1) L1_5_1))))
      (a!119 (= (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
                (<= (+ (* (- 1) L1_2_1) L1_5_1) 0)))
      (a!120 (or (= (+ (* (- 1) L1_1_1) L1_3_1) 0)
                 (<= L1_0_1 0)
                 (not (<= L1_0_1 1))
                 (<= L1_2_1 0)
                 (<= (+ (* (- 1) L1_2_1) L1_5_1) 0)))
      (a!124 (= (= (+ (* (- 1) L1_1_1) L1_3_1) 0)
                (= (+ L1_1_1 (* (- 1) L1_3_1)) 0)))
      (a!125 (= (<= (+ (* (- 1) L1_2_1) L1_5_1) 0)
                (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)))
      (a!126 (or (= (+ L1_1_1 (* (- 1) L1_3_1)) 0)
                 (<= L1_0_1 0)
                 (not (<= L1_0_1 1))
                 (<= L1_2_1 0)
                 (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)))
      (a!129 (or (not L1_tr1)
                 (= (+ L1_1_1 (* (- 1) L1_3_1)) 0)
                 (<= L1_0_1 0)
                 (not (<= L1_0_1 1))
                 (<= L1_2_1 0)
                 (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
                 |L1#level_3!130|))
      (a!160 (not (>= (+ L1_2_n (* (- 1) L1_4_n)) (- 1))))
      (a!162 (not (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0))))
(let ((a!3 (or (not (= L1_0_0 L1_0_n))
               (not (= L1_4_0 L1_4_n))
               (not (= L1_5_0 L1_2_0))
               (not (= L1_0_1 L1_0_n))
               (not (= L1_2_1 L1_2_n))
               (not (= L1_4_1 L1_4_n))
               (not (= L1_5_1 L1_2_0))
               (not (= a!1 (select aux!29_n L1_0_n)))
               (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
               (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
               (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
               (not (= L1_3_1 (select aux!35_n L1_2_n)))
               (not (= L1_1_1 (select aux!36_n L1_0_n)))
               (not (= L1_3_0 (select aux!33_n L1_2_0)))
               a!2
               (not (= L1_1_n (select aux!29_n L1_0_n)))
               (not (= L1_1_0 (select aux!34_n L1_0_n)))
               (not (= L1_3_n (select aux!30_n L1_2_n)))
               (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!6 (and (= L1_0_0 L1_0_n)
                (= L1_4_0 L1_4_n)
                (= L1_5_0 L1_2_0)
                (= L1_0_1 L1_0_n)
                (= L1_2_1 L1_2_n)
                (= L1_4_1 L1_4_n)
                (= L1_5_1 L1_2_0)
                a!5
                (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                (= L1_3_1 (select aux!35_n L1_2_n))
                (= L1_1_1 (select aux!36_n L1_0_n))
                (= L1_3_0 (select aux!33_n L1_2_0))
                (= L1_5_n (+ 1 L1_2_0))
                (= L1_1_n (select aux!29_n L1_0_n))
                (= L1_1_0 (select aux!34_n L1_0_n))
                (= L1_3_n (select aux!30_n L1_2_n))
                (not (<= L1_4_n L1_2_0))))
      (a!7 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              a!1))
      (a!12 (monotonicity (rewrite a!10) (= (not (<= L1_4_n L1_2_0)) a!11)))
      (a!13 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!1 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!11))
      (a!20 (= (not (<= L1_2_n (+ (- 1) L1_5_n))) a!19))
      (a!24 (= (not (<= L1_4_n (+ (- 1) L1_5_n))) a!23))
      (a!25 (and a!19 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)) (= L1_5_n 1) a!23))
      (a!30 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!29
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!33 (= (not (= L1_5_n (+ 1 L1_0_n))) a!29))
      (a!35 (or (not L1_ext!612_n)
                (and a!19 a!29 (= L1_5_n 1) a!23)
                L1_ext!1321_n))
      (a!39 (rewrite (= (and a!19 a!29 (= L1_5_n 1) a!23) (not a!38))))
      (a!42 (and a!19
                 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                 (not (<= L1_4_n 0))
                 (= L1_5_n 2)
                 a!23
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!46 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!29
                (<= L1_4_n 0)
                (not (= L1_5_n 2))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
                (<= L1_5_n 1)
                (<= L1_0_n 0)
                (<= L1_2_n 0)))
      (a!50 (unit-resolution (asserted a!49)
                             (asserted spacer_proxy!1)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!62 (monotonicity (rewrite (= a!60 (not a!61)))
                          (= (or (not L1_tr0) a!60)
                             (or (not L1_tr0) (not a!61)))))
      (a!64 (th-lemma (unit-resolution a!51
                                       (asserted spacer_proxy!39)
                                       (not (<= L1_4_n 1)))
                      (not (<= L1_4_n 0))))
      (a!72 (def-axiom (or (= L1_0_n L1_2_0) (= (select aux!31_n L1_0_n) a!1))))
      (a!74 (unit-resolution (asserted (or (not spacer_proxy!0) a!73))
                             (asserted spacer_proxy!0)
                             a!73))
      (a!90 (def-axiom (or (not (= L1_0_n L1_2_0))
                           (= (select aux!32_n L1_2_0) a!1))))
      (a!121 (rewrite (= (=> L1_tr1 a!120) (or (not L1_tr1) a!120))))
      (a!123 (= (or (=> L1_tr1 a!115) |L1#level_3!130|)
                (or (or (not L1_tr1) a!120) |L1#level_3!130|)))
      (a!127 (monotonicity (monotonicity (rewrite a!124)
                                         (rewrite a!125)
                                         (= a!120 a!126))
                           (= (or (not L1_tr1) a!120) (or (not L1_tr1) a!126))))
      (a!128 (= (or (or (not L1_tr1) a!120) |L1#level_3!130|)
                (or (or (not L1_tr1) a!126) |L1#level_3!130|)))
      (a!130 (= (or (or (not L1_tr1) a!126) |L1#level_3!130|) a!129))
      (a!131 (= (or (or (not L1_tr1) a!120) |L1#level_3!130|) a!129))
      (a!149 (= (not (= L1_3_n L1_1_n)) (not (= (select aux!32_n L1_2_0) a!1))))
      (a!151 (trans (monotonicity (th-lemma a!84 a!87 (= L1_0_n 1))
                                  (= (= L1_0_n L1_2_0) (= 1 L1_2_0)))
                    (commutativity (= (= 1 L1_2_0) (= L1_2_0 1)))
                    (= (= L1_0_n L1_2_0) (= L1_2_0 1))))
      (a!163 (lemma (th-lemma (hypothesis (<= L1_2_n 0)) a!80 false)
                    (not (<= L1_2_n 0)))))
(let ((a!4 (def-axiom (or a!3 (= L1_1_n (select aux!29_n L1_0_n)))))
      (a!8 (monotonicity (rewrite a!7) (= a!5 (= a!1 (select aux!29_n L1_0_n)))))
      (a!16 (monotonicity (rewrite (= a!13 (not a!3)))
                          (= (or (not L1_tr1) a!13) (or (not L1_tr1) (not a!3)))))
      (a!26 (monotonicity (monotonicity (rewrite a!18) a!20)
                          (rewrite a!21)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!22) a!24)
                          (= a!17 a!25)))
      (a!31 (monotonicity (rewrite (= a!25 (not a!30)))
                          (= (or (not L1_ext0_n) a!25 L1_ext!612_n)
                             (or (not L1_ext0_n) (not a!30) L1_ext!612_n))))
      (a!34 (monotonicity (monotonicity (rewrite a!18) a!20)
                          (monotonicity (rewrite a!21) a!33)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!22) a!24)
                          (= a!32 (and a!19 a!29 (= L1_5_n 1) a!23))))
      (a!40 (monotonicity a!39
                          (= a!35
                             (or (not L1_ext!612_n) (not a!38) L1_ext!1321_n))))
      (a!43 (monotonicity (monotonicity (rewrite a!18) a!20)
                          (rewrite a!21)
                          (rewrite (= (= 2 L1_5_n) (= L1_5_n 2)))
                          (monotonicity (rewrite a!22) a!24)
                          (= a!41 a!42)))
      (a!47 (monotonicity (rewrite (= a!42 (not a!46)))
                          (= (or (not L1_ext!1321_n) a!42 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) (not a!46) L1_ext!1380_n))))
      (a!52 (th-lemma a!50
                      (unit-resolution a!51
                                       (asserted spacer_proxy!39)
                                       (not (<= L1_4_n 1)))
                      (not (<= L1_5_n 1))))
      (a!63 (mp (asserted (or (not L1_tr0) a!60))
                a!62
                (or (not L1_tr0) (not a!61))))
      (a!65 (th-lemma (hypothesis (= L1_5_n 0))
                      (th-lemma a!64 a!50 (not (<= L1_5_n 0)))
                      false))
      (a!69 (def-axiom (or a!3 (= a!1 (select aux!29_n L1_0_n)))))
      (a!75 (def-axiom (or a!3 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!76 (def-axiom (or a!3
                           (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))))
      (a!96 (def-axiom (or a!3
                           (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))))
      (a!99 (def-axiom (or a!3 (= L1_1_1 (select aux!36_n L1_0_n)))))
      (a!102 (th-lemma a!74 (>= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!103 (def-axiom (or a!3
                            (= (select aux!35_n L1_2_n)
                               (select aux!32_n L1_2_n)))))
      (a!105 (def-axiom (or a!3 (= L1_3_1 (select aux!35_n L1_2_n)))))
      (a!122 (trans (monotonicity (monotonicity (monotonicity a!116 a!117)
                                                (monotonicity a!118 a!119)
                                                (= a!115 a!120))
                                  (= (=> L1_tr1 a!115) (=> L1_tr1 a!120)))
                    a!121
                    (= (=> L1_tr1 a!115) (or (not L1_tr1) a!120))))
      (a!139 (or a!3 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1)))))
(let ((a!14 (monotonicity (monotonicity a!8 (rewrite a!9) a!12 (= a!6 a!13))
                          (= (or (not L1_tr1) a!6) (or (not L1_tr1) a!13))))
      (a!27 (monotonicity a!26
                          (= (or (not L1_ext0_n) a!17 L1_ext!612_n)
                             (or (not L1_ext0_n) a!25 L1_ext!612_n))))
      (a!36 (monotonicity a!34
                          (= (or (not L1_ext!612_n) a!32 L1_ext!1321_n) a!35)))
      (a!44 (monotonicity a!43
                          (= (or (not L1_ext!1321_n) a!41 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) a!42 L1_ext!1380_n))))
      (a!54 (th-lemma (th-lemma a!48 a!52 a!53)
                      (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!56 (unit-resolution (def-axiom (or a!38 (= L1_5_n 1)))
                             (th-lemma a!52 (not (= L1_5_n 1)))
                             a!38))
      (a!58 (unit-resolution (def-axiom (or a!30 (= L1_5_n 1)))
                             (th-lemma a!52 (not (= L1_5_n 1)))
                             a!30))
      (a!66 (unit-resolution (def-axiom (or a!61 (= L1_5_n 0)))
                             (lemma a!65 (not (= L1_5_n 0)))
                             a!61))
      (a!132 (trans (monotonicity a!122 a!123)
                    (trans (monotonicity a!127 a!128) (rewrite a!130) a!131)
                    (= (or (=> L1_tr1 a!115) |L1#level_3!130|) a!129))))
(let ((a!15 (mp (asserted (or (not L1_tr1) a!6)) a!14 (or (not L1_tr1) a!13)))
      (a!28 (mp (asserted (or (not L1_ext0_n) a!17 L1_ext!612_n))
                a!27
                (or (not L1_ext0_n) a!25 L1_ext!612_n)))
      (a!37 (mp (asserted (or (not L1_ext!612_n) a!32 L1_ext!1321_n)) a!36 a!35))
      (a!45 (mp (asserted (or (not L1_ext!1321_n) a!41 L1_ext!1380_n))
                a!44
                (or (not L1_ext!1321_n) a!42 L1_ext!1380_n)))
      (a!133 (mp (asserted (or (=> L1_tr1 a!115) |L1#level_3!130|)) a!132 a!129)))
(let ((a!55 (unit-resolution (mp a!45
                                 a!47
                                 (or (not L1_ext!1321_n)
                                     (not a!46)
                                     L1_ext!1380_n))
                             (unit-resolution (def-axiom (or a!46 a!19))
                                              a!54
                                              a!46)
                             (asserted (not L1_ext!1380_n))
                             (not L1_ext!1321_n))))
(let ((a!57 (unit-resolution (mp a!37
                                 a!40
                                 (or (not L1_ext!612_n)
                                     (not a!38)
                                     L1_ext!1321_n))
                             a!55
                             a!56
                             (not L1_ext!612_n))))
(let ((a!59 (unit-resolution (mp a!28
                                 a!31
                                 (or (not L1_ext0_n) (not a!30) L1_ext!612_n))
                             a!57
                             a!58
                             (not L1_ext0_n))))
(let ((a!67 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             a!59
                             (unit-resolution a!63 a!66 (not L1_tr0))
                             L1_tr1)))
(let ((a!68 (unit-resolution (mp a!15 a!16 (or (not L1_tr1) (not a!3)))
                             a!67
                             (not a!3))))
(let ((a!70 (symm (unit-resolution a!69 a!68 (= a!1 (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) a!1)))
      (a!77 (unit-resolution a!76
                             a!68
                             (= (select aux!32_n L1_2_n)
                                (select aux!30_n L1_2_n))))
      (a!79 (unit-resolution (def-axiom (or a!3 (= L1_2_1 L1_2_n)))
                             a!68
                             (= L1_2_1 L1_2_n)))
      (a!82 (unit-resolution (def-axiom (or a!3 (= L1_0_1 L1_0_n)))
                             a!68
                             (= L1_0_1 L1_0_n)))
      (a!93 (symm (unit-resolution a!4 a!68 (= L1_1_n (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) L1_1_n)))
      (a!97 (symm (unit-resolution a!96
                                   a!68
                                   (= (select aux!36_n L1_0_n)
                                      (select aux!31_n L1_0_n)))
                  (= (select aux!31_n L1_0_n) (select aux!36_n L1_0_n))))
      (a!100 (symm (unit-resolution a!99
                                    a!68
                                    (= L1_1_1 (select aux!36_n L1_0_n)))
                   (= (select aux!36_n L1_0_n) L1_1_1)))
      (a!104 (symm (unit-resolution a!103
                                    a!68
                                    (= (select aux!35_n L1_2_n)
                                       (select aux!32_n L1_2_n)))
                   (= (select aux!32_n L1_2_n) (select aux!35_n L1_2_n))))
      (a!106 (symm (unit-resolution a!105
                                    a!68
                                    (= L1_3_1 (select aux!35_n L1_2_n)))
                   (= (select aux!35_n L1_2_n) L1_3_1)))
      (a!134 (unit-resolution (def-axiom (or a!3 (= L1_5_1 L1_2_0)))
                              a!68
                              (= L1_5_1 L1_2_0)))
      (a!137 (unit-resolution (def-axiom (or a!3 (= L1_5_0 L1_2_0)))
                              a!68
                              (= L1_5_0 L1_2_0)))
      (a!140 (unit-resolution (def-axiom a!139)
                              a!68
                              (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!145 (symm (unit-resolution a!75
                                    a!68
                                    (= L1_3_n (select aux!30_n L1_2_n)))
                   (= (select aux!30_n L1_2_n) L1_3_n))))
(let ((a!71 (trans (unit-resolution a!4
                                    a!68
                                    (= L1_1_n (select aux!29_n L1_0_n)))
                   a!70
                   (= L1_1_n a!1)))
      (a!78 (trans (unit-resolution a!75
                                    a!68
                                    (= L1_3_n (select aux!30_n L1_2_n)))
                   (symm a!77
                         (= (select aux!30_n L1_2_n) (select aux!32_n L1_2_n)))
                   (= L1_3_n (select aux!32_n L1_2_n))))
      (a!81 (trans (symm a!79 (= L1_2_n L1_2_1))
                   (trans a!79 (th-lemma a!48 a!80 (= L1_2_n 1)) (= L1_2_1 1))
                   (= L1_2_n 1)))
      (a!83 (th-lemma (symm a!82 (= L1_0_n L1_0_1))
                      (<= (+ L1_0_n (* (- 1) L1_0_1)) 0)))
      (a!85 (th-lemma (symm a!82 (= L1_0_n L1_0_1))
                      (>= (+ L1_0_n (* (- 1) L1_0_1)) 0)))
      (a!135 (th-lemma (symm a!134 (= L1_2_0 L1_5_1))
                       (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!136 (th-lemma (symm a!79 (= L1_2_n L1_2_1))
                       (>= (+ L1_2_n (* (- 1) L1_2_1)) 0)))
      (a!138 (th-lemma (symm a!137 (= L1_2_0 L1_5_0))
                       (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!141 (th-lemma a!140 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!143 (trans (trans (symm a!134 (= L1_2_0 L1_5_1))
                           (hypothesis (= L1_5_1 1))
                           (= L1_2_0 1))
                    (symm (th-lemma a!48 a!80 (= L1_2_n 1)) (= 1 L1_2_n))
                    (= L1_2_0 L1_2_n)))
      (a!146 (trans (unit-resolution a!69 a!68 (= a!1 (select aux!29_n L1_0_n)))
                    a!93
                    (= a!1 L1_1_n)))
      (a!152 (trans (monotonicity a!134 (= (= L1_5_1 1) (= L1_2_0 1)))
                    (symm a!151 (= (= L1_2_0 1) (= L1_0_n L1_2_0)))
                    (= (= L1_5_1 1) (= L1_0_n L1_2_0))))
      (a!154 (monotonicity (monotonicity a!134 (= (= L1_5_1 1) (= L1_2_0 1)))
                           (= (not (= L1_5_1 1)) (not (= L1_2_0 1)))))
      (a!156 (symm (monotonicity a!137 (= (= L1_5_0 1) (= L1_2_0 1)))
                   (= (= L1_2_0 1) (= L1_5_0 1))))
      (a!159 (th-lemma (symm a!137 (= L1_2_0 L1_5_0))
                       (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!164 (symm (monotonicity a!79 (= (= L1_2_1 0) (= L1_2_n 0)))
                   (= (= L1_2_n 0) (= L1_2_1 0))))
      (a!167 (th-lemma (symm a!79 (= L1_2_n L1_2_1))
                       (<= (+ L1_2_n (* (- 1) L1_2_1)) 0))))
(let ((a!86 (th-lemma (th-lemma a!83 a!84 (not (<= L1_0_1 0)))
                      a!85
                      (not (<= L1_0_n 0))))
      (a!107 (trans (trans a!78 a!104 (= L1_3_n (select aux!35_n L1_2_n)))
                    a!106
                    (= L1_3_n L1_3_1)))
      (a!142 (th-lemma a!138
                       (th-lemma a!141
                                 a!80
                                 (th-lemma a!48 a!52 a!53)
                                 (not (<= L1_2_0 0)))
                       (>= L1_5_0 1)))
      (a!144 (trans (monotonicity a!143
                                  (= (select aux!32_n L1_2_0)
                                     (select aux!32_n L1_2_n)))
                    a!77
                    (= (select aux!32_n L1_2_0) (select aux!30_n L1_2_n))))
      (a!157 (monotonicity a!156 (= (not (= L1_2_0 1)) (not (= L1_5_0 1)))))
      (a!165 (monotonicity a!164 (= (not (= L1_2_n 0)) (not (= L1_2_1 0))))))
(let ((a!88 (trans a!81
                   (symm (th-lemma a!86 a!87 (= L1_0_n 1)) (= 1 L1_0_n))
                   (= L1_2_n L1_0_n)))
      (a!108 (th-lemma a!107 (<= (+ L1_3_n (* (- 1) L1_3_1)) 0)))
      (a!147 (monotonicity (trans a!144
                                  a!145
                                  (= (select aux!32_n L1_2_0) L1_3_n))
                           a!146
                           (= (= (select aux!32_n L1_2_0) a!1)
                              (= L1_3_n L1_1_n))))
      (a!166 (mp (th-lemma a!163 (not (= L1_2_n 0))) a!165 (not (= L1_2_1 0)))))
(let ((a!89 (monotonicity (trans a!88
                                 (hypothesis (= L1_0_n L1_2_0))
                                 (= L1_2_n L1_2_0))
                          (= (select aux!32_n L1_2_n) (select aux!32_n L1_2_0))))
      (a!148 (symm a!147 (= (= L1_3_n L1_1_n) (= (select aux!32_n L1_2_0) a!1))))
      (a!168 (th-lemma a!166
                       (th-lemma (th-lemma a!163 (>= L1_2_n 0))
                                 a!167
                                 (>= L1_2_1 0))
                       (hypothesis (<= L1_2_1 0))
                       false)))
(let ((a!91 (trans (trans a!78 a!89 (= L1_3_n (select aux!32_n L1_2_0)))
                   (unit-resolution a!90
                                    (hypothesis (= L1_0_n L1_2_0))
                                    (= (select aux!32_n L1_2_0) a!1))
                   (= L1_3_n a!1)))
      (a!150 (mp (th-lemma a!74 (not (= L1_3_n L1_1_n)))
                 (monotonicity a!148 a!149)
                 (not (= (select aux!32_n L1_2_0) a!1)))))
(let ((a!92 (trans a!91
                   (unit-resolution a!69 a!68 (= a!1 (select aux!29_n L1_0_n)))
                   (= L1_3_n (select aux!29_n L1_0_n))))
      (a!153 (unit-resolution a!90
                              a!150
                              (mp (hypothesis (= L1_5_1 1))
                                  a!152
                                  (= L1_0_n L1_2_0))
                              false)))
(let ((a!94 (lemma (th-lemma a!74 (trans a!92 a!93 (= L1_3_n L1_1_n)) false)
                   (not (= L1_0_n L1_2_0))))
      (a!155 (mp (lemma a!153 (not (= L1_5_1 1))) a!154 (not (= L1_2_0 1)))))
(let ((a!95 (symm (unit-resolution a!72 a!94 (= (select aux!31_n L1_0_n) a!1))
                  (= a!1 (select aux!31_n L1_0_n))))
      (a!158 (th-lemma a!142
                       (mp a!155 a!157 (not (= L1_5_0 1)))
                       (not (<= L1_5_0 1)))))
(let ((a!98 (trans (trans a!71 a!95 (= L1_1_n (select aux!31_n L1_0_n)))
                   a!97
                   (= L1_1_n (select aux!36_n L1_0_n))))
      (a!161 (th-lemma a!158
                       a!48
                       a!159
                       (unit-resolution (def-axiom (or a!3 a!11)) a!68 a!11)
                       a!160)))
(let ((a!101 (th-lemma (trans a!98 a!100 (= L1_1_n L1_1_1))
                       (>= (+ L1_1_n (* (- 1) L1_1_1)) 0)))
      (a!111 (trans (monotonicity a!107
                                  (trans a!98 a!100 (= L1_1_n L1_1_1))
                                  (= (= L1_3_n L1_1_n) (= L1_3_1 L1_1_1)))
                    a!110
                    (= (= L1_3_n L1_1_n) (= L1_1_1 L1_3_1))))
      (a!169 (unit-resolution a!133
                              (th-lemma a!50 a!135 a!136 a!161 a!141 a!162)
                              a!67
                              (lemma a!168 (not (<= L1_2_1 0)))
                              (asserted (not |L1#level_3!130|))
                              (th-lemma a!85 a!87 (<= L1_0_1 1))
                              (th-lemma a!83 a!84 (not (<= L1_0_1 0)))
                              (= (+ L1_1_1 (* (- 1) L1_3_1)) 0))))
(let ((a!109 (th-lemma a!101 a!102 a!108 (<= (+ L1_1_1 (* (- 1) L1_3_1)) 0)))
      (a!112 (monotonicity a!111
                           (= (not (= L1_3_n L1_1_n)) (not (= L1_1_1 L1_3_1))))))
(let ((a!113 (mp (th-lemma a!74 (not (= L1_3_n L1_1_n)))
                 a!112
                 (not (= L1_1_1 L1_3_1)))))
  (th-lemma (th-lemma a!109 a!113 a!114) a!169 false))))))))))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(not (<= L1_5_n 0))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(>= L1_0_n 1)
(<= L1_0_n 1)
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(not (<= L1_4_n 1))
(= 1 L1_2_n)
(not (= L1_3_n L1_1_n))
(>= L1_2_n 1)
(not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
(<= L1_2_n 1)
(= L1_2_n 1)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(not (<= L1_5_n 0))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(>= L1_0_n 1)
(<= L1_0_n 1)
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(not (<= L1_4_n 1))
(= 1 L1_2_n)
(not (= L1_3_n L1_1_n))
(>= L1_2_n 1)
(not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
(<= L1_2_n 1)
(= L1_2_n 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(not (<= L1_5_n 0))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(>= L1_0_n 1)
(<= L1_0_n 1)
(<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
(not (<= L1_4_n 1))
(= 1 L1_2_n)
(not (= L1_3_n L1_1_n))
(>= L1_2_n 1)
(not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
(<= L1_2_n 1)
(= L1_2_n 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 16 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (inductive)(or (= L1_3_n L1_1_n)
    (not (<= L1_2_n 1))
    (not (>= L1_0_n 1))
    (not (>= L1_2_n 1))
    (not (<= L1_0_n 1))
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: oo L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (not (<= L1_2_n 1))
    (<= L1_0_n 0)
    (<= L1_2_n 0)
    (not (<= L1_0_n 1))
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (not (<= L1_2_n 1))
    (<= L1_0_n 0)
    (<= L1_2_n 0)
    (not (<= L1_0_n 1))
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (not (<= L1_2_n 1))
    (<= L1_0_n 0)
    (<= L1_2_n 0)
    (not (<= L1_0_n 1))
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (not (<= L1_2_0 1))
               (<= L1_0_0 0)
               (<= L1_2_0 0)
               (not (<= L1_0_0 1))
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0))))
  (=> L2_tr0 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (not (<= L1_2_0 1))
               (<= L1_0_0 0)
               (<= L1_2_0 0)
               (not (<= L1_0_0 1))
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (not (<= L1_2_1 1))
               (<= L1_0_1 0)
               (<= L1_2_1 0)
               (not (<= L1_0_1 1))
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 6
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun L2_4_0 () Int
  2)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!1456))
(define-fun L2_1_0 () Int
  589)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  589)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!1454))
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!1455))
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_4_n () Int
  2)
(define-fun L2_3_0 () Int
  590)
(define-fun spacer_proxy!24 () Bool
  true)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!1458))
(define-fun L2_5_n () Int
  0)
(define-fun L2_0_n () Int
  1)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  true)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  true)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun L2_0_0 () Int
  1)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!1453))
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun L2_3_n () Int
  590)
(define-fun spacer_proxy!21 () Bool
  true)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_2_n () Int
  1)
(define-fun spacer_proxy!23 () Bool
  true)
(define-fun L2_2_0 () Int
  1)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!1457))
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun k!1455 ((x!0 Int)) Int
  (ite (= x!0 1) 590
    590))
(define-fun k!1456 ((x!0 Int)) Int
  (ite (= x!0 1) 590
    590))
(define-fun k!1453 ((x!0 Int)) Int
  (ite (= x!0 1) 589
    589))
(define-fun k!1457 ((x!0 Int)) Int
  (ite (= x!0 1) 589
    589))
(define-fun k!1454 ((x!0 Int)) Int
  (ite (= x!0 1) 589
    589))
(define-fun k!1458 ((x!0 Int)) Int
  (ite (= x!0 1) 590
    590))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and (not (<= L2_4_n L2_5_0))
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0)))))
      (a!2 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
       (not (<= L2_4_0 L2_5_0))
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 2)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 6
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!74 () Bool
  true)
(define-fun spacer_proxy!75 () Bool
  true)
(define-fun L1_4_0 () Int
  3)
(define-fun L1_0_0 () Int
  2)
(define-fun L1_ext!1380_0 () Bool
  true)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  589)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_ext!1321_0 () Bool
  true)
(define-fun L1_2_0 () Int
  2)
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_4_n () Int
  3)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!1465))
(define-fun spacer_proxy!24 () Bool
  false)
(define-fun L1_ext!612_0 () Bool
  true)
(define-fun L1_1_0 () Int
  589)
(define-fun L1_5_0 () Int
  3)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!1468))
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!1467))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  590)
(define-fun L2_0_n () Int
  2)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!1466))
(define-fun spacer_proxy!71 () Bool
  true)
(define-fun spacer_proxy!21 () Bool
  false)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun spacer_proxy!72 () Bool
  true)
(define-fun spacer_proxy!73 () Bool
  true)
(define-fun L2_2_n () Int
  2)
(define-fun L2_3_n () Int
  590)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun L2_tr0 () Bool
  true)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun k!1467 ((x!0 Int)) Int
  (ite (= x!0 2) 590
    590))
(define-fun k!1468 ((x!0 Int)) Int
  (ite (= x!0 2) 590
    590))
(define-fun k!1465 ((x!0 Int)) Int
  (ite (= x!0 2) 589
    589))
(define-fun k!1466 ((x!0 Int)) Int
  (ite (= x!0 2) 589
    589))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (<= L2_4_n L1_5_0)
       a!1
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       a!2
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (= L1_2_0 2) (<= L1_4_0 L1_5_0) (not (<= L1_4_0 2)) a!1 (= L1_0_0 2)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 2 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 2)
       (= L1_0_n 2)
       (not (<= L1_4_n 2))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 2 depth: 6
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 2)
       (= L1_0_n 2)
       (not (<= L1_4_n 2))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L1_ext!1380_1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!7 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!8 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!11 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               (select aux!29_n L1_0_n)))
      (a!15 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!16 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!17 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!23 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!24 (= (<= L1_2_n (+ (- 1) L1_5_n))
               (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!25 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!27 (= (= L1_5_n (+ 1 L1_0_n)) (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!28 (= (<= L1_4_n (+ (- 1) L1_5_n))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!29 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!35 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!38 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (not (<= L1_4_n 0))
                 (= 2 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!45 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (not (= L1_5_n (+ 1 L1_0_n)))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!51 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!54 (unit-resolution (asserted (or (not spacer_proxy!126) (<= L1_2_n 2)))
                             (asserted spacer_proxy!126)
                             (<= L1_2_n 2)))
      (a!55 (asserted (or (not spacer_proxy!174) (not (<= L1_4_n 2)))))
      (a!56 (not (>= (+ L1_2_n (* (- 1) L1_4_n)) 0)))
      (a!58 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!60 (not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)))
      (a!68 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!69 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!79 (unit-resolution (asserted (or (not spacer_proxy!127) (>= L1_2_n 2)))
                             (asserted spacer_proxy!127)
                             (>= L1_2_n 2))))
(let ((a!2 (or (=> L1_tr1 (or a!1 (<= L1_2_0 1))) |L1#level_2!113|))
      (a!3 (= (=> L1_tr1 (or a!1 (<= L1_2_0 1)))
              (or (not L1_tr1) (or a!1 (<= L1_2_0 1)))))
      (a!4 (or (or (not L1_tr1) (or a!1 (<= L1_2_0 1))) |L1#level_2!113|))
      (a!9 (or (not (= L1_0_0 L1_0_n))
               (not (= L1_4_0 L1_4_n))
               (not (= L1_5_0 L1_2_0))
               (not (= L1_0_1 L1_0_n))
               (not (= L1_2_1 L1_2_n))
               (not (= L1_4_1 L1_4_n))
               (not (= L1_5_1 L1_2_0))
               (not (= a!7 (select aux!29_n L1_0_n)))
               (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
               (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
               (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
               (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
               (not (= L1_3_1 (select aux!35_n L1_2_n)))
               (not (= L1_1_1 (select aux!36_n L1_0_n)))
               (not (= L1_3_0 (select aux!33_n L1_2_0)))
               a!8
               (not (= L1_1_n (select aux!29_n L1_0_n)))
               (not (= L1_1_0 (select aux!34_n L1_0_n)))
               (not (= L1_3_n (select aux!30_n L1_2_n)))
               (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!12 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 a!11
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= L1_5_n (+ 1 L1_2_0))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 (not (<= L1_4_n L1_2_0))))
      (a!13 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               a!7))
      (a!18 (monotonicity (rewrite a!16) (= (not (<= L1_4_n L1_2_0)) a!17)))
      (a!19 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!7 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!17))
      (a!26 (= (not (<= L1_2_n (+ (- 1) L1_5_n))) a!25))
      (a!30 (= (not (<= L1_4_n (+ (- 1) L1_5_n))) a!29))
      (a!31 (and a!25 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)) (= L1_5_n 1) a!29))
      (a!36 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!35
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!39 (and a!25
                 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                 (not (<= L1_4_n 0))
                 (= L1_5_n 2)
                 a!29
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!43 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!35
                (<= L1_4_n 0)
                (not (= L1_5_n 2))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
                (<= L1_5_n 1)
                (<= L1_0_n 0)
                (<= L1_2_n 0)))
      (a!46 (= (not (= L1_5_n (+ 1 L1_0_n))) a!35))
      (a!48 (or (not L1_ext!612_n)
                (and a!25 a!35 (= L1_5_n 1) a!29)
                L1_ext!1321_n))
      (a!52 (rewrite (= (and a!25 a!35 (= L1_5_n 1) a!29) (not a!51))))
      (a!57 (th-lemma a!54
                      (unit-resolution a!55
                                       (asserted spacer_proxy!174)
                                       (not (<= L1_4_n 2)))
                      a!56))
      (a!59 (unit-resolution (asserted a!58)
                             (asserted spacer_proxy!1)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!64 (th-lemma (unit-resolution a!55
                                       (asserted spacer_proxy!174)
                                       (not (<= L1_4_n 2)))
                      (not (<= L1_4_n 1))))
      (a!70 (monotonicity (rewrite (= a!68 (not a!69)))
                          (= (or (not L1_tr0) a!68)
                             (or (not L1_tr0) (not a!69)))))
      (a!80 (lemma (th-lemma (hypothesis (<= L1_2_n 1)) a!79 false)
                   (not (<= L1_2_n 1)))))
(let ((a!5 (rewrite (= a!4 (or (not L1_tr1) a!1 (<= L1_2_0 1) |L1#level_2!113|))))
      (a!10 (or a!9 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!14 (monotonicity (rewrite a!13)
                          (= a!11 (= a!7 (select aux!29_n L1_0_n)))))
      (a!22 (monotonicity (rewrite (= a!19 (not a!9)))
                          (= (or (not L1_tr1) a!19) (or (not L1_tr1) (not a!9)))))
      (a!32 (monotonicity (monotonicity (rewrite a!24) a!26)
                          (rewrite a!27)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!28) a!30)
                          (= a!23 a!31)))
      (a!37 (monotonicity (rewrite (= a!31 (not a!36)))
                          (= (or (not L1_ext0_n) a!31 L1_ext!612_n)
                             (or (not L1_ext0_n) (not a!36) L1_ext!612_n))))
      (a!40 (monotonicity (monotonicity (rewrite a!24) a!26)
                          (rewrite a!27)
                          (rewrite (= (= 2 L1_5_n) (= L1_5_n 2)))
                          (monotonicity (rewrite a!28) a!30)
                          (= a!38 a!39)))
      (a!44 (monotonicity (rewrite (= a!39 (not a!43)))
                          (= (or (not L1_ext!1321_n) a!39 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) (not a!43) L1_ext!1380_n))))
      (a!47 (monotonicity (monotonicity (rewrite a!24) a!26)
                          (monotonicity (rewrite a!27) a!46)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!28) a!30)
                          (= a!45 (and a!25 a!35 (= L1_5_n 1) a!29))))
      (a!53 (monotonicity a!52
                          (= a!48
                             (or (not L1_ext!612_n) (not a!51) L1_ext!1321_n))))
      (a!61 (th-lemma (th-lemma a!57 a!59 a!60)
                      (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!65 (th-lemma (th-lemma a!64 a!59 (not (<= L1_5_n 1)))
                      (not (= L1_5_n 1))))
      (a!71 (mp (asserted (or (not L1_tr0) a!68))
                a!70
                (or (not L1_tr0) (not a!69))))
      (a!72 (th-lemma a!59 (<= (+ L1_4_n (* (- 1) L1_5_n)) 1))))
(let ((a!6 (trans (monotonicity (rewrite a!3) (= a!2 a!4))
                  a!5
                  (= a!2 (or (not L1_tr1) a!1 (<= L1_2_0 1) |L1#level_2!113|))))
      (a!20 (monotonicity (monotonicity a!14 (rewrite a!15) a!18 (= a!12 a!19))
                          (= (or (not L1_tr1) a!12) (or (not L1_tr1) a!19))))
      (a!33 (monotonicity a!32
                          (= (or (not L1_ext0_n) a!23 L1_ext!612_n)
                             (or (not L1_ext0_n) a!31 L1_ext!612_n))))
      (a!41 (monotonicity a!40
                          (= (or (not L1_ext!1321_n) a!38 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) a!39 L1_ext!1380_n))))
      (a!49 (monotonicity a!47
                          (= (or (not L1_ext!612_n) a!45 L1_ext!1321_n) a!48)))
      (a!66 (unit-resolution (def-axiom (or a!36 (= L1_5_n 1))) a!65 a!36))
      (a!73 (th-lemma (hypothesis (= L1_5_n 0))
                      (th-lemma a!72 a!64 (not (<= L1_5_n 0)))
                      false)))
(let ((a!21 (mp (asserted (or (not L1_tr1) a!12)) a!20 (or (not L1_tr1) a!19)))
      (a!34 (mp (asserted (or (not L1_ext0_n) a!23 L1_ext!612_n))
                a!33
                (or (not L1_ext0_n) a!31 L1_ext!612_n)))
      (a!42 (mp (asserted (or (not L1_ext!1321_n) a!38 L1_ext!1380_n))
                a!41
                (or (not L1_ext!1321_n) a!39 L1_ext!1380_n)))
      (a!50 (mp (asserted (or (not L1_ext!612_n) a!45 L1_ext!1321_n)) a!49 a!48))
      (a!74 (unit-resolution (def-axiom (or a!69 (= L1_5_n 0)))
                             (lemma a!73 (not (= L1_5_n 0)))
                             a!69)))
(let ((a!62 (unit-resolution (mp a!50
                                 a!53
                                 (or (not L1_ext!612_n)
                                     (not a!51)
                                     L1_ext!1321_n))
                             (unit-resolution (def-axiom (or a!51 a!25))
                                              a!61
                                              a!51)
                             (hypothesis L1_ext!612_n)
                             L1_ext!1321_n)))
(let ((a!63 (unit-resolution (mp a!42
                                 a!44
                                 (or (not L1_ext!1321_n)
                                     (not a!43)
                                     L1_ext!1380_n))
                             a!62
                             (unit-resolution (def-axiom (or a!43 a!25))
                                              a!61
                                              a!43)
                             (asserted (not L1_ext!1380_n))
                             false)))
(let ((a!67 (unit-resolution (mp a!34
                                 a!37
                                 (or (not L1_ext0_n) (not a!36) L1_ext!612_n))
                             (lemma a!63 (not L1_ext!612_n))
                             a!66
                             (not L1_ext0_n))))
(let ((a!75 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             a!67
                             (unit-resolution a!71 a!74 (not L1_tr0))
                             L1_tr1)))
(let ((a!76 (unit-resolution (mp a!21 a!22 (or (not L1_tr1) (not a!9)))
                             a!75
                             (not a!9))))
(let ((a!77 (unit-resolution (def-axiom a!10)
                             a!76
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!82 (unit-resolution (def-axiom (or a!9 (= L1_5_0 L1_2_0)))
                             a!76
                             (= L1_5_0 L1_2_0))))
(let ((a!78 (th-lemma a!77 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1)))))
(let ((a!81 (unit-resolution (mp (asserted a!2)
                                 a!6
                                 (or (not L1_tr1)
                                     a!1
                                     (<= L1_2_0 1)
                                     |L1#level_2!113|))
                             (th-lemma a!78
                                       a!80
                                       (th-lemma a!57 a!59 a!60)
                                       (not (<= L1_2_0 1)))
                             (asserted (not |L1#level_2!113|))
                             a!75
                             a!1)))
  (th-lemma a!81 (symm a!82 (= L1_2_0 L1_5_0)) false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
(not (<= L1_4_n 1))
(not (<= (+ L1_5_n (* (- 1) L1_4_n)) (- 2)))
(not (<= L1_5_n 0))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_2_n 1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
(not (<= L1_4_n 1))
(not (<= (+ L1_5_n (* (- 1) L1_4_n)) (- 2)))
(not (<= L1_5_n 0))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_2_n 1))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0))
(not (<= L1_4_n 1))
(not (<= (+ L1_5_n (* (- 1) L1_4_n)) (- 2)))
(not (<= L1_5_n 0))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_2_n 1))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 9 new size: 2
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (<= L1_2_n 1) (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 L1 (or (<= L1_2_n 1) (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L1 (or (<= L1_2_n 1) (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (<= L1_2_n 1) (<= (+ L1_5_n (* (- 1) L1_2_n)) 0) |L1#level_2!113|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (<= L1_2_0 1) (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0))))
  (or (=> L2_tr0 a!1) |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (<= L1_2_0 1) (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (<= L1_2_1 1) (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0))))
  (or (=> L1_tr1 a!1) |L1#level_3!130|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 6
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (<= L1_2_0 1) (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (rewrite (= (+ L1_5_0 (* (- 1) L1_2_0)) (+ (* (- 1) L1_2_0) L1_5_0))))
      (a!3 (= (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
              (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!4 (or (<= L1_2_0 1) (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!8 (= (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
              (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!9 (or (<= L1_2_0 1) (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!12 (or (not L2_tr0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                |L2#level_3!79|))
      (a!17 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!19 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!20 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!21 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!25 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!26 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!27 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1) |L2#level_3!79|))
      (a!30 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!33 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!34 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!35 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!36 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!45 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!47 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!48 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!58 (or (not spacer_proxy!74) (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!60 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!63 (or (not spacer_proxy!75) (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
(let ((a!5 (rewrite (= (=> L2_tr0 a!4) (or (not L2_tr0) a!4))))
      (a!7 (= (or (=> L2_tr0 a!1) |L2#level_3!79|)
              (or (or (not L2_tr0) a!4) |L2#level_3!79|)))
      (a!10 (monotonicity (monotonicity (rewrite a!8) (= a!4 a!9))
                          (= (or (not L2_tr0) a!4) (or (not L2_tr0) a!9))))
      (a!11 (= (or (or (not L2_tr0) a!4) |L2#level_3!79|)
               (or (or (not L2_tr0) a!9) |L2#level_3!79|)))
      (a!13 (= (or (or (not L2_tr0) a!9) |L2#level_3!79|) a!12))
      (a!14 (= (or (or (not L2_tr0) a!4) |L2#level_3!79|) a!12))
      (a!18 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!17))
      (a!22 (monotonicity (monotonicity (rewrite a!20) (= a!19 a!21))
                          (= (or (not L2_tr0) a!19) (or (not L2_tr0) a!21))))
      (a!28 (trans (monotonicity (rewrite (= a!25 a!26))
                                 (= (or a!25 |L2#level_3!79|)
                                    (or a!26 |L2#level_3!79|)))
                   (rewrite (= (or a!26 |L2#level_3!79|) a!27))
                   (= (or a!25 |L2#level_3!79|) a!27)))
      (a!31 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!30
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!37 (monotonicity (rewrite a!35) (= (not (<= L2_4_n L2_5_0)) a!36)))
      (a!38 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!36))
      (a!46 (unit-resolution (asserted (or (not spacer_proxy!71) a!45))
                             (asserted spacer_proxy!71)
                             a!45))
      (a!59 (unit-resolution (asserted a!58)
                             (asserted spacer_proxy!74)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!64 (unit-resolution (asserted a!63)
                             (asserted spacer_proxy!75)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
(let ((a!6 (trans (monotonicity (monotonicity (monotonicity a!2 a!3)
                                              (= a!1 a!4))
                                (= (=> L2_tr0 a!1) (=> L2_tr0 a!4)))
                  a!5
                  (= (=> L2_tr0 a!1) (or (not L2_tr0) a!4))))
      (a!23 (mp (asserted (or (not L2_tr0) a!19)) a!22 (or (not L2_tr0) a!21)))
      (a!24 (monotonicity (rewrite (= a!21 (not a!18)))
                          (= (or (not L2_tr0) a!21)
                             (or (not L2_tr0) (not a!18)))))
      (a!29 (unit-resolution (mp (asserted (or a!25 |L2#level_3!79|)) a!28 a!27)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_3!79|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!32 (or a!31 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!39 (monotonicity (monotonicity (rewrite a!34) a!37 (= a!33 a!38))
                          (= (or (not L2_tr1) a!33) (or (not L2_tr1) a!38))))
      (a!41 (monotonicity (rewrite (= a!38 (not a!31)))
                          (= (or (not L2_tr1) a!38)
                             (or (not L2_tr1) (not a!31)))))
      (a!56 (or a!18 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!15 (trans (monotonicity a!6 a!7)
                   (trans (monotonicity a!10 a!11) (rewrite a!13) a!14)
                   (= (or (=> L2_tr0 a!1) |L2#level_3!79|) a!12)))
      (a!40 (mp (asserted (or (not L2_tr1) a!33)) a!39 (or (not L2_tr1) a!38))))
(let ((a!16 (mp (asserted (or (=> L2_tr0 a!1) |L2#level_3!79|)) a!15 a!12))
      (a!42 (unit-resolution (mp a!40 a!41 (or (not L2_tr1) (not a!31)))
                             (hypothesis L2_tr1)
                             (not a!31))))
(let ((a!43 (unit-resolution (def-axiom a!32)
                             a!42
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!49 (unit-resolution (def-axiom (or a!31 (= L2_4_0 L2_4_n)))
                             a!42
                             (= L2_4_0 L2_4_n))))
(let ((a!44 (th-lemma a!43 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!50 (th-lemma a!49 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!51 (lemma (th-lemma a!29
                             a!44
                             (th-lemma (th-lemma a!46 a!47) a!48)
                             a!50
                             false)
                   (not L2_tr1))))
(let ((a!52 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             a!51
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!53 (unit-resolution (mp a!23 a!24 (or (not L2_tr0) (not a!18)))
                             a!52
                             (not a!18))))
(let ((a!54 (unit-resolution (def-axiom (or a!18 (= L1_2_0 L2_2_n)))
                             a!53
                             (= L1_2_0 L2_2_n)))
      (a!57 (unit-resolution (def-axiom a!56)
                             a!53
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!62 (unit-resolution (def-axiom (or a!18 (= L2_5_n 0)))
                             a!53
                             (= L2_5_n 0))))
(let ((a!55 (th-lemma (symm a!54 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!61 (th-lemma (symm a!54 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0))))
  (unit-resolution a!16
                   (th-lemma a!55 a!57 a!46 a!59 a!60)
                   (th-lemma a!61
                             (th-lemma a!62 (>= L2_5_n 0))
                             a!64
                             (not (<= L1_2_0 1)))
                   (asserted (not |L2#level_3!79|))
                   a!52
                   false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 3 new size: 3
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or a!1 a!2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 L2 (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or a!1 a!2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L2 (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or a!1 a!2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or a!1 a!2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 2) |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or a!1 a!2 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or a!1 a!2 (<= (+ L2_4_1 (* (- 1) L2_5_1)) 2))))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or a!1 a!2 (<= (+ L2_4_2 (* (- 1) L2_5_2)) 2))))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or a!1 a!2 (<= (+ L2_4_3 (* (- 1) L2_5_3)) 2))))
  (or (=> query!0_dummy a!3) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or a!1 a!2 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (or (=> L2_tr1 a!3) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 6
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!3 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= L2_4_n L1_5_0)))
      (a!4 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!5 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!9 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!10 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!18 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!20 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!21 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!22 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!23 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!32 (or (not spacer_proxy!25) (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!39 (or (not spacer_proxy!24) (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!46 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!55 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (not (<= L1_2_0 1))
                (<= L1_0_0 0)
                (<= L1_2_0 0)
                (not (<= L1_0_0 1))
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!56 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!57 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!58 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (not (<= L1_2_0 1))
                (<= L1_0_0 0)
                (<= L1_2_0 0)
                (not (<= L1_0_0 1))
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!61 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!62 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (not (<= L1_2_0 1))
                (<= L1_0_0 0)
                (<= L1_2_0 0)
                (not (<= L1_0_0 1))
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!64 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (not (<= L1_2_0 1))
                (<= L1_0_0 0)
                (<= L1_2_0 0)
                (not (<= L1_0_0 1))
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!75 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!76 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!77 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!78 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!80 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!81 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!92 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!93 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!97 (or (not spacer_proxy!22) (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!100 (or (not spacer_proxy!21) (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!104 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
(let ((a!2 (or (not (= L2_5_n 0))
               (not (= L1_0_0 L2_0_n))
               (not (= L1_2_0 L2_2_n))
               (not (= L1_4_0 L2_4_n))
               (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
               (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
               (not (= L1_1_0 (select aux!15_n L2_0_n)))
               (not (= L1_3_0 (select aux!14_n L2_2_n)))
               (not (= L2_1_n (select aux!12_n L2_0_n)))
               (not (= L2_3_n (select aux!13_n L2_2_n)))
               a!1))
      (a!6 (monotonicity (monotonicity (rewrite a!4) (= a!3 a!5))
                         (= (or (not L2_tr0) a!3) (or (not L2_tr0) a!5))))
      (a!11 (or a!9 a!10 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2)))
      (a!14 (or (not L2_tr1)
                a!9
                a!10
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2)
                |L2#level_4!81|))
      (a!19 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!18
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!24 (monotonicity (rewrite a!22) (= (not (<= L2_4_n L2_5_0)) a!23)))
      (a!25 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!23))
      (a!33 (unit-resolution (asserted a!32)
                             (asserted spacer_proxy!25)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!40 (unit-resolution (asserted a!39)
                             (asserted spacer_proxy!24)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!47 (unit-resolution (asserted (or (not spacer_proxy!23) a!46))
                             (asserted spacer_proxy!23)
                             a!46))
      (a!59 (rewrite (= (=> L2_tr0 a!58) (or (not L2_tr0) a!58))))
      (a!63 (monotonicity (monotonicity (rewrite a!61) (= a!58 a!62))
                          (= (or (not L2_tr0) a!58) (or (not L2_tr0) a!62))))
      (a!65 (rewrite (= (or (not L2_tr0) a!62) a!64)))
      (a!79 (monotonicity (monotonicity (monotonicity a!76 a!77) (= a!75 a!78))
                          (= (or (not spacer_proxy!0) a!75)
                             (or (not spacer_proxy!0) a!78))))
      (a!82 (monotonicity (monotonicity (rewrite a!80) (= a!78 a!81))
                          (= (or (not spacer_proxy!0) a!78)
                             (or (not spacer_proxy!0) a!81))))
      (a!98 (unit-resolution (asserted a!97)
                             (asserted spacer_proxy!22)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!101 (unit-resolution (asserted a!100)
                              (asserted spacer_proxy!21)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
(let ((a!7 (mp (asserted (or (not L2_tr0) a!3)) a!6 (or (not L2_tr0) a!5)))
      (a!8 (monotonicity (rewrite (= a!5 (not a!2)))
                         (= (or (not L2_tr0) a!5) (or (not L2_tr0) (not a!2)))))
      (a!12 (rewrite (= (=> L2_tr1 a!11) (or (not L2_tr1) a!11))))
      (a!13 (= (or (=> L2_tr1 a!11) |L2#level_4!81|)
               (or (or (not L2_tr1) a!11) |L2#level_4!81|)))
      (a!15 (= (or (or (not L2_tr1) a!11) |L2#level_4!81|) a!14))
      (a!26 (monotonicity (monotonicity (rewrite a!21) a!24 (= a!20 a!25))
                          (= (or (not L2_tr1) a!20) (or (not L2_tr1) a!25))))
      (a!28 (monotonicity (rewrite (= a!25 (not a!19)))
                          (= (or (not L2_tr1) a!25)
                             (or (not L2_tr1) (not a!19)))))
      (a!34 (or a!19 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!51 (or a!2 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!60 (trans (monotonicity (monotonicity (monotonicity a!56 a!57)
                                               (= a!55 a!58))
                                 (= (=> L2_tr0 a!55) (=> L2_tr0 a!58)))
                   a!59
                   (= (=> L2_tr0 a!55) (or (not L2_tr0) a!58))))
      (a!66 (trans a!63 a!65 (= (or (not L2_tr0) a!58) a!64)))
      (a!68 (def-axiom (or a!2 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!69 (def-axiom (or a!2
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!72 (def-axiom (or a!2 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!83 (trans a!79
                   a!82
                   (= (or (not spacer_proxy!0) a!75)
                      (or (not spacer_proxy!0) a!81))))
      (a!85 (def-axiom (or a!2 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!86 (def-axiom (or a!2
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!89 (def-axiom (or a!2 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!103 (th-lemma a!98 a!40 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!105 (th-lemma a!101 a!33 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
(let ((a!16 (trans (monotonicity a!12 a!13)
                   (rewrite a!15)
                   (= (or (=> L2_tr1 a!11) |L2#level_4!81|) a!14)))
      (a!27 (mp (asserted (or (not L2_tr1) a!20)) a!26 (or (not L2_tr1) a!25)))
      (a!67 (mp (asserted (=> L2_tr0 a!55))
                (trans a!60 a!66 (= (=> L2_tr0 a!55) a!64))
                a!64))
      (a!84 (mp (asserted (or (not spacer_proxy!0) a!75))
                a!83
                (or (not spacer_proxy!0) a!81))))
(let ((a!17 (mp (asserted (or (=> L2_tr1 a!11) |L2#level_4!81|)) a!16 a!14))
      (a!29 (unit-resolution (mp a!27 a!28 (or (not L2_tr1) (not a!19)))
                             (hypothesis L2_tr1)
                             (not a!19))))
(let ((a!30 (unit-resolution (def-axiom (or a!19 (= L2_2_0 L2_2_n)))
                             a!29
                             (= L2_2_0 L2_2_n)))
      (a!35 (unit-resolution (def-axiom a!34)
                             a!29
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!44 (unit-resolution (def-axiom (or a!19 (= L2_4_0 L2_4_n)))
                             a!29
                             (= L2_4_0 L2_4_n))))
(let ((a!31 (th-lemma a!30 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!36 (th-lemma a!35 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!38 (th-lemma a!30 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!41 (th-lemma a!35 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!45 (th-lemma a!44 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!37 (th-lemma a!31 a!33 a!36 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!42 (th-lemma a!38 a!40 a!41 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!43 (unit-resolution a!17
                             a!37
                             (asserted (not |L2#level_4!81|))
                             (hypothesis L2_tr1)
                             a!42
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
(let ((a!48 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!43 a!36 a!45 a!47 false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!49 (unit-resolution (mp a!7 a!8 (or (not L2_tr0) (not a!2)))
                             a!48
                             (not a!2))))
(let ((a!50 (unit-resolution (def-axiom (or a!2 (= L2_5_n 0)))
                             a!49
                             (= L2_5_n 0)))
      (a!52 (unit-resolution (def-axiom a!51)
                             a!49
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!53 (unit-resolution (def-axiom (or a!2 (= L1_2_0 L2_2_n)))
                             a!49
                             (= L1_2_0 L2_2_n)))
      (a!70 (symm (unit-resolution a!69
                                   a!49
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!73 (symm (unit-resolution a!72
                                   a!49
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!87 (symm (unit-resolution a!86
                                   a!49
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!90 (symm (unit-resolution a!89
                                   a!49
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!95 (unit-resolution (def-axiom (or a!2 (= L1_0_0 L2_0_n)))
                             a!49
                             (= L1_0_0 L2_0_n))))
(let ((a!54 (th-lemma (symm a!53 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!71 (trans (unit-resolution a!68
                                    a!49
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!70
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!88 (trans (unit-resolution a!85
                                    a!49
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!87
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!96 (th-lemma (symm a!95 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!99 (th-lemma (symm a!95 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!102 (th-lemma (symm a!53 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0))))
(let ((a!74 (th-lemma (trans a!71 a!73 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!91 (th-lemma (trans a!88 a!90 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!94 (th-lemma (th-lemma a!74
                                (unit-resolution a!84
                                                 (asserted spacer_proxy!0)
                                                 a!81)
                                a!91
                                a!92)
                      a!93)))
(let ((a!106 (unit-resolution a!67
                              a!94
                              a!48
                              (th-lemma a!96
                                        a!98
                                        (th-lemma a!50 (>= L2_5_n 0))
                                        (not (<= L1_0_0 0)))
                              (th-lemma a!54
                                        a!40
                                        (th-lemma a!50 (<= L2_5_n 0))
                                        (<= L1_2_0 1))
                              (th-lemma a!99
                                        a!101
                                        (th-lemma a!50 (<= L2_5_n 0))
                                        (<= L1_0_0 1))
                              (th-lemma a!102
                                        (th-lemma a!103 a!33 a!104)
                                        a!105
                                        (th-lemma a!50 (>= L2_5_n 0))
                                        (not (<= L1_2_0 0)))
                              (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0))))
  (th-lemma (th-lemma (th-lemma a!50 (>= L2_5_n 0))
                      a!47
                      a!52
                      (not (<= L1_5_0 1)))
            (th-lemma a!50 (<= L2_5_n 0))
            a!54
            a!40
            a!106
            false)))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_5_n (* (- 1) L2_2_n)) (- 2)))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_5_n (* (- 1) L2_2_n)) (- 2)))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_5_n (* (- 1) L2_2_n)) (- 2)))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!2
      a!3))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 6
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!3 (and (= L2_0_0 L2_0_n)
                (= L2_2_0 L2_2_n)
                (= L2_4_0 L2_4_n)
                (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                (= L2_1_0 (select aux!21_n L2_0_n))
                (= L2_3_0 (select aux!20_n L2_2_n))
                (= L2_5_n (+ 1 L2_5_0))
                (= L2_1_n (select aux!16_n L2_0_n))
                (= L2_3_n (select aux!17_n L2_2_n))
                (not (<= L2_4_n L2_5_0))))
      (a!4 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!5 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!6 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!12 (or (not (= L1_0_0 0))
                (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!13 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!14 (= (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!15 (or (not (= L1_0_0 0))
                (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!19 (= (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!20 (or (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!23 (or (not L2_tr0)
                (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))
                |L2#level_5!143|))
      (a!28 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!30 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!31 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!32 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!38 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!49 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!50 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!51 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!52 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!54 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!55 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!66 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!69 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!71 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!78 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!80 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!92 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!93 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!95 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!96 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!97 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!98 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
               (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!99 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!105 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!106 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
                (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!107 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!116 (hypothesis (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!120 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!123 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!144 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!2 (or (not (= L2_0_0 L2_0_n))
               (not (= L2_2_0 L2_2_n))
               (not (= L2_4_0 L2_4_n))
               (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
               (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
               (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
               (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
               (not (= L2_1_0 (select aux!21_n L2_0_n)))
               (not (= L2_3_0 (select aux!20_n L2_2_n)))
               a!1
               (not (= L2_1_n (select aux!16_n L2_0_n)))
               (not (= L2_3_n (select aux!17_n L2_2_n)))
               (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!7 (monotonicity (rewrite a!5) (= (not (<= L2_4_n L2_5_0)) a!6)))
      (a!8 (and (= L2_0_0 L2_0_n)
                (= L2_2_0 L2_2_n)
                (= L2_4_0 L2_4_n)
                (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                (= L2_1_0 (select aux!21_n L2_0_n))
                (= L2_3_0 (select aux!20_n L2_2_n))
                (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                (= L2_1_n (select aux!16_n L2_0_n))
                (= L2_3_n (select aux!17_n L2_2_n))
                a!6))
      (a!16 (rewrite (= (=> L2_tr0 a!15) (or (not L2_tr0) a!15))))
      (a!18 (= (or (=> L2_tr0 a!12) |L2#level_5!143|)
               (or (or (not L2_tr0) a!15) |L2#level_5!143|)))
      (a!21 (monotonicity (monotonicity (rewrite a!19) (= a!15 a!20))
                          (= (or (not L2_tr0) a!15) (or (not L2_tr0) a!20))))
      (a!22 (= (or (or (not L2_tr0) a!15) |L2#level_5!143|)
               (or (or (not L2_tr0) a!20) |L2#level_5!143|)))
      (a!24 (= (or (or (not L2_tr0) a!20) |L2#level_5!143|) a!23))
      (a!25 (= (or (or (not L2_tr0) a!15) |L2#level_5!143|) a!23))
      (a!29 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!28))
      (a!33 (monotonicity (monotonicity (rewrite a!31) (= a!30 a!32))
                          (= (or (not L2_tr0) a!30) (or (not L2_tr0) a!32))))
      (a!39 (unit-resolution (asserted (or (not spacer_proxy!3) a!38))
                             (asserted spacer_proxy!3)
                             a!38))
      (a!53 (monotonicity (monotonicity (monotonicity a!50 a!51) (= a!49 a!52))
                          (= (or (not spacer_proxy!0) a!49)
                             (or (not spacer_proxy!0) a!52))))
      (a!56 (monotonicity (monotonicity (rewrite a!54) (= a!52 a!55))
                          (= (or (not spacer_proxy!0) a!52)
                             (or (not spacer_proxy!0) a!55))))
      (a!70 (unit-resolution (asserted a!69)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!72 (unit-resolution (asserted a!71)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!79 (unit-resolution (asserted a!78)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!81 (unit-resolution (asserted a!80)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!94 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!92
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
                a!93))
      (a!100 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                 a!92
                 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                 (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
                 a!99))
      (a!108 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                 a!92
                 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                 (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                 a!107))
      (a!111 (or (not L2_tr1)
                 (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                 a!92
                 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                 (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                 a!107
                 |L2#level_5!143|)))
(let ((a!9 (monotonicity (monotonicity (rewrite a!4) a!7 (= a!3 a!8))
                         (= (or (not L2_tr1) a!3) (or (not L2_tr1) a!8))))
      (a!11 (monotonicity (rewrite (= a!8 (not a!2)))
                          (= (or (not L2_tr1) a!8) (or (not L2_tr1) (not a!2)))))
      (a!17 (trans (monotonicity (monotonicity (monotonicity a!13 a!14)
                                               (= a!12 a!15))
                                 (= (=> L2_tr0 a!12) (=> L2_tr0 a!15)))
                   a!16
                   (= (=> L2_tr0 a!12) (or (not L2_tr0) a!15))))
      (a!34 (mp (asserted (or (not L2_tr0) a!30)) a!33 (or (not L2_tr0) a!32)))
      (a!35 (monotonicity (rewrite (= a!32 (not a!29)))
                          (= (or (not L2_tr0) a!32)
                             (or (not L2_tr0) (not a!29)))))
      (a!40 (or a!29 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!42 (def-axiom (or a!29 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!43 (def-axiom (or a!29
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!46 (def-axiom (or a!29 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!57 (trans a!53
                   a!56
                   (= (or (not spacer_proxy!0) a!49)
                      (or (not spacer_proxy!0) a!55))))
      (a!59 (def-axiom (or a!29 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!60 (def-axiom (or a!29
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!63 (def-axiom (or a!29 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!67 (unit-resolution (def-axiom (or a!29 (= L2_5_n 0)))
                             (hypothesis (not a!29))
                             (= L2_5_n 0)))
      (a!68 (unit-resolution (def-axiom (or a!29 (= L1_2_0 L2_2_n)))
                             (hypothesis (not a!29))
                             (= L1_2_0 L2_2_n)))
      (a!89 (or a!2 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!101 (monotonicity (monotonicity (monotonicity a!95 a!96)
                                         (monotonicity (monotonicity a!97 a!98)
                                                       (= a!93 a!99))
                                         (= a!94 a!100))
                           (= (=> L2_tr1 a!94) (=> L2_tr1 a!100))))
      (a!102 (rewrite (= (=> L2_tr1 a!100) (or (not L2_tr1) a!100))))
      (a!104 (= (or (=> L2_tr1 a!94) |L2#level_5!143|)
                (or (or (not L2_tr1) a!100) |L2#level_5!143|)))
      (a!109 (monotonicity (monotonicity (rewrite a!105)
                                         (monotonicity (rewrite a!106)
                                                       (= a!99 a!107))
                                         (= a!100 a!108))
                           (= (or (not L2_tr1) a!100) (or (not L2_tr1) a!108))))
      (a!110 (= (or (or (not L2_tr1) a!100) |L2#level_5!143|)
                (or (or (not L2_tr1) a!108) |L2#level_5!143|)))
      (a!112 (= (or (or (not L2_tr1) a!108) |L2#level_5!143|) a!111))
      (a!113 (= (or (or (not L2_tr1) a!100) |L2#level_5!143|) a!111))
      (a!125 (th-lemma a!81 a!70 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!128 (def-axiom (or a!2 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!129 (def-axiom (or a!2
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!131 (def-axiom (or a!2
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!133 (def-axiom (or a!2 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!136 (def-axiom (or a!2 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!137 (def-axiom (or a!2
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!139 (def-axiom (or a!2
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!141 (def-axiom (or a!2 (= L2_1_n (select aux!16_n L2_0_n))))))
(let ((a!10 (mp (asserted (or (not L2_tr1) a!3)) a!9 (or (not L2_tr1) a!8)))
      (a!26 (trans (monotonicity a!17 a!18)
                   (trans (monotonicity a!21 a!22) (rewrite a!24) a!25)
                   (= (or (=> L2_tr0 a!12) |L2#level_5!143|) a!23)))
      (a!36 (unit-resolution (mp a!34 a!35 (or (not L2_tr0) (not a!29)))
                             (hypothesis L2_tr0)
                             (not a!29)))
      (a!58 (mp (asserted (or (not spacer_proxy!0) a!49))
                a!57
                (or (not spacer_proxy!0) a!55)))
      (a!73 (monotonicity (trans a!68
                                 (th-lemma a!70 a!72 (= L2_2_n L2_5_n))
                                 (= L1_2_0 L2_5_n))
                          (= (= L1_2_0 0) (= L2_5_n 0))))
      (a!103 (trans a!101 a!102 (= (=> L2_tr1 a!94) (or (not L2_tr1) a!100)))))
(let ((a!27 (mp (asserted (or (=> L2_tr0 a!12) |L2#level_5!143|)) a!26 a!23))
      (a!37 (unit-resolution (def-axiom (or a!29 (= L2_5_n 0)))
                             a!36
                             (= L2_5_n 0)))
      (a!41 (unit-resolution (def-axiom a!40)
                             a!36
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!44 (symm (unit-resolution a!43
                                   a!36
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!47 (symm (unit-resolution a!46
                                   a!36
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!61 (symm (unit-resolution a!60
                                   a!36
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!64 (symm (unit-resolution a!63
                                   a!36
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!74 (mp a!67 (symm a!73 (= (= L2_5_n 0) (= L1_2_0 0))) (= L1_2_0 0)))
      (a!77 (unit-resolution (def-axiom (or a!29 (= L1_0_0 L2_0_n)))
                             a!36
                             (= L1_0_0 L2_0_n)))
      (a!114 (trans (monotonicity a!103 a!104)
                    (trans (monotonicity a!109 a!110) (rewrite a!112) a!113)
                    (= (or (=> L2_tr1 a!94) |L2#level_5!143|) a!111))))
(let ((a!45 (trans (unit-resolution a!42
                                    a!36
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!44
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!62 (trans (unit-resolution a!59
                                    a!36
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!61
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!75 (unit-resolution (hypothesis (not (= L1_2_0 0))) a!74 false))
      (a!82 (monotonicity (trans a!77
                                 (th-lemma a!79 a!81 (= L2_0_n L2_5_n))
                                 (= L1_0_0 L2_5_n))
                          (= (= L1_0_0 0) (= L2_5_n 0))))
      (a!115 (mp (asserted (or (=> L2_tr1 a!94) |L2#level_5!143|)) a!114 a!111)))
(let ((a!48 (th-lemma (trans a!45 a!47 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!65 (th-lemma (trans a!62 a!64 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!76 (unit-resolution (lemma a!75 (or a!29 (= L1_2_0 0)))
                             a!36
                             (= L1_2_0 0)))
      (a!83 (mp a!37 (symm a!82 (= (= L2_5_n 0) (= L1_0_0 0))) (= L1_0_0 0))))
(let ((a!84 (unit-resolution a!27
                             (th-lemma (th-lemma a!37 (>= L2_5_n 0))
                                       a!39
                                       a!41
                                       (not (<= L1_5_0 0)))
                             (th-lemma a!48
                                       (unit-resolution a!58
                                                        (asserted spacer_proxy!0)
                                                        a!55)
                                       a!65
                                       a!66)
                             (hypothesis L2_tr0)
                             a!76
                             a!83
                             (asserted (not |L2#level_5!143|))
                             false)))
(let ((a!85 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma a!84 (not L2_tr0))
                             (asserted (not L2_ext0_n))
                             L2_tr1)))
(let ((a!86 (unit-resolution (mp a!10 a!11 (or (not L2_tr1) (not a!2)))
                             a!85
                             (not a!2))))
(let ((a!87 (unit-resolution (def-axiom (or a!2 (= L2_2_0 L2_2_n)))
                             a!86
                             (= L2_2_0 L2_2_n)))
      (a!90 (unit-resolution (def-axiom a!89)
                             a!86
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!118 (unit-resolution (def-axiom (or a!2 (= L2_0_0 L2_0_n)))
                              a!86
                              (= L2_0_0 L2_0_n)))
      (a!121 (unit-resolution (def-axiom (or a!2 (= L2_4_0 L2_4_n)))
                              a!86
                              (= L2_4_0 L2_4_n)))
      (a!130 (trans (unit-resolution a!128
                                     a!86
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!129
                                     a!86
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!134 (symm (unit-resolution a!133
                                    a!86
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!138 (trans (unit-resolution a!136
                                     a!86
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!137
                                     a!86
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!142 (symm (unit-resolution a!141
                                    a!86
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n))))
(let ((a!88 (th-lemma a!87 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!91 (th-lemma a!90 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!117 (th-lemma a!90 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!119 (th-lemma a!118 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!122 (th-lemma a!121 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!124 (th-lemma a!118 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!126 (th-lemma a!87 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!132 (trans a!130
                    (unit-resolution a!131
                                     a!86
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!140 (trans a!138
                    (unit-resolution a!139
                                     a!86
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n)))))
(let ((a!127 (th-lemma a!124 a!125 a!126 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!135 (th-lemma (trans a!132 a!134 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!143 (th-lemma (trans a!140 a!142 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0))))
(let ((a!145 (unit-resolution a!115
                              (lemma (th-lemma a!116 a!117 a!119 a!79 false)
                                     a!120)
                              a!85
                              (asserted (not |L2#level_5!143|))
                              (th-lemma a!122 a!39 a!117 a!123)
                              a!127
                              (th-lemma a!135
                                        (unit-resolution a!58
                                                         (asserted spacer_proxy!0)
                                                         a!55)
                                        a!143
                                        a!144)
                              a!92)))
  (th-lemma a!88 a!91 a!72 a!145 false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_5_n (* (- 1) L2_2_n)) (- 1)))
(= L2_0_n L2_5_n)
(= L2_2_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_5_n (* (- 1) L2_2_n)) (- 1)))
(= L2_0_n L2_5_n)
(= L2_2_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_5_n (* (- 1) L2_2_n)) (- 1)))
(= L2_0_n L2_5_n)
(= L2_2_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (not (<= L2_2_n L2_5_n))
      (not (>= L2_0_n L2_5_n))
      a!1))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 5 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 6 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 6 depth: 6
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  false)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  2112)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 2))
(define-fun L2_1_3 () Int
  1)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!1546))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!1550))
(define-fun query!0_0_n () Int
  (- 1))
(define-fun L2_3_3 () Int
  4135)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  6926)
(define-fun L2_1_2 () Int
  2112)
(define-fun query!0_3_n () Int
  4135)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!1549))
(define-fun L2_3_1 () Int
  4135)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  6926)
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |query!0#level_8!1203| () Bool
  false)
(define-fun L2_0_2 () Int
  (- 2))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!1548))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!1544))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  0)
(define-fun |query!0#level_4!80| () Bool
  true)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun |query!0#level_7!853| () Bool
  false)
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!1545))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  true)
(define-fun query!0_4_n () Int
  (- 2))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  2112)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!1547))
(define-fun L2_0_0 () Int
  (- 1))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!1552))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!1543))
(define-fun L2_2_0 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!1551))
(define-fun L2_3_2 () Int
  0)
(define-fun L2_2_1 () Int
  6926)
(define-fun L2_4_0 () Int
  0)
(define-fun L2_1_0 () Int
  1)
(define-fun k!1543 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!1551 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 2112
    2112))
(define-fun k!1548 ((x!0 Int)) Int
  (ite (= x!0 6926) 4135
    4135))
(define-fun k!1545 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!1550 ((x!0 Int)) Int
  (ite (= x!0 6926) 4135
    4135))
(define-fun k!1547 ((x!0 Int)) Int
  (ite (= x!0 6926) 4135
  (ite (= x!0 (- 1)) 0
    4135)))
(define-fun k!1544 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
  (ite (= x!0 (- 2)) 2112
    1)))
(define-fun k!1552 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))
(define-fun k!1549 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 2112
    2112))
(define-fun k!1546 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L2_1_3) L2_3_2)))))
  (and (not (<= L2_5_3 L2_0_2))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 6
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!1568))
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun spacer_proxy!62 () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L2_4_n () Int
  1)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!61 () Bool
  false)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!1570))
(define-fun L2_0_n () Int
  0)
(define-fun spacer_proxy!42 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!71 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!1569))
(define-fun spacer_proxy!23 () Bool
  false)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  true)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun spacer_proxy!57 () Bool
  false)
(define-fun L2_1_n () Int
  591)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!1567))
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!1566))
(define-fun L2_3_0 () Int
  590)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!59 () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!1565))
(define-fun spacer_proxy!60 () Bool
  false)
(define-fun L2_3_n () Int
  590)
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun L2_2_0 () Int
  0)
(define-fun spacer_proxy!26 () Bool
  false)
(define-fun spacer_proxy!56 () Bool
  false)
(define-fun spacer_proxy!80 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  1)
(define-fun L2_1_0 () Int
  591)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!1567 ((x!0 Int)) Int
  (ite (= x!0 0) 590
    590))
(define-fun k!1568 ((x!0 Int)) Int
  (ite (= x!0 0) 590
    590))
(define-fun k!1565 ((x!0 Int)) Int
  (ite (= x!0 0) 591
    591))
(define-fun k!1569 ((x!0 Int)) Int
  (ite (= x!0 0) 591
    591))
(define-fun k!1566 ((x!0 Int)) Int
  (ite (= x!0 0) 591
    591))
(define-fun k!1570 ((x!0 Int)) Int
  (ite (= x!0 0) 590
    590))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ (* (- 1) L2_1_0) L2_3_0)))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 6
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (not (<= L1_2_0 1))
               (<= L1_0_0 0)
               (<= L1_2_0 0)
               (not (<= L1_0_0 1))
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!2 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!3 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!4 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (not (<= L1_2_0 1))
               (<= L1_0_0 0)
               (<= L1_2_0 0)
               (not (<= L1_0_0 1))
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!7 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
              (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!8 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
               (not (<= L1_2_0 1))
               (<= L1_0_0 0)
               (<= L1_2_0 0)
               (not (<= L1_0_0 1))
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!10 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (not (<= L1_2_0 1))
                (<= L1_0_0 0)
                (<= L1_2_0 0)
                (not (<= L1_0_0 1))
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!14 (or (not spacer_proxy!24) (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!16 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!18 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!19 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!20 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!24 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!25 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!33 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!35 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!36 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!37 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!38 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!47 (or (not spacer_proxy!25) (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!59 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!68 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!77 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!86 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!87 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!90 (or (not spacer_proxy!22) (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!93 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!94 (or (not spacer_proxy!21) (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
(let ((a!5 (rewrite (= (=> L2_tr0 a!4) (or (not L2_tr0) a!4))))
      (a!9 (monotonicity (monotonicity (rewrite a!7) (= a!4 a!8))
                         (= (or (not L2_tr0) a!4) (or (not L2_tr0) a!8))))
      (a!11 (rewrite (= (or (not L2_tr0) a!8) a!10)))
      (a!15 (unit-resolution (asserted a!14)
                             (asserted spacer_proxy!24)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!17 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!16))
      (a!21 (monotonicity (monotonicity (rewrite a!19) (= a!18 a!20))
                          (= (or (not L2_tr0) a!18) (or (not L2_tr0) a!20))))
      (a!26 (or a!24 a!25 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2)))
      (a!29 (or (not L2_tr1)
                a!24
                a!25
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2)
                |L2#level_4!81|))
      (a!34 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!33
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!39 (monotonicity (rewrite a!37) (= (not (<= L2_4_n L2_5_0)) a!38)))
      (a!40 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!38))
      (a!48 (unit-resolution (asserted a!47)
                             (asserted spacer_proxy!25)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!60 (unit-resolution (asserted (or (not spacer_proxy!23) a!59))
                             (asserted spacer_proxy!23)
                             a!59))
      (a!78 (unit-resolution (asserted (or (not spacer_proxy!14) a!77))
                             (asserted spacer_proxy!14)
                             a!77))
      (a!91 (unit-resolution (asserted a!90)
                             (asserted spacer_proxy!22)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!95 (unit-resolution (asserted a!94)
                             (asserted spacer_proxy!21)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
(let ((a!6 (trans (monotonicity (monotonicity (monotonicity a!2 a!3)
                                              (= a!1 a!4))
                                (= (=> L2_tr0 a!1) (=> L2_tr0 a!4)))
                  a!5
                  (= (=> L2_tr0 a!1) (or (not L2_tr0) a!4))))
      (a!12 (trans a!9 a!11 (= (or (not L2_tr0) a!4) a!10)))
      (a!22 (mp (asserted (or (not L2_tr0) a!18)) a!21 (or (not L2_tr0) a!20)))
      (a!23 (monotonicity (rewrite (= a!20 (not a!17)))
                          (= (or (not L2_tr0) a!20)
                             (or (not L2_tr0) (not a!17)))))
      (a!27 (rewrite (= (=> L2_tr1 a!26) (or (not L2_tr1) a!26))))
      (a!28 (= (or (=> L2_tr1 a!26) |L2#level_4!81|)
               (or (or (not L2_tr1) a!26) |L2#level_4!81|)))
      (a!30 (= (or (or (not L2_tr1) a!26) |L2#level_4!81|) a!29))
      (a!41 (monotonicity (monotonicity (rewrite a!36) a!39 (= a!35 a!40))
                          (= (or (not L2_tr1) a!35) (or (not L2_tr1) a!40))))
      (a!43 (monotonicity (rewrite (= a!40 (not a!34)))
                          (= (or (not L2_tr1) a!40)
                             (or (not L2_tr1) (not a!34)))))
      (a!49 (or a!34 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!64 (or a!17 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!70 (def-axiom (or a!17 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!71 (def-axiom (or a!17
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!74 (def-axiom (or a!17 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!79 (def-axiom (or a!17 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!80 (def-axiom (or a!17
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!83 (def-axiom (or a!17 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!92 (th-lemma a!91 a!15 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!96 (th-lemma a!48 a!95 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
(let ((a!13 (mp (asserted (=> L2_tr0 a!1))
                (trans a!6 a!12 (= (=> L2_tr0 a!1) a!10))
                a!10))
      (a!31 (trans (monotonicity a!27 a!28)
                   (rewrite a!30)
                   (= (or (=> L2_tr1 a!26) |L2#level_4!81|) a!29)))
      (a!42 (mp (asserted (or (not L2_tr1) a!35)) a!41 (or (not L2_tr1) a!40)))
      (a!97 (th-lemma a!15 a!96 (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
(let ((a!32 (mp (asserted (or (=> L2_tr1 a!26) |L2#level_4!81|)) a!31 a!29))
      (a!44 (unit-resolution (mp a!42 a!43 (or (not L2_tr1) (not a!34)))
                             (hypothesis L2_tr1)
                             (not a!34))))
(let ((a!45 (unit-resolution (def-axiom (or a!34 (= L2_2_0 L2_2_n)))
                             a!44
                             (= L2_2_0 L2_2_n)))
      (a!50 (unit-resolution (def-axiom a!49)
                             a!44
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!57 (unit-resolution (def-axiom (or a!34 (= L2_4_0 L2_4_n)))
                             a!44
                             (= L2_4_0 L2_4_n))))
(let ((a!46 (th-lemma a!45 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!51 (th-lemma a!50 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!53 (th-lemma a!45 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!54 (th-lemma a!50 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!58 (th-lemma a!57 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!52 (th-lemma a!46 a!48 a!51 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!55 (th-lemma a!53 a!15 a!54 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!56 (unit-resolution a!32
                             a!52
                             (asserted (not |L2#level_4!81|))
                             (hypothesis L2_tr1)
                             a!55
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
(let ((a!61 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!56 a!51 a!58 a!60 false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!62 (unit-resolution (mp a!22 a!23 (or (not L2_tr0) (not a!17)))
                             a!61
                             (not a!17))))
(let ((a!63 (unit-resolution (def-axiom (or a!17 (= L2_5_n 0)))
                             a!62
                             (= L2_5_n 0)))
      (a!65 (unit-resolution (def-axiom a!64)
                             a!62
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!66 (unit-resolution (def-axiom (or a!17 (= L1_2_0 L2_2_n)))
                             a!62
                             (= L1_2_0 L2_2_n)))
      (a!72 (symm (unit-resolution a!71
                                   a!62
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!75 (symm (unit-resolution a!74
                                   a!62
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!81 (symm (unit-resolution a!80
                                   a!62
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!84 (symm (unit-resolution a!83
                                   a!62
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!88 (unit-resolution (def-axiom (or a!17 (= L1_0_0 L2_0_n)))
                             a!62
                             (= L1_0_0 L2_0_n))))
(let ((a!67 (th-lemma (symm a!66 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!73 (trans (unit-resolution a!70
                                    a!62
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!72
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!82 (trans (unit-resolution a!79
                                    a!62
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!81
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!89 (th-lemma (symm a!88 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!98 (th-lemma (symm a!88 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!99 (th-lemma (symm a!66 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0))))
(let ((a!69 (th-lemma a!15
                      (th-lemma (th-lemma a!63 (>= L2_5_n 0))
                                a!60
                                a!65
                                (not (<= L1_5_0 1)))
                      a!67
                      (th-lemma a!63 (<= L2_5_n 0))
                      a!68))
      (a!76 (th-lemma (trans a!73 a!75 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!85 (th-lemma (trans a!82 a!84 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
  (unit-resolution a!13
                   a!69
                   (th-lemma a!15
                             a!67
                             (th-lemma a!63 (<= L2_5_n 0))
                             (<= L1_2_0 1))
                   a!61
                   (th-lemma (th-lemma a!76 a!78 a!85 a!86) a!87)
                   (th-lemma a!89
                             (th-lemma a!92 a!48 a!93)
                             (th-lemma a!63 (>= L2_5_n 0))
                             (not (<= L1_0_0 0)))
                   (th-lemma a!97
                             a!98
                             (th-lemma a!63 (<= L2_5_n 0))
                             (<= L1_0_0 1))
                   (th-lemma a!99
                             a!48
                             (th-lemma a!63 (>= L2_5_n 0))
                             (not (<= L1_2_0 0)))
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!2
      a!3))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 6
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!4 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!5 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!6 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!7 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!13 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!14 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!15 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!24 (hypothesis (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!25 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!28 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!29 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!30 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!31 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!37 (or (not (<= L1_0_0 0))
                (not (<= L1_2_0 0))
                (not (>= L1_0_0 0))
                (not (>= L1_2_0 0))
                (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_5_0 0)))
      (a!38 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!39 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!40 (or (not (<= L1_0_0 0))
                (not (<= L1_2_0 0))
                (not (>= L1_0_0 0))
                (not (>= L1_2_0 0))
                (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_5_0 0)))
      (a!44 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!45 (or (not (<= L1_0_0 0))
                (not (<= L1_2_0 0))
                (not (>= L1_0_0 0))
                (not (>= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)))
      (a!48 (or (not L2_tr0)
                (not (<= L1_0_0 0))
                (not (<= L1_2_0 0))
                (not (>= L1_0_0 0))
                (not (>= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                |L2#level_5!143|))
      (a!53 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!56 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!57 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!58 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!69 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!78 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!79 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!81 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!85 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!91 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!93 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!97 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!106 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!107 (hypothesis (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!110 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!111 (hypothesis (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!128 (not (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!131 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2))
      (a!8 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!7))
      (a!16 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                a!1
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!15))
      (a!19 (or (not L2_tr1)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                a!1
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!15
                |L2#level_5!143|))
      (a!26 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!25
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!32 (monotonicity (rewrite a!30) (= (not (<= L2_4_n L2_5_0)) a!31)))
      (a!33 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!31))
      (a!41 (rewrite (= (=> L2_tr0 a!40) (or (not L2_tr0) a!40))))
      (a!43 (= (or (=> L2_tr0 a!37) |L2#level_5!143|)
               (or (or (not L2_tr0) a!40) |L2#level_5!143|)))
      (a!46 (monotonicity (monotonicity (rewrite a!44) (= a!40 a!45))
                          (= (or (not L2_tr0) a!40) (or (not L2_tr0) a!45))))
      (a!47 (= (or (or (not L2_tr0) a!40) |L2#level_5!143|)
               (or (or (not L2_tr0) a!45) |L2#level_5!143|)))
      (a!49 (= (or (or (not L2_tr0) a!45) |L2#level_5!143|) a!48))
      (a!50 (= (or (or (not L2_tr0) a!40) |L2#level_5!143|) a!48))
      (a!54 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!53))
      (a!59 (monotonicity (monotonicity (rewrite a!57) (= a!56 a!58))
                          (= (or (not L2_tr0) a!56) (or (not L2_tr0) a!58))))
      (a!70 (unit-resolution (asserted (or (not spacer_proxy!14) a!69))
                             (asserted spacer_proxy!14)
                             a!69))
      (a!82 (unit-resolution (asserted a!81)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!86 (unit-resolution (asserted (or (not spacer_proxy!3) a!85))
                             (asserted spacer_proxy!3)
                             a!85))
      (a!92 (unit-resolution (asserted a!91)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!94 (unit-resolution (asserted a!93)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!98 (unit-resolution (asserted a!97)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
(let ((a!9 (monotonicity (monotonicity (monotonicity a!4 a!5)
                                       (monotonicity (monotonicity a!4 a!6)
                                                     (= a!2 a!7))
                                       (= a!3 a!8))
                         (= (=> L2_tr1 a!3) (=> L2_tr1 a!8))))
      (a!10 (rewrite (= (=> L2_tr1 a!8) (or (not L2_tr1) a!8))))
      (a!12 (= (or (=> L2_tr1 a!3) |L2#level_5!143|)
               (or (or (not L2_tr1) a!8) |L2#level_5!143|)))
      (a!17 (monotonicity (monotonicity (rewrite a!13)
                                        (monotonicity (rewrite a!14)
                                                      (= a!7 a!15))
                                        (= a!8 a!16))
                          (= (or (not L2_tr1) a!8) (or (not L2_tr1) a!16))))
      (a!18 (= (or (or (not L2_tr1) a!8) |L2#level_5!143|)
               (or (or (not L2_tr1) a!16) |L2#level_5!143|)))
      (a!20 (= (or (or (not L2_tr1) a!16) |L2#level_5!143|) a!19))
      (a!21 (= (or (or (not L2_tr1) a!8) |L2#level_5!143|) a!19))
      (a!27 (or a!26 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!34 (monotonicity (monotonicity (rewrite a!29) a!32 (= a!28 a!33))
                          (= (or (not L2_tr1) a!28) (or (not L2_tr1) a!33))))
      (a!36 (monotonicity (rewrite (= a!33 (not a!26)))
                          (= (or (not L2_tr1) a!33)
                             (or (not L2_tr1) (not a!26)))))
      (a!42 (trans (monotonicity (monotonicity (monotonicity a!38 a!39)
                                               (= a!37 a!40))
                                 (= (=> L2_tr0 a!37) (=> L2_tr0 a!40)))
                   a!41
                   (= (=> L2_tr0 a!37) (or (not L2_tr0) a!40))))
      (a!55 (def-axiom (or a!54 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!60 (mp (asserted (or (not L2_tr0) a!56)) a!59 (or (not L2_tr0) a!58)))
      (a!61 (monotonicity (rewrite (= a!58 (not a!54)))
                          (= (or (not L2_tr0) a!58)
                             (or (not L2_tr0) (not a!54)))))
      (a!63 (def-axiom (or a!54
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!66 (def-axiom (or a!54 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!71 (def-axiom (or a!54 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!72 (def-axiom (or a!54
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!75 (def-axiom (or a!54 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!87 (or a!54 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!112 (def-axiom (or a!26 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!113 (def-axiom (or a!26
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!115 (def-axiom (or a!26
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!117 (def-axiom (or a!26 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!120 (def-axiom (or a!26 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!121 (def-axiom (or a!26
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!123 (def-axiom (or a!26
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!125 (def-axiom (or a!26 (= L2_3_n (select aux!17_n L2_2_n))))))
(let ((a!11 (trans a!9 a!10 (= (=> L2_tr1 a!3) (or (not L2_tr1) a!8))))
      (a!35 (mp (asserted (or (not L2_tr1) a!28)) a!34 (or (not L2_tr1) a!33)))
      (a!51 (trans (monotonicity a!42 a!43)
                   (trans (monotonicity a!46 a!47) (rewrite a!49) a!50)
                   (= (or (=> L2_tr0 a!37) |L2#level_5!143|) a!48)))
      (a!62 (unit-resolution (mp a!60 a!61 (or (not L2_tr0) (not a!54)))
                             (hypothesis L2_tr0)
                             (not a!54))))
(let ((a!22 (trans (monotonicity a!11 a!12)
                   (trans (monotonicity a!17 a!18) (rewrite a!20) a!21)
                   (= (or (=> L2_tr1 a!3) |L2#level_5!143|) a!19)))
      (a!52 (mp (asserted (or (=> L2_tr0 a!37) |L2#level_5!143|)) a!51 a!48))
      (a!64 (symm (unit-resolution a!63
                                   a!62
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!67 (symm (unit-resolution a!66
                                   a!62
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!73 (symm (unit-resolution a!72
                                   a!62
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!76 (symm (unit-resolution a!75
                                   a!62
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!80 (unit-resolution (def-axiom (or a!54 (= L2_5_n 0)))
                             a!62
                             (= L2_5_n 0)))
      (a!83 (unit-resolution (def-axiom (or a!54 (= L1_0_0 L2_0_n)))
                             a!62
                             (= L1_0_0 L2_0_n)))
      (a!88 (unit-resolution (def-axiom a!87)
                             a!62
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!89 (unit-resolution (def-axiom (or a!54 (= L1_2_0 L2_2_n)))
                             a!62
                             (= L1_2_0 L2_2_n))))
(let ((a!23 (mp (asserted (or (=> L2_tr1 a!3) |L2#level_5!143|)) a!22 a!19))
      (a!65 (trans (unit-resolution a!55
                                    a!62
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!64
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!74 (trans (unit-resolution a!71
                                    a!62
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!73
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!84 (th-lemma (symm a!83 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!90 (th-lemma (symm a!89 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!95 (th-lemma (symm a!89 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!96 (th-lemma (symm a!83 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!68 (th-lemma (trans a!65 a!67 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!77 (th-lemma (trans a!74 a!76 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!99 (unit-resolution a!52
                             (th-lemma (th-lemma a!68 a!70 a!77 a!78) a!79)
                             (th-lemma (th-lemma a!80 (>= L2_5_n 0))
                                       a!82
                                       a!84
                                       (>= L1_0_0 0))
                             (hypothesis L2_tr0)
                             (th-lemma (th-lemma a!80 (>= L2_5_n 0))
                                       a!86
                                       a!88
                                       (not (<= L1_5_0 0)))
                             (th-lemma a!90
                                       a!92
                                       (th-lemma a!80 (<= L2_5_n 0))
                                       (<= L1_2_0 0))
                             (th-lemma (th-lemma a!80 (>= L2_5_n 0))
                                       a!94
                                       a!95
                                       (>= L1_2_0 0))
                             (th-lemma a!96
                                       a!98
                                       (th-lemma a!80 (<= L2_5_n 0))
                                       (<= L1_0_0 0))
                             (asserted (not |L2#level_5!143|))
                             false)))
(let ((a!100 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!99 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!101 (unit-resolution (mp a!35 a!36 (or (not L2_tr1) (not a!26)))
                              a!100
                              (not a!26))))
(let ((a!102 (unit-resolution (def-axiom a!27)
                              a!101
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!104 (unit-resolution (def-axiom (or a!26 (= L2_0_0 L2_0_n)))
                              a!101
                              (= L2_0_0 L2_0_n)))
      (a!108 (unit-resolution (def-axiom (or a!26 (= L2_2_0 L2_2_n)))
                              a!101
                              (= L2_2_0 L2_2_n)))
      (a!114 (trans (unit-resolution a!112
                                     a!101
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!113
                                     a!101
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!118 (symm (unit-resolution a!117
                                    a!101
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!122 (trans (unit-resolution a!120
                                     a!101
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!121
                                     a!101
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!126 (symm (unit-resolution a!125
                                    a!101
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!129 (unit-resolution (def-axiom (or a!26 (= L2_4_0 L2_4_n)))
                              a!101
                              (= L2_4_0 L2_4_n))))
(let ((a!103 (th-lemma a!102 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!105 (th-lemma a!104 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!109 (th-lemma a!108 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!116 (trans a!114
                    (unit-resolution a!115
                                     a!101
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!124 (trans a!122
                    (unit-resolution a!123
                                     a!101
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!130 (th-lemma a!129 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!132 (th-lemma a!104 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!133 (th-lemma a!102 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!135 (th-lemma a!108 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0))))
(let ((a!119 (th-lemma (trans a!116 a!118 (= L2_1_0 L2_1_n))
                       (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!127 (th-lemma (trans a!124 a!126 (= L2_3_0 L2_3_n))
                       (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!134 (th-lemma a!132 a!98 a!133 (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!136 (th-lemma a!135 a!92 a!133 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1))))
  (unit-resolution a!23
                   (lemma (th-lemma a!24 a!103 a!105 a!82 false) a!106)
                   (lemma (th-lemma a!94 a!107 a!103 a!109 false) a!110)
                   a!100
                   (lemma (th-lemma a!111 a!119 a!70 a!127 false) a!128)
                   (asserted (not |L2#level_5!143|))
                   (th-lemma a!130 a!86 a!103 a!131)
                   a!134
                   a!136
                   false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 6 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 6 depth: 6
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not (= L2_0_0 query!0_0_n))
               (not (= L2_2_0 query!0_0_n))
               (not (= L2_4_0 query!0_1_n))
               (not (= L2_5_0 query!0_0_n))
               (not (= L2_0_1 query!0_4_n))
               (not (= L2_2_1 query!0_2_n))
               (not (= L2_4_1 query!0_1_n))
               (not (= L2_5_1 query!0_0_n))
               (not (= L2_0_2 query!0_4_n))
               (not (= L2_2_2 query!0_0_n))
               (not (= L2_4_2 query!0_1_n))
               (not (= L2_5_2 query!0_0_n))
               (not (= L2_0_3 query!0_0_n))
               (not (= L2_2_3 query!0_2_n))
               (not (= L2_4_3 query!0_1_n))
               (not (= L2_5_3 query!0_0_n))
               (not (= (select aux!10_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!4_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!7_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (not (= (select aux!9_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!6_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!5_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!8_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!3_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
               (not (= L2_1_3 (select aux!10_n query!0_0_n)))
               (not (= L2_3_3 (select aux!9_n query!0_2_n)))
               (not (= L2_3_2 (select aux!7_n query!0_0_n)))
               (not (= L2_1_2 (select aux!8_n query!0_4_n)))
               (not (= L2_1_1 (select aux!6_n query!0_4_n)))
               (not (= L2_3_1 (select aux!5_n query!0_2_n)))
               (not (= query!0_3_n (select aux!2_n query!0_2_n)))
               (not (= query!0_5_n (select aux!1_n query!0_4_n)))
               (not (= L2_1_0 (select aux!4_n query!0_0_n)))
               (not (= L2_3_0 (select aux!3_n query!0_0_n)))
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!3 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n))))
      (a!4 (= (<= query!0_1_n query!0_0_n)
              (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!5 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!17 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!18 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!19 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!20 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!22 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!23 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!24 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!25 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!26 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!32 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!33 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!34 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!35 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!46 (hypothesis (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!50 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!63 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!65 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!66 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
               (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!67 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!73 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!74 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!2 (or a!1
               (not (= (select aux!2_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))))
      (a!6 (monotonicity (rewrite a!4)
                         (= (not (<= query!0_1_n query!0_0_n)) a!5)))
      (a!7 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                a!5))
      (a!13 (def-axiom (or a!1
                           (= (select aux!3_n query!0_0_n)
                              (select aux!2_n query!0_0_n)))))
      (a!15 (def-axiom (or a!1 (= L2_3_0 (select aux!3_n query!0_0_n)))))
      (a!21 (or a!17
                a!18
                a!19
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!27 (or a!24
                a!26
                a!19
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!36 (or a!33
                a!35
                a!19
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!39 (or (not query!0_dummy)
                a!33
                a!35
                a!19
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                |query!0#level_6!437|))
      (a!64 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!18
                a!63))
      (a!68 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!26
                a!67))
      (a!75 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!35
                a!74))
      (a!78 (or (not query!0_dummy)
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!35
                a!74
                |query!0#level_6!437|))
      (a!86 (def-axiom (or a!1 (= L2_1_0 (select aux!4_n query!0_0_n)))))
      (a!88 (def-axiom (or a!1
                           (= (select aux!4_n query!0_0_n)
                              (select aux!1_n query!0_0_n))))))
(let ((a!8 (monotonicity (monotonicity a!6 (= a!3 a!7))
                         (= (or (not query!0_dummy) a!3)
                            (or (not query!0_dummy) a!7))))
      (a!10 (monotonicity (rewrite (= a!7 (not a!1)))
                          (= (or (not query!0_dummy) a!7)
                             (or (not query!0_dummy) (not a!1)))))
      (a!28 (monotonicity (monotonicity (monotonicity (monotonicity a!22 a!23)
                                                      (= a!17 a!24))
                                        (monotonicity (monotonicity a!22 a!25)
                                                      (= a!18 a!26))
                                        (= a!21 a!27))
                          (= (=> query!0_dummy a!21) (=> query!0_dummy a!27))))
      (a!29 (rewrite (= (=> query!0_dummy a!27) (or (not query!0_dummy) a!27))))
      (a!31 (= (or (=> query!0_dummy a!21) |query!0#level_6!437|)
               (or (or (not query!0_dummy) a!27) |query!0#level_6!437|)))
      (a!37 (monotonicity (monotonicity (monotonicity (rewrite a!32)
                                                      (= a!24 a!33))
                                        (monotonicity (rewrite a!34)
                                                      (= a!26 a!35))
                                        (= a!27 a!36))
                          (= (or (not query!0_dummy) a!27)
                             (or (not query!0_dummy) a!36))))
      (a!38 (= (or (or (not query!0_dummy) a!27) |query!0#level_6!437|)
               (or (or (not query!0_dummy) a!36) |query!0#level_6!437|)))
      (a!40 (= (or (or (not query!0_dummy) a!36) |query!0#level_6!437|) a!39))
      (a!41 (= (or (or (not query!0_dummy) a!27) |query!0#level_6!437|) a!39))
      (a!69 (monotonicity (monotonicity (monotonicity (monotonicity a!22 a!25)
                                                      (= a!18 a!26))
                                        (monotonicity (monotonicity a!65 a!66)
                                                      (= a!63 a!67))
                                        (= a!64 a!68))
                          (= (=> query!0_dummy a!64) (=> query!0_dummy a!68))))
      (a!70 (rewrite (= (=> query!0_dummy a!68) (or (not query!0_dummy) a!68))))
      (a!72 (= (or (=> query!0_dummy a!64) |query!0#level_6!437|)
               (or (or (not query!0_dummy) a!68) |query!0#level_6!437|)))
      (a!76 (monotonicity (monotonicity (monotonicity (rewrite a!34)
                                                      (= a!26 a!35))
                                        (monotonicity (rewrite a!73)
                                                      (= a!67 a!74))
                                        (= a!68 a!75))
                          (= (or (not query!0_dummy) a!68)
                             (or (not query!0_dummy) a!75))))
      (a!77 (= (or (or (not query!0_dummy) a!68) |query!0#level_6!437|)
               (or (or (not query!0_dummy) a!75) |query!0#level_6!437|)))
      (a!79 (= (or (or (not query!0_dummy) a!75) |query!0#level_6!437|) a!78))
      (a!80 (= (or (or (not query!0_dummy) a!68) |query!0#level_6!437|) a!78)))
(let ((a!9 (mp (asserted (or (not query!0_dummy) a!3))
               a!8
               (or (not query!0_dummy) a!7)))
      (a!30 (trans a!28
                   a!29
                   (= (=> query!0_dummy a!21) (or (not query!0_dummy) a!27))))
      (a!71 (trans a!69
                   a!70
                   (= (=> query!0_dummy a!64) (or (not query!0_dummy) a!68)))))
(let ((a!11 (unit-resolution (mp a!9 a!10 (or (not query!0_dummy) (not a!1)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!1)))
      (a!42 (trans (monotonicity a!30 a!31)
                   (trans (monotonicity a!37 a!38) (rewrite a!40) a!41)
                   (= (or (=> query!0_dummy a!21) |query!0#level_6!437|) a!39)))
      (a!81 (trans (monotonicity a!71 a!72)
                   (trans (monotonicity a!76 a!77) (rewrite a!79) a!80)
                   (= (or (=> query!0_dummy a!64) |query!0#level_6!437|) a!78))))
(let ((a!12 (unit-resolution (def-axiom a!2)
                             a!11
                             (not (= (select aux!2_n query!0_0_n)
                                     (select aux!1_n query!0_0_n)))))
      (a!14 (symm (unit-resolution a!13
                                   a!11
                                   (= (select aux!3_n query!0_0_n)
                                      (select aux!2_n query!0_0_n)))
                  (= (select aux!2_n query!0_0_n) (select aux!3_n query!0_0_n))))
      (a!16 (symm (unit-resolution a!15
                                   a!11
                                   (= L2_3_0 (select aux!3_n query!0_0_n)))
                  (= (select aux!3_n query!0_0_n) L2_3_0)))
      (a!43 (mp (asserted (or (=> query!0_dummy a!21) |query!0#level_6!437|))
                a!42
                a!39))
      (a!44 (unit-resolution (def-axiom (or a!1 (= L2_4_0 query!0_1_n)))
                             a!11
                             (= L2_4_0 query!0_1_n)))
      (a!47 (unit-resolution (def-axiom (or a!1 (= L2_5_0 query!0_0_n)))
                             a!11
                             (= L2_5_0 query!0_0_n)))
      (a!51 (unit-resolution (def-axiom (or a!1 (= L2_0_0 query!0_0_n)))
                             a!11
                             (= L2_0_0 query!0_0_n)))
      (a!55 (unit-resolution (def-axiom (or a!1 (= L2_2_0 query!0_0_n)))
                             a!11
                             (= L2_2_0 query!0_0_n)))
      (a!82 (mp (asserted (or (=> query!0_dummy a!64) |query!0#level_6!437|))
                a!81
                a!78)))
(let ((a!45 (th-lemma a!44 (>= (+ L2_4_0 (* (- 1) query!0_1_n)) 0)))
      (a!48 (th-lemma a!47 (<= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!52 (th-lemma a!51 (<= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!53 (th-lemma a!47 (>= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!56 (th-lemma a!55 (<= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!58 (th-lemma a!55 (>= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!60 (th-lemma a!51 (>= (+ L2_0_0 (* (- 1) query!0_0_n)) 0))))
(let ((a!49 (th-lemma a!45
                      a!46
                      (unit-resolution (def-axiom (or a!1 a!5)) a!11 a!5)
                      a!48
                      false))
      (a!54 (lemma (th-lemma (hypothesis a!33) a!52 a!53 false)
                   (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!57 (lemma (th-lemma (hypothesis a!19) a!56 a!53 false)
                   (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!59 (lemma (th-lemma (hypothesis a!20) a!58 a!48 false)
                   (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!61 (lemma (th-lemma (hypothesis a!35) a!60 a!48 false)
                   (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!83 (th-lemma a!52 a!58 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!62 (unit-resolution a!43
                             (lemma a!49 a!50)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!54
                             a!57
                             a!59
                             a!61
                             (asserted (not |query!0#level_6!437|))
                             (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!84 (unit-resolution a!82
                             (lemma a!49 a!50)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!61
                             a!57
                             a!83
                             (asserted (not |query!0#level_6!437|))
                             (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!85 (trans (trans a!14 a!16 (= (select aux!2_n query!0_0_n) L2_3_0))
                   (symm (th-lemma a!62 a!84 (= L2_1_0 L2_3_0))
                         (= L2_3_0 L2_1_0))
                   (= (select aux!2_n query!0_0_n) L2_1_0))))
(let ((a!87 (trans a!85
                   (unit-resolution a!86
                                    a!11
                                    (= L2_1_0 (select aux!4_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!4_n query!0_0_n)))))
(let ((a!89 (trans a!87
                   (unit-resolution a!88
                                    a!11
                                    (= (select aux!4_n query!0_0_n)
                                       (select aux!1_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))))
  (unit-resolution a!12 a!89 false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 6 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_6!437|)
------------------------------------------------
-------- [spacer] is_invariant ../src/muz/spacer/spacer_context.cpp:876 ---------
Checking at level 3 but only using 4294967295
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_0_n 0)
      (not (<= L1_0_n 1))
      (<= L1_4_n 1)
      (<= L1_2_n 0)
      (not (<= L1_2_n 1))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) 0))))
  (or a!1
      (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_0_n 0)
      (not (<= L1_0_n 1))
      (<= L1_4_n 1)
      (<= L1_2_n 0)
      (not (<= L1_2_n 1))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or a!1
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_4_0 1)
               (<= L1_2_0 0)
               (not (<= L1_2_0 1)))))
  (=> L2_tr0 a!2)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!2 (or a!1
               (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_0_0 0)
               (not (<= L1_0_0 1))
               (<= L1_4_0 1)
               (<= L1_2_0 0)
               (not (<= L1_2_0 1)))))
  (=> L1_tr1 a!2)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_4_1 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (or a!1
               (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_0_1 0)
               (not (<= L1_0_1 1))
               (<= L1_4_1 1)
               (<= L1_2_1 0)
               (not (<= L1_2_1 1)))))
  (=> L1_tr1 a!2)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!4 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!5 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!4 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!5 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!4 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!5 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> L2_tr1 a!5) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 7 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 7 depth: 7
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  true)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  5941)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 2))
(define-fun L2_1_3 () Int
  7372)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!1741))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!1745))
(define-fun query!0_0_n () Int
  (- 1))
(define-fun L2_3_3 () Int
  2747)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  8867)
(define-fun L2_1_2 () Int
  5941)
(define-fun query!0_3_n () Int
  2747)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!1744))
(define-fun |query!0#level_9!1735| () Bool
  false)
(define-fun L2_3_1 () Int
  2747)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  8867)
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |query!0#level_8!1203| () Bool
  false)
(define-fun L2_0_2 () Int
  (- 2))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!1743))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!1739))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  7373)
(define-fun |query!0#level_4!80| () Bool
  true)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun |query!0#level_7!853| () Bool
  false)
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!1740))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  true)
(define-fun query!0_4_n () Int
  (- 2))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  5941)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!1742))
(define-fun L2_0_0 () Int
  (- 1))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!1747))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!1738))
(define-fun L2_2_0 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!1746))
(define-fun L2_3_2 () Int
  7373)
(define-fun L2_2_1 () Int
  8867)
(define-fun L2_4_0 () Int
  0)
(define-fun L2_1_0 () Int
  7372)
(define-fun k!1743 ((x!0 Int)) Int
  (ite (= x!0 8867) 2747
    2747))
(define-fun k!1740 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7372
    7372))
(define-fun k!1745 ((x!0 Int)) Int
  (ite (= x!0 8867) 2747
    2747))
(define-fun k!1742 ((x!0 Int)) Int
  (ite (= x!0 8867) 2747
  (ite (= x!0 (- 1)) 7373
    2747)))
(define-fun k!1739 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7372
  (ite (= x!0 (- 2)) 5941
    7372)))
(define-fun k!1747 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7373
    7373))
(define-fun k!1744 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 5941
    5941))
(define-fun k!1741 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7373
    7373))
(define-fun k!1738 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7372
    7372))
(define-fun k!1746 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 5941
    5941))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_5_3 L2_0_2))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 7
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!1763))
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!79 () Bool
  false)
(define-fun spacer_proxy!97 () Bool
  false)
(define-fun L2_4_n () Int
  3)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!1765))
(define-fun L2_0_n () Int
  0)
(define-fun spacer_proxy!84 () Bool
  false)
(define-fun spacer_proxy!82 () Bool
  false)
(define-fun spacer_proxy!42 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!96 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!1764))
(define-fun |L2#level_5!143| () Bool
  true)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun spacer_proxy!40 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun spacer_proxy!57 () Bool
  false)
(define-fun L2_1_n () Int
  3608)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!1762))
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!1761))
(define-fun L2_3_0 () Int
  3609)
(define-fun spacer_proxy!41 () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun spacer_proxy!46 () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!1760))
(define-fun spacer_proxy!83 () Bool
  false)
(define-fun spacer_proxy!86 () Bool
  false)
(define-fun spacer_proxy!81 () Bool
  false)
(define-fun spacer_proxy!43 () Bool
  false)
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun spacer_proxy!45 () Bool
  false)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun L2_3_n () Int
  3609)
(define-fun L2_2_0 () Int
  0)
(define-fun spacer_proxy!80 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  3608)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  3)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!1763 ((x!0 Int)) Int
  (ite (= x!0 0) 3609
    3609))
(define-fun k!1760 ((x!0 Int)) Int
  (ite (= x!0 0) 3608
    3608))
(define-fun k!1764 ((x!0 Int)) Int
  (ite (= x!0 0) 3608
    3608))
(define-fun k!1761 ((x!0 Int)) Int
  (ite (= x!0 0) 3608
    3608))
(define-fun k!1765 ((x!0 Int)) Int
  (ite (= x!0 0) 3609
    3609))
(define-fun k!1762 ((x!0 Int)) Int
  (ite (= x!0 0) 3609
    3609))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0))))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 7
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!1775))
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L2_4_n () Int
  3)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!1777))
(define-fun L2_0_n () Int
  1)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  true)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!21 () Bool
  true)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!1776))
(define-fun spacer_proxy!23 () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  3608)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!1774))
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!1773))
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_3_0 () Int
  3609)
(define-fun spacer_proxy!78 () Bool
  false)
(define-fun spacer_proxy!24 () Bool
  true)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  true)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  1)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!1772))
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  1)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_3_n () Int
  3609)
(define-fun L2_2_0 () Int
  1)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  3608)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  3)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!1775 ((x!0 Int)) Int
  (ite (= x!0 1) 3609
    3609))
(define-fun k!1772 ((x!0 Int)) Int
  (ite (= x!0 1) 3608
    3608))
(define-fun k!1776 ((x!0 Int)) Int
  (ite (= x!0 1) 3608
    3608))
(define-fun k!1773 ((x!0 Int)) Int
  (ite (= x!0 1) 3608
    3608))
(define-fun k!1777 ((x!0 Int)) Int
  (ite (= x!0 1) 3609
    3609))
(define-fun k!1774 ((x!0 Int)) Int
  (ite (= x!0 1) 3609
    3609))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and (not (<= L2_4_n L2_5_0))
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0)))))
      (a!2 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
       (not (<= L2_4_0 L2_5_0))
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 2)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 7
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!74 () Bool
  true)
(define-fun spacer_proxy!75 () Bool
  true)
(define-fun L1_4_0 () Int
  3)
(define-fun L1_0_0 () Int
  2)
(define-fun L1_ext!1380_0 () Bool
  true)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  3608)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_ext!1321_0 () Bool
  true)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L1_2_0 () Int
  2)
(define-fun L2_4_n () Int
  3)
(define-fun spacer_proxy!24 () Bool
  false)
(define-fun L1_ext!612_0 () Bool
  true)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!1784))
(define-fun L1_1_0 () Int
  3608)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun L1_5_0 () Int
  3)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!1787))
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!1786))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  3609)
(define-fun L2_0_n () Int
  2)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!1785))
(define-fun spacer_proxy!71 () Bool
  true)
(define-fun spacer_proxy!21 () Bool
  false)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun spacer_proxy!72 () Bool
  true)
(define-fun spacer_proxy!73 () Bool
  true)
(define-fun L2_2_n () Int
  2)
(define-fun L2_3_n () Int
  3609)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun L2_tr0 () Bool
  true)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun k!1787 ((x!0 Int)) Int
  (ite (= x!0 2) 3609
    3609))
(define-fun k!1784 ((x!0 Int)) Int
  (ite (= x!0 2) 3608
    3608))
(define-fun k!1785 ((x!0 Int)) Int
  (ite (= x!0 2) 3608
    3608))
(define-fun k!1786 ((x!0 Int)) Int
  (ite (= x!0 2) 3609
    3609))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (<= L2_4_n L1_5_0)
       a!1
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       a!2
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (= L1_2_0 2) (<= L1_4_0 L1_5_0) (not (<= L1_4_0 2)) a!1 (= L1_0_0 2)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 3 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 2)
       (= L1_0_n 2)
       (not (<= L1_4_n 2))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 3 depth: 7
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_2_n 2)
       (= L1_0_n 2)
       (not (<= L1_4_n 2))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L1_ext!1380_1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!3 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!5 (or (<= L1_2_1 1) (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)))
      (a!6 (rewrite (= (+ L1_5_1 (* (- 1) L1_2_1)) (+ (* (- 1) L1_2_1) L1_5_1))))
      (a!7 (= (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
              (<= (+ (* (- 1) L1_2_1) L1_5_1) 0)))
      (a!8 (or (<= L1_2_1 1) (<= (+ (* (- 1) L1_2_1) L1_5_1) 0)))
      (a!12 (= (<= (+ (* (- 1) L1_2_1) L1_5_1) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)))
      (a!13 (or (<= L1_2_1 1) (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)))
      (a!16 (or (not L1_tr1)
                (<= L1_2_1 1)
                (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
                |L1#level_3!130|))
      (a!21 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!23 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               (select aux!29_n L1_0_n)))
      (a!27 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!28 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!29 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!35 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!36 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!39 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!42 (asserted (or (not spacer_proxy!174) (not (<= L1_4_n 2)))))
      (a!46 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!47 (= (<= L1_2_n (+ (- 1) L1_5_n))
               (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!48 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!50 (= (= L1_5_n (+ 1 L1_0_n)) (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!51 (= (<= L1_4_n (+ (- 1) L1_5_n))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!52 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!58 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!61 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (not (<= L1_4_n 0))
                 (= 2 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!68 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (not (= L1_5_n (+ 1 L1_0_n)))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!74 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!77 (unit-resolution (asserted (or (not spacer_proxy!126) (<= L1_2_n 2)))
                             (asserted spacer_proxy!126)
                             (<= L1_2_n 2)))
      (a!78 (not (>= (+ L1_2_n (* (- 1) L1_4_n)) 0)))
      (a!80 (not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)))
      (a!91 (unit-resolution (asserted (or (not spacer_proxy!127) (>= L1_2_n 2)))
                             (asserted spacer_proxy!127)
                             (>= L1_2_n 2)))
      (a!101 (not (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!115 (unit-resolution (asserted (or (not spacer_proxy!176)
                                            (>= L1_0_n 2)))
                              (asserted spacer_proxy!176)
                              (>= L1_0_n 2)))
      (a!116 (unit-resolution (asserted (or (not spacer_proxy!175)
                                            (<= L1_0_n 2)))
                              (asserted spacer_proxy!175)
                              (<= L1_0_n 2)))
      (a!118 (or (<= L1_2_0 1) (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)))
      (a!119 (rewrite (= (+ L1_5_0 (* (- 1) L1_2_0))
                         (+ (* (- 1) L1_2_0) L1_5_0))))
      (a!120 (= (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
                (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!121 (or (<= L1_2_0 1) (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!125 (= (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!126 (or (<= L1_2_0 1) (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!129 (or (not L1_tr1)
                 (<= L1_2_0 1)
                 (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                 |L1#level_3!130|))
      (a!142 (not (>= (+ L1_2_0 (* (- 1) L1_5_1)) 0))))
(let ((a!2 (def-axiom (or (not (= L1_0_n L1_2_0))
                          (= (select aux!32_n L1_2_0) a!1))))
      (a!4 (unit-resolution (asserted (or (not spacer_proxy!0) a!3))
                            (asserted spacer_proxy!0)
                            a!3))
      (a!9 (rewrite (= (=> L1_tr1 a!8) (or (not L1_tr1) a!8))))
      (a!11 (= (or (=> L1_tr1 a!5) |L1#level_3!130|)
               (or (or (not L1_tr1) a!8) |L1#level_3!130|)))
      (a!14 (monotonicity (monotonicity (rewrite a!12) (= a!8 a!13))
                          (= (or (not L1_tr1) a!8) (or (not L1_tr1) a!13))))
      (a!15 (= (or (or (not L1_tr1) a!8) |L1#level_3!130|)
               (or (or (not L1_tr1) a!13) |L1#level_3!130|)))
      (a!17 (= (or (or (not L1_tr1) a!13) |L1#level_3!130|) a!16))
      (a!18 (= (or (or (not L1_tr1) a!8) |L1#level_3!130|) a!16))
      (a!22 (or (not (= L1_0_0 L1_0_n))
                (not (= L1_4_0 L1_4_n))
                (not (= L1_5_0 L1_2_0))
                (not (= L1_0_1 L1_0_n))
                (not (= L1_2_1 L1_2_n))
                (not (= L1_4_1 L1_4_n))
                (not (= L1_5_1 L1_2_0))
                (not (= a!1 (select aux!29_n L1_0_n)))
                (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
                (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
                (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
                (not (= L1_3_1 (select aux!35_n L1_2_n)))
                (not (= L1_1_1 (select aux!36_n L1_0_n)))
                (not (= L1_3_0 (select aux!33_n L1_2_0)))
                a!21
                (not (= L1_1_n (select aux!29_n L1_0_n)))
                (not (= L1_1_0 (select aux!34_n L1_0_n)))
                (not (= L1_3_n (select aux!30_n L1_2_n)))
                (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!24 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 a!23
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= L1_5_n (+ 1 L1_2_0))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 (not (<= L1_4_n L1_2_0))))
      (a!25 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               a!1))
      (a!30 (monotonicity (rewrite a!28) (= (not (<= L1_4_n L1_2_0)) a!29)))
      (a!31 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!1 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!29))
      (a!37 (monotonicity (rewrite (= a!35 (not a!36)))
                          (= (or (not L1_tr0) a!35)
                             (or (not L1_tr0) (not a!36)))))
      (a!40 (unit-resolution (asserted a!39)
                             (asserted spacer_proxy!1)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!43 (th-lemma (unit-resolution a!42
                                       (asserted spacer_proxy!174)
                                       (not (<= L1_4_n 2)))
                      (not (<= L1_4_n 1))))
      (a!49 (= (not (<= L1_2_n (+ (- 1) L1_5_n))) a!48))
      (a!53 (= (not (<= L1_4_n (+ (- 1) L1_5_n))) a!52))
      (a!54 (and a!48 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)) (= L1_5_n 1) a!52))
      (a!59 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!58
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!62 (and a!48
                 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                 (not (<= L1_4_n 0))
                 (= L1_5_n 2)
                 a!52
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!66 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!58
                (<= L1_4_n 0)
                (not (= L1_5_n 2))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
                (<= L1_5_n 1)
                (<= L1_0_n 0)
                (<= L1_2_n 0)))
      (a!69 (= (not (= L1_5_n (+ 1 L1_0_n))) a!58))
      (a!71 (or (not L1_ext!612_n)
                (and a!48 a!58 (= L1_5_n 1) a!52)
                L1_ext!1321_n))
      (a!75 (rewrite (= (and a!48 a!58 (= L1_5_n 1) a!52) (not a!74))))
      (a!79 (th-lemma (unit-resolution a!42
                                       (asserted spacer_proxy!174)
                                       (not (<= L1_4_n 2)))
                      a!77
                      a!78))
      (a!92 (lemma (th-lemma (hypothesis (<= L1_2_n 1)) a!91 false)
                   (not (<= L1_2_n 1))))
      (a!113 (= (not (= L1_3_n L1_1_n)) (not (= (select aux!32_n L1_2_0) a!1))))
      (a!122 (rewrite (= (=> L1_tr1 a!121) (or (not L1_tr1) a!121))))
      (a!124 (= (or (=> L1_tr1 a!118) |L1#level_3!130|)
                (or (or (not L1_tr1) a!121) |L1#level_3!130|)))
      (a!127 (monotonicity (monotonicity (rewrite a!125) (= a!121 a!126))
                           (= (or (not L1_tr1) a!121) (or (not L1_tr1) a!126))))
      (a!128 (= (or (or (not L1_tr1) a!121) |L1#level_3!130|)
                (or (or (not L1_tr1) a!126) |L1#level_3!130|)))
      (a!130 (= (or (or (not L1_tr1) a!126) |L1#level_3!130|) a!129))
      (a!131 (= (or (or (not L1_tr1) a!121) |L1#level_3!130|) a!129)))
(let ((a!10 (trans (monotonicity (monotonicity (monotonicity a!6 a!7)
                                               (= a!5 a!8))
                                 (= (=> L1_tr1 a!5) (=> L1_tr1 a!8)))
                   a!9
                   (= (=> L1_tr1 a!5) (or (not L1_tr1) a!8))))
      (a!26 (monotonicity (rewrite a!25)
                          (= a!23 (= a!1 (select aux!29_n L1_0_n)))))
      (a!34 (monotonicity (rewrite (= a!31 (not a!22)))
                          (= (or (not L1_tr1) a!31)
                             (or (not L1_tr1) (not a!22)))))
      (a!38 (mp (asserted (or (not L1_tr0) a!35))
                a!37
                (or (not L1_tr0) (not a!36))))
      (a!41 (th-lemma a!40 (<= (+ L1_4_n (* (- 1) L1_5_n)) 1)))
      (a!55 (monotonicity (monotonicity (rewrite a!47) a!49)
                          (rewrite a!50)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!51) a!53)
                          (= a!46 a!54)))
      (a!60 (monotonicity (rewrite (= a!54 (not a!59)))
                          (= (or (not L1_ext0_n) a!54 L1_ext!612_n)
                             (or (not L1_ext0_n) (not a!59) L1_ext!612_n))))
      (a!63 (monotonicity (monotonicity (rewrite a!47) a!49)
                          (rewrite a!50)
                          (rewrite (= (= 2 L1_5_n) (= L1_5_n 2)))
                          (monotonicity (rewrite a!51) a!53)
                          (= a!61 a!62)))
      (a!67 (monotonicity (rewrite (= a!62 (not a!66)))
                          (= (or (not L1_ext!1321_n) a!62 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) (not a!66) L1_ext!1380_n))))
      (a!70 (monotonicity (monotonicity (rewrite a!47) a!49)
                          (monotonicity (rewrite a!50) a!69)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!51) a!53)
                          (= a!68 (and a!48 a!58 (= L1_5_n 1) a!52))))
      (a!76 (monotonicity a!75
                          (= a!71
                             (or (not L1_ext!612_n) (not a!74) L1_ext!1321_n))))
      (a!81 (th-lemma (th-lemma a!79 a!40 a!80)
                      (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!84 (th-lemma (th-lemma a!43 a!40 (not (<= L1_5_n 1)))
                      (not (= L1_5_n 1))))
      (a!98 (or a!22 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!103 (def-axiom (or a!22
                            (= (select aux!32_n L1_2_n)
                               (select aux!30_n L1_2_n)))))
      (a!105 (def-axiom (or a!22 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!107 (def-axiom (or a!22 (= a!1 (select aux!29_n L1_0_n)))))
      (a!108 (def-axiom (or a!22 (= L1_1_n (select aux!29_n L1_0_n)))))
      (a!123 (trans (monotonicity (monotonicity (monotonicity a!119 a!120)
                                                (= a!118 a!121))
                                  (= (=> L1_tr1 a!118) (=> L1_tr1 a!121)))
                    a!122
                    (= (=> L1_tr1 a!118) (or (not L1_tr1) a!121)))))
(let ((a!19 (trans (monotonicity a!10 a!11)
                   (trans (monotonicity a!14 a!15) (rewrite a!17) a!18)
                   (= (or (=> L1_tr1 a!5) |L1#level_3!130|) a!16)))
      (a!32 (monotonicity (monotonicity a!26 (rewrite a!27) a!30 (= a!24 a!31))
                          (= (or (not L1_tr1) a!24) (or (not L1_tr1) a!31))))
      (a!44 (th-lemma (hypothesis (= L1_5_n 0))
                      (th-lemma a!41 a!43 (not (<= L1_5_n 0)))
                      false))
      (a!56 (monotonicity a!55
                          (= (or (not L1_ext0_n) a!46 L1_ext!612_n)
                             (or (not L1_ext0_n) a!54 L1_ext!612_n))))
      (a!64 (monotonicity a!63
                          (= (or (not L1_ext!1321_n) a!61 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) a!62 L1_ext!1380_n))))
      (a!72 (monotonicity a!70
                          (= (or (not L1_ext!612_n) a!68 L1_ext!1321_n) a!71)))
      (a!85 (unit-resolution (def-axiom (or a!59 (= L1_5_n 1))) a!84 a!59))
      (a!132 (trans (monotonicity a!123 a!124)
                    (trans (monotonicity a!127 a!128) (rewrite a!130) a!131)
                    (= (or (=> L1_tr1 a!118) |L1#level_3!130|) a!129))))
(let ((a!20 (mp (asserted (or (=> L1_tr1 a!5) |L1#level_3!130|)) a!19 a!16))
      (a!33 (mp (asserted (or (not L1_tr1) a!24)) a!32 (or (not L1_tr1) a!31)))
      (a!45 (unit-resolution (def-axiom (or a!36 (= L1_5_n 0)))
                             (lemma a!44 (not (= L1_5_n 0)))
                             a!36))
      (a!57 (mp (asserted (or (not L1_ext0_n) a!46 L1_ext!612_n))
                a!56
                (or (not L1_ext0_n) a!54 L1_ext!612_n)))
      (a!65 (mp (asserted (or (not L1_ext!1321_n) a!61 L1_ext!1380_n))
                a!64
                (or (not L1_ext!1321_n) a!62 L1_ext!1380_n)))
      (a!73 (mp (asserted (or (not L1_ext!612_n) a!68 L1_ext!1321_n)) a!72 a!71))
      (a!133 (mp (asserted (or (=> L1_tr1 a!118) |L1#level_3!130|)) a!132 a!129)))
(let ((a!82 (unit-resolution (mp a!73
                                 a!76
                                 (or (not L1_ext!612_n)
                                     (not a!74)
                                     L1_ext!1321_n))
                             (unit-resolution (def-axiom (or a!74 a!48))
                                              a!81
                                              a!74)
                             (hypothesis L1_ext!612_n)
                             L1_ext!1321_n)))
(let ((a!83 (unit-resolution (mp a!65
                                 a!67
                                 (or (not L1_ext!1321_n)
                                     (not a!66)
                                     L1_ext!1380_n))
                             a!82
                             (unit-resolution (def-axiom (or a!66 a!48))
                                              a!81
                                              a!66)
                             (asserted (not L1_ext!1380_n))
                             false)))
(let ((a!86 (unit-resolution (mp a!57
                                 a!60
                                 (or (not L1_ext0_n) (not a!59) L1_ext!612_n))
                             (lemma a!83 (not L1_ext!612_n))
                             a!85
                             (not L1_ext0_n))))
(let ((a!87 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             (unit-resolution a!38 a!45 (not L1_tr0))
                             a!86
                             L1_tr1)))
(let ((a!88 (unit-resolution (mp a!33 a!34 (or (not L1_tr1) (not a!22)))
                             a!87
                             (not a!22))))
(let ((a!89 (unit-resolution (def-axiom (or a!22 (= L1_2_1 L1_2_n)))
                             a!88
                             (= L1_2_1 L1_2_n)))
      (a!94 (unit-resolution (def-axiom (or a!22 (= L1_5_1 L1_2_0)))
                             a!88
                             (= L1_5_1 L1_2_0)))
      (a!99 (unit-resolution (def-axiom a!98)
                             a!88
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!106 (symm (unit-resolution a!105
                                    a!88
                                    (= L1_3_n (select aux!30_n L1_2_n)))
                   (= (select aux!30_n L1_2_n) L1_3_n)))
      (a!109 (symm (unit-resolution a!108
                                    a!88
                                    (= L1_1_n (select aux!29_n L1_0_n)))
                   (= (select aux!29_n L1_0_n) L1_1_n)))
      (a!140 (unit-resolution (def-axiom (or a!22 (= L1_5_0 L1_2_0)))
                              a!88
                              (= L1_5_0 L1_2_0))))
(let ((a!90 (th-lemma (symm a!89 (= L1_2_n L1_2_1))
                      (<= (+ L1_2_n (* (- 1) L1_2_1)) 0)))
      (a!95 (th-lemma (symm a!94 (= L1_2_0 L1_5_1))
                      (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!96 (th-lemma (symm a!89 (= L1_2_n L1_2_1))
                      (>= (+ L1_2_n (* (- 1) L1_2_1)) 0)))
      (a!100 (th-lemma a!99 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!110 (trans (unit-resolution a!107
                                     a!88
                                     (= a!1 (select aux!29_n L1_0_n)))
                    a!109
                    (= a!1 L1_1_n)))
      (a!137 (symm (monotonicity a!94 (= (= L1_5_1 1) (= L1_2_0 1)))
                   (= (= L1_2_0 1) (= L1_5_1 1))))
      (a!141 (th-lemma (symm a!140 (= L1_2_0 L1_5_0))
                       (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!143 (lemma (th-lemma (hypothesis a!142)
                              (symm a!94 (= L1_2_0 L1_5_1))
                              false)
                    (>= (+ L1_2_0 (* (- 1) L1_5_1)) 0))))
(let ((a!93 (unit-resolution a!20
                             (th-lemma a!90 a!92 (not (<= L1_2_1 1)))
                             (asserted (not |L1#level_3!130|))
                             a!87
                             (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)))
      (a!102 (lemma (th-lemma a!100 (hypothesis a!101) a!81 false)
                    (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!134 (th-lemma a!100 a!92 (th-lemma a!79 a!40 a!80) (not (<= L1_2_0 1))))
      (a!136 (th-lemma a!95
                       (th-lemma a!100
                                 (th-lemma a!91 (>= L1_2_n 1))
                                 a!81
                                 (not (<= L1_2_0 0)))
                       (>= L1_5_1 1)))
      (a!138 (monotonicity a!137 (= (not (= L1_2_0 1)) (not (= L1_5_1 1))))))
(let ((a!97 (th-lemma a!93 a!95 a!96 (<= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!117 (th-lemma a!96 a!77 (hypothesis (not (<= L1_5_1 2))) a!93 false))
      (a!135 (unit-resolution a!133
                              a!134
                              (asserted (not |L1#level_3!130|))
                              a!87
                              (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!139 (mp (th-lemma a!134 (not (= L1_2_0 1))) a!138 (not (= L1_5_1 1)))))
(let ((a!104 (trans (monotonicity (th-lemma a!97 a!102 (= L1_2_0 L1_2_n))
                                  (= (select aux!32_n L1_2_0)
                                     (select aux!32_n L1_2_n)))
                    (unit-resolution a!103
                                     a!88
                                     (= (select aux!32_n L1_2_n)
                                        (select aux!30_n L1_2_n)))
                    (= (select aux!32_n L1_2_0) (select aux!30_n L1_2_n))))
      (a!144 (th-lemma (th-lemma a!136 a!139 (not (<= L1_5_1 1)))
                       a!141
                       a!143
                       (>= L1_5_0 2))))
(let ((a!111 (monotonicity (trans a!104
                                  a!106
                                  (= (select aux!32_n L1_2_0) L1_3_n))
                           a!110
                           (= (= (select aux!32_n L1_2_0) a!1)
                              (= L1_3_n L1_1_n))))
      (a!145 (th-lemma (th-lemma (lemma a!117 (<= L1_5_1 2))
                                 a!95
                                 a!135
                                 (<= L1_5_0 2))
                       a!144
                       (= L1_5_0 2))))
(let ((a!112 (symm a!111 (= (= L1_3_n L1_1_n) (= (select aux!32_n L1_2_0) a!1))))
      (a!146 (trans (trans (th-lemma a!115 a!116 (= L1_0_n 2))
                           (symm a!145 (= 2 L1_5_0))
                           (= L1_0_n L1_5_0))
                    a!140
                    (= L1_0_n L1_2_0))))
(let ((a!114 (mp (th-lemma a!4 (not (= L1_3_n L1_1_n)))
                 (monotonicity a!112 a!113)
                 (not (= (select aux!32_n L1_2_0) a!1)))))
  (unit-resolution a!2 a!114 a!146 false)))))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (= L1_3_n L1_1_n))
(not (<= L1_4_n 1))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= (+ L1_5_n (* (- 1) L1_4_n)) (- 2)))
(not (<= L1_5_n 0))
(not (<= L1_2_n 1))
(<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
(not (>= L1_2_n 3))
(= L1_0_n 2)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (= L1_3_n L1_1_n))
(not (<= L1_4_n 1))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= (+ L1_5_n (* (- 1) L1_4_n)) (- 2)))
(not (<= L1_5_n 0))
(not (<= L1_2_n 1))
(<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
(not (>= L1_2_n 3))
(= L1_0_n 2)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= L1_3_n L1_1_n))
(not (<= L1_4_n 1))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= (+ L1_5_n (* (- 1) L1_4_n)) (- 2)))
(not (<= L1_5_n 0))
(not (<= L1_2_n 1))
(<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
(not (>= L1_2_n 3))
(= L1_0_n 2)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 12 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1)))))
  (or (= L1_3_n L1_1_n)
      a!1
      (<= L1_2_n 1)
      (not (>= L1_0_n 2))
      (not (<= L1_0_n 2))
      (>= L1_2_n 3)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3)
    |L1#level_3!130|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L2_tr0 a!1) |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L1_tr1 a!1) |L1#level_4!141|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
               (<= L1_2_1 1)
               (not (>= L1_0_1 2))
               (not (<= L1_0_1 2))
               (>= L1_2_1 3))))
  (or (=> L1_tr1 a!1) |L1#level_4!141|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 7
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!74 () Bool
  true)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!1839))
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L2_4_n () Int
  3)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!1841))
(define-fun L2_0_n () Int
  2)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!71 () Bool
  true)
(define-fun spacer_proxy!21 () Bool
  false)
(define-fun spacer_proxy!72 () Bool
  true)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!1840))
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  3608)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!1838))
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!1837))
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_3_0 () Int
  3609)
(define-fun spacer_proxy!24 () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  2)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!1836))
(define-fun spacer_proxy!73 () Bool
  true)
(define-fun L2_2_n () Int
  2)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_3_n () Int
  3609)
(define-fun L2_2_0 () Int
  2)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  3608)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  3)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!1839 ((x!0 Int)) Int
  (ite (= x!0 2) 3609
    3609))
(define-fun k!1836 ((x!0 Int)) Int
  (ite (= x!0 2) 3608
    3608))
(define-fun k!1840 ((x!0 Int)) Int
  (ite (= x!0 2) 3608
    3608))
(define-fun k!1837 ((x!0 Int)) Int
  (ite (= x!0 2) 3608
    3608))
(define-fun k!1841 ((x!0 Int)) Int
  (ite (= x!0 2) 3609
    3609))
(define-fun k!1838 ((x!0 Int)) Int
  (ite (= x!0 2) 3609
    3609))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!2
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0))))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 3)
       (not (<= L2_4_0 L2_5_0))
       a!1
       a!2
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 3 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 3 depth: 7
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!3 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= L2_4_n L1_5_0)))
      (a!4 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!5 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!9 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!10 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!11 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1) |L2#level_3!79|))
      (a!14 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!17 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!18 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!19 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!20 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!29 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3)))
      (a!31 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!32 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!33 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!41 (or (not spacer_proxy!112) (<= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!45 (or (<= L1_2_0 1) (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)))
      (a!46 (rewrite (= (+ L1_5_0 (* (- 1) L1_2_0)) (+ (* (- 1) L1_2_0) L1_5_0))))
      (a!47 (= (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!48 (or (<= L1_2_0 1) (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!52 (= (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!53 (or (<= L1_2_0 1) (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!56 (or (not L2_tr0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                |L2#level_3!79|))
      (a!62 (or (not spacer_proxy!113) (>= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
(let ((a!2 (or (not (= L2_5_n 0))
               (not (= L1_0_0 L2_0_n))
               (not (= L1_2_0 L2_2_n))
               (not (= L1_4_0 L2_4_n))
               (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
               (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
               (not (= L1_1_0 (select aux!15_n L2_0_n)))
               (not (= L1_3_0 (select aux!14_n L2_2_n)))
               (not (= L2_1_n (select aux!12_n L2_0_n)))
               (not (= L2_3_n (select aux!13_n L2_2_n)))
               a!1))
      (a!6 (monotonicity (monotonicity (rewrite a!4) (= a!3 a!5))
                         (= (or (not L2_tr0) a!3) (or (not L2_tr0) a!5))))
      (a!12 (trans (monotonicity (rewrite (= a!9 a!10))
                                 (= (or a!9 |L2#level_3!79|)
                                    (or a!10 |L2#level_3!79|)))
                   (rewrite (= (or a!10 |L2#level_3!79|) a!11))
                   (= (or a!9 |L2#level_3!79|) a!11)))
      (a!15 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!14
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!21 (monotonicity (rewrite a!19) (= (not (<= L2_4_n L2_5_0)) a!20)))
      (a!22 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!20))
      (a!30 (unit-resolution (asserted (or (not spacer_proxy!111) a!29))
                             (asserted spacer_proxy!111)
                             a!29))
      (a!42 (unit-resolution (asserted a!41)
                             (asserted spacer_proxy!112)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!49 (rewrite (= (=> L2_tr0 a!48) (or (not L2_tr0) a!48))))
      (a!51 (= (or (=> L2_tr0 a!45) |L2#level_3!79|)
               (or (or (not L2_tr0) a!48) |L2#level_3!79|)))
      (a!54 (monotonicity (monotonicity (rewrite a!52) (= a!48 a!53))
                          (= (or (not L2_tr0) a!48) (or (not L2_tr0) a!53))))
      (a!55 (= (or (or (not L2_tr0) a!48) |L2#level_3!79|)
               (or (or (not L2_tr0) a!53) |L2#level_3!79|)))
      (a!57 (= (or (or (not L2_tr0) a!53) |L2#level_3!79|) a!56))
      (a!58 (= (or (or (not L2_tr0) a!48) |L2#level_3!79|) a!56))
      (a!63 (unit-resolution (asserted a!62)
                             (asserted spacer_proxy!113)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
(let ((a!7 (mp (asserted (or (not L2_tr0) a!3)) a!6 (or (not L2_tr0) a!5)))
      (a!8 (monotonicity (rewrite (= a!5 (not a!2)))
                         (= (or (not L2_tr0) a!5) (or (not L2_tr0) (not a!2)))))
      (a!13 (unit-resolution (mp (asserted (or a!9 |L2#level_3!79|)) a!12 a!11)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_3!79|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!16 (or a!15 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!23 (monotonicity (monotonicity (rewrite a!18) a!21 (= a!17 a!22))
                          (= (or (not L2_tr1) a!17) (or (not L2_tr1) a!22))))
      (a!25 (monotonicity (rewrite (= a!22 (not a!15)))
                          (= (or (not L2_tr1) a!22)
                             (or (not L2_tr1) (not a!15)))))
      (a!43 (or a!2 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!50 (trans (monotonicity (monotonicity (monotonicity a!46 a!47)
                                               (= a!45 a!48))
                                 (= (=> L2_tr0 a!45) (=> L2_tr0 a!48)))
                   a!49
                   (= (=> L2_tr0 a!45) (or (not L2_tr0) a!48))))
      (a!64 (th-lemma a!63 (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
(let ((a!24 (mp (asserted (or (not L2_tr1) a!17)) a!23 (or (not L2_tr1) a!22)))
      (a!59 (trans (monotonicity a!50 a!51)
                   (trans (monotonicity a!54 a!55) (rewrite a!57) a!58)
                   (= (or (=> L2_tr0 a!45) |L2#level_3!79|) a!56))))
(let ((a!26 (unit-resolution (mp a!24 a!25 (or (not L2_tr1) (not a!15)))
                             (hypothesis L2_tr1)
                             (not a!15)))
      (a!60 (mp (asserted (or (=> L2_tr0 a!45) |L2#level_3!79|)) a!59 a!56)))
(let ((a!27 (unit-resolution (def-axiom a!16)
                             a!26
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!34 (unit-resolution (def-axiom (or a!15 (= L2_4_0 L2_4_n)))
                             a!26
                             (= L2_4_0 L2_4_n))))
(let ((a!28 (th-lemma a!27 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!35 (th-lemma a!34 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!36 (th-lemma a!13
                      a!28
                      (th-lemma (th-lemma (th-lemma a!30 a!31) a!32) a!33)
                      a!35
                      false)))
(let ((a!37 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma a!36 (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!38 (unit-resolution (mp a!7 a!8 (or (not L2_tr0) (not a!2)))
                             a!37
                             (not a!2))))
(let ((a!39 (unit-resolution (def-axiom (or a!2 (= L1_2_0 L2_2_n)))
                             a!38
                             (= L1_2_0 L2_2_n)))
      (a!44 (unit-resolution (def-axiom a!43)
                             a!38
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!61 (unit-resolution (def-axiom (or a!2 (= L2_5_n 0)))
                             a!38
                             (= L2_5_n 0))))
(let ((a!40 (th-lemma (symm a!39 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!65 (th-lemma (symm a!39 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0))))
(let ((a!66 (unit-resolution a!60
                             (th-lemma (th-lemma a!61 (>= L2_5_n 0))
                                       a!64
                                       a!65
                                       (not (<= L1_2_0 1)))
                             (asserted (not |L2#level_3!79|))
                             a!37
                             (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0))))
  (th-lemma a!40 a!42 a!44 a!30 a!66 false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_4_n (* (- 1) L2_2_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_4_n (* (- 1) L2_2_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_4_n (* (- 1) L2_2_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 3 new size: 2
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or a!1 (<= (+ L2_4_n (* (- 1) L2_2_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 L2 (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or a!1 (<= (+ L2_4_n (* (- 1) L2_2_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L2 (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or a!1 (<= (+ L2_4_n (* (- 1) L2_2_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or a!1 (<= (+ L2_4_n (* (- 1) L2_2_n)) 0) |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!2 (or a!1 (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
  (or (=> query!0_dummy a!2) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!2 (or a!1 (<= (+ L2_4_1 (* (- 1) L2_2_1)) 0))))
  (or (=> query!0_dummy a!2) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!2 (or a!1 (<= (+ L2_4_2 (* (- 1) L2_2_2)) 0))))
  (or (=> query!0_dummy a!2) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!2 (or a!1 (<= (+ L2_4_3 (* (- 1) L2_2_3)) 0))))
  (or (=> query!0_dummy a!2) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!2 (or a!1 (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
  (or (=> L2_tr1 a!2) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 7
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3)))
      (a!2 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!3 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!4 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3)))
      (a!8 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
              (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!9 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3)))
      (a!12 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)
                |L2#level_4!81|))
      (a!17 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!19 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!20 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!21 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!25 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!33 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!35 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!36 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!37 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!38 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!47 (or (not spacer_proxy!75) (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!57 (or (not spacer_proxy!74) (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!59 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!66 (or (not spacer_proxy!72) (<= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!74 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!77 (or (not spacer_proxy!73) (>= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!86 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!87 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!88 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!89 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!91 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!92 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!103 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!104 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
(let ((a!5 (rewrite (= (=> L2_tr0 a!4) (or (not L2_tr0) a!4))))
      (a!7 (= (or (=> L2_tr0 a!1) |L2#level_4!81|)
              (or (or (not L2_tr0) a!4) |L2#level_4!81|)))
      (a!10 (monotonicity (monotonicity (rewrite a!8) (= a!4 a!9))
                          (= (or (not L2_tr0) a!4) (or (not L2_tr0) a!9))))
      (a!11 (= (or (or (not L2_tr0) a!4) |L2#level_4!81|)
               (or (or (not L2_tr0) a!9) |L2#level_4!81|)))
      (a!13 (= (or (or (not L2_tr0) a!9) |L2#level_4!81|) a!12))
      (a!14 (= (or (or (not L2_tr0) a!4) |L2#level_4!81|) a!12))
      (a!18 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!17))
      (a!22 (monotonicity (monotonicity (rewrite a!20) (= a!19 a!21))
                          (= (or (not L2_tr0) a!19) (or (not L2_tr0) a!21))))
      (a!26 (or a!25 (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!29 (or (not L2_tr1)
                a!25
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_4!81|))
      (a!34 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!33
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!39 (monotonicity (rewrite a!37) (= (not (<= L2_4_n L2_5_0)) a!38)))
      (a!40 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!38))
      (a!48 (unit-resolution (asserted a!47)
                             (asserted spacer_proxy!75)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!58 (unit-resolution (asserted a!57)
                             (asserted spacer_proxy!74)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!60 (unit-resolution (asserted (or (not spacer_proxy!71) a!59))
                             (asserted spacer_proxy!71)
                             a!59))
      (a!67 (unit-resolution (asserted a!66)
                             (asserted spacer_proxy!72)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!78 (unit-resolution (asserted a!77)
                             (asserted spacer_proxy!73)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!90 (monotonicity (monotonicity (monotonicity a!87 a!88) (= a!86 a!89))
                          (= (or (not spacer_proxy!0) a!86)
                             (or (not spacer_proxy!0) a!89))))
      (a!93 (monotonicity (monotonicity (rewrite a!91) (= a!89 a!92))
                          (= (or (not spacer_proxy!0) a!89)
                             (or (not spacer_proxy!0) a!92)))))
(let ((a!6 (trans (monotonicity (monotonicity (monotonicity a!2 a!3)
                                              (= a!1 a!4))
                                (= (=> L2_tr0 a!1) (=> L2_tr0 a!4)))
                  a!5
                  (= (=> L2_tr0 a!1) (or (not L2_tr0) a!4))))
      (a!23 (mp (asserted (or (not L2_tr0) a!19)) a!22 (or (not L2_tr0) a!21)))
      (a!24 (monotonicity (rewrite (= a!21 (not a!18)))
                          (= (or (not L2_tr0) a!21)
                             (or (not L2_tr0) (not a!18)))))
      (a!27 (rewrite (= (=> L2_tr1 a!26) (or (not L2_tr1) a!26))))
      (a!28 (= (or (=> L2_tr1 a!26) |L2#level_4!81|)
               (or (or (not L2_tr1) a!26) |L2#level_4!81|)))
      (a!30 (= (or (or (not L2_tr1) a!26) |L2#level_4!81|) a!29))
      (a!41 (monotonicity (monotonicity (rewrite a!36) a!39 (= a!35 a!40))
                          (= (or (not L2_tr1) a!35) (or (not L2_tr1) a!40))))
      (a!43 (monotonicity (rewrite (= a!40 (not a!34)))
                          (= (or (not L2_tr1) a!40)
                             (or (not L2_tr1) (not a!34)))))
      (a!49 (th-lemma a!48 (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!50 (or a!34 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!68 (th-lemma a!67 a!48 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!72 (or a!18 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!79 (def-axiom (or a!18 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!80 (def-axiom (or a!18
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!83 (def-axiom (or a!18 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!94 (trans a!90
                   a!93
                   (= (or (not spacer_proxy!0) a!86)
                      (or (not spacer_proxy!0) a!92))))
      (a!96 (def-axiom (or a!18 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!97 (def-axiom (or a!18
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!100 (def-axiom (or a!18 (= L1_3_0 (select aux!14_n L2_2_n))))))
(let ((a!15 (trans (monotonicity a!6 a!7)
                   (trans (monotonicity a!10 a!11) (rewrite a!13) a!14)
                   (= (or (=> L2_tr0 a!1) |L2#level_4!81|) a!12)))
      (a!31 (trans (monotonicity a!27 a!28)
                   (rewrite a!30)
                   (= (or (=> L2_tr1 a!26) |L2#level_4!81|) a!29)))
      (a!42 (mp (asserted (or (not L2_tr1) a!35)) a!41 (or (not L2_tr1) a!40)))
      (a!95 (mp (asserted (or (not spacer_proxy!0) a!86))
                a!94
                (or (not spacer_proxy!0) a!92))))
(let ((a!16 (mp (asserted (or (=> L2_tr0 a!1) |L2#level_4!81|)) a!15 a!12))
      (a!32 (mp (asserted (or (=> L2_tr1 a!26) |L2#level_4!81|)) a!31 a!29))
      (a!44 (unit-resolution (mp a!42 a!43 (or (not L2_tr1) (not a!34)))
                             (hypothesis L2_tr1)
                             (not a!34))))
(let ((a!45 (unit-resolution (def-axiom (or a!34 (= L2_2_0 L2_2_n)))
                             a!44
                             (= L2_2_0 L2_2_n)))
      (a!51 (unit-resolution (def-axiom a!50)
                             a!44
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!55 (unit-resolution (def-axiom (or a!34 (= L2_4_0 L2_4_n)))
                             a!44
                             (= L2_4_0 L2_4_n))))
(let ((a!46 (th-lemma a!45 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!52 (th-lemma a!51 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!56 (th-lemma a!55 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!61 (th-lemma a!45 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0))))
(let ((a!53 (th-lemma a!46 a!49 a!52 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!54 (unit-resolution a!32
                             a!53
                             (asserted (not |L2#level_4!81|))
                             (hypothesis L2_tr1)
                             (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!62 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!54 a!56 a!58 a!60 a!61 false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!63 (unit-resolution (mp a!23 a!24 (or (not L2_tr0) (not a!18)))
                             a!62
                             (not a!18))))
(let ((a!64 (unit-resolution (def-axiom (or a!18 (= L1_0_0 L2_0_n)))
                             a!63
                             (= L1_0_0 L2_0_n)))
      (a!69 (unit-resolution (def-axiom (or a!18 (= L2_5_n 0)))
                             a!63
                             (= L2_5_n 0)))
      (a!70 (unit-resolution (def-axiom (or a!18 (= L1_2_0 L2_2_n)))
                             a!63
                             (= L1_2_0 L2_2_n)))
      (a!73 (unit-resolution (def-axiom a!72)
                             a!63
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!81 (symm (unit-resolution a!80
                                   a!63
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!84 (symm (unit-resolution a!83
                                   a!63
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!98 (symm (unit-resolution a!97
                                   a!63
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!101 (symm (unit-resolution a!100
                                    a!63
                                    (= L1_3_0 (select aux!14_n L2_2_n)))
                   (= (select aux!14_n L2_2_n) L1_3_0))))
(let ((a!65 (th-lemma (symm a!64 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!71 (th-lemma (symm a!70 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!75 (th-lemma (symm a!70 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!76 (th-lemma (symm a!64 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!82 (trans (unit-resolution a!79
                                    a!63
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!81
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!99 (trans (unit-resolution a!96
                                    a!63
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!98
                   (= L2_3_n (select aux!14_n L2_2_n)))))
(let ((a!85 (th-lemma (trans a!82 a!84 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!102 (th-lemma (trans a!99 a!101 (= L2_3_n L1_3_0))
                       (<= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!105 (th-lemma (th-lemma a!85
                                 (unit-resolution a!95
                                                  (asserted spacer_proxy!0)
                                                  a!92)
                                 a!102
                                 a!103)
                       a!104)))
  (unit-resolution a!16
                   (th-lemma a!65
                             a!58
                             a!68
                             (th-lemma a!69 (<= L2_5_n 0))
                             (<= L1_0_0 2))
                   (th-lemma a!71 a!60 a!58 a!73 a!74)
                   (asserted (not |L2#level_4!81|))
                   a!62
                   (th-lemma (th-lemma a!69 (>= L2_5_n 0))
                             a!48
                             a!75
                             (not (<= L1_2_0 1)))
                   (th-lemma a!76
                             a!78
                             (th-lemma a!69 (>= L2_5_n 0))
                             (>= L1_0_0 2))
                   a!105
                   (th-lemma a!71
                             a!58
                             (th-lemma a!69 (<= L2_5_n 0))
                             (not (>= L1_2_0 3)))
                   false))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_2_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_2_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_2_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!3 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 2))))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!3 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 2))))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!3 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 2))))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (or (=> L2_tr1 a!4) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 7
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2)))
      (a!5 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!6 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!7 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!8 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!9 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2)
              (>= (+ (* (- 1) L2_5_0) L2_0_0) 2)))
      (a!10 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 2)))
      (a!16 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!17 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!18 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 2)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) (- 2))))
      (a!19 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) (- 2))))
      (a!28 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!30 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!31 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!32 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!33 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!39 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!41 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!42 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!46 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!53 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!56 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!57 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!58 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!69 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!70 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!71 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!72 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!74 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!75 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!86 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!87 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!91 (or (not spacer_proxy!24) (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!93 (hypothesis (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!94 (or (not spacer_proxy!22) (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!96 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!98 (or (not spacer_proxy!21) (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!102 (or (not spacer_proxy!25) (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!110 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!129 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2)))
      (a!149 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!151 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!152 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!154 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
                (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!155 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!156 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
                (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!157 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!163 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!164 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!165 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
                (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!166 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!176 (hypothesis (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!177 (hypothesis (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!178 (hypothesis (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!179 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!180 (not (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!181 (not (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!182 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!183 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2)))
      (a!11 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!7
                a!2
                a!10
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2)))
      (a!20 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!2
                a!19
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2)))
      (a!23 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!2
                a!19
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2)
                |L2#level_5!143|))
      (a!29 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!28
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!34 (monotonicity (rewrite a!32) (= (not (<= L2_4_n L2_5_0)) a!33)))
      (a!35 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!33))
      (a!40 (or a!39
                (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!43 (or a!39
                (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!47 (or a!39
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!49 (or (not L2_tr0)
                a!39
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!54 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!53))
      (a!59 (monotonicity (monotonicity (rewrite a!57) (= a!56 a!58))
                          (= (or (not L2_tr0) a!56) (or (not L2_tr0) a!58))))
      (a!73 (monotonicity (monotonicity (monotonicity a!70 a!71) (= a!69 a!72))
                          (= (or (not spacer_proxy!0) a!69)
                             (or (not spacer_proxy!0) a!72))))
      (a!76 (monotonicity (monotonicity (rewrite a!74) (= a!72 a!75))
                          (= (or (not spacer_proxy!0) a!72)
                             (or (not spacer_proxy!0) a!75))))
      (a!92 (unit-resolution (asserted a!91)
                             (asserted spacer_proxy!24)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!95 (unit-resolution (asserted a!94)
                             (asserted spacer_proxy!22)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!99 (unit-resolution (asserted a!98)
                             (asserted spacer_proxy!21)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!103 (unit-resolution (asserted a!102)
                              (asserted spacer_proxy!25)
                              (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!111 (unit-resolution (asserted (or (not spacer_proxy!23) a!110))
                              (asserted spacer_proxy!23)
                              a!110))
      (a!153 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                 a!151
                 a!152))
      (a!158 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                 a!155
                 a!157))
      (a!167 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                 a!164
                 a!166))
      (a!170 (or (not L2_tr1)
                 (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                 a!164
                 a!166
                 |L2#level_5!143|)))
(let ((a!12 (monotonicity (monotonicity (monotonicity (monotonicity a!5 a!6)
                                                      (= a!1 a!7))
                                        (monotonicity (monotonicity a!8 a!9)
                                                      (= a!3 a!10))
                                        (= a!4 a!11))
                          (= (=> L2_tr1 a!4) (=> L2_tr1 a!11))))
      (a!13 (rewrite (= (=> L2_tr1 a!11) (or (not L2_tr1) a!11))))
      (a!15 (= (or (=> L2_tr1 a!4) |L2#level_5!143|)
               (or (or (not L2_tr1) a!11) |L2#level_5!143|)))
      (a!21 (monotonicity (monotonicity (monotonicity (rewrite a!16)
                                                      (= a!7 a!17))
                                        (monotonicity (rewrite a!18)
                                                      (= a!10 a!19))
                                        (= a!11 a!20))
                          (= (or (not L2_tr1) a!11) (or (not L2_tr1) a!20))))
      (a!22 (= (or (or (not L2_tr1) a!11) |L2#level_5!143|)
               (or (or (not L2_tr1) a!20) |L2#level_5!143|)))
      (a!24 (= (or (or (not L2_tr1) a!20) |L2#level_5!143|) a!23))
      (a!25 (= (or (or (not L2_tr1) a!11) |L2#level_5!143|) a!23))
      (a!36 (monotonicity (monotonicity (rewrite a!31) a!34 (= a!30 a!35))
                          (= (or (not L2_tr1) a!30) (or (not L2_tr1) a!35))))
      (a!38 (monotonicity (rewrite (= a!35 (not a!29)))
                          (= (or (not L2_tr1) a!35)
                             (or (not L2_tr1) (not a!29)))))
      (a!44 (rewrite (= (=> L2_tr0 a!43) (or (not L2_tr0) a!43))))
      (a!48 (monotonicity (monotonicity (rewrite a!46) (= a!43 a!47))
                          (= (or (not L2_tr0) a!43) (or (not L2_tr0) a!47))))
      (a!50 (rewrite (= (or (not L2_tr0) a!47) a!49)))
      (a!55 (def-axiom (or a!54 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!60 (mp (asserted (or (not L2_tr0) a!56)) a!59 (or (not L2_tr0) a!58)))
      (a!61 (monotonicity (rewrite (= a!58 (not a!54)))
                          (= (or (not L2_tr0) a!58)
                             (or (not L2_tr0) (not a!54)))))
      (a!63 (def-axiom (or a!54
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!66 (def-axiom (or a!54 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!77 (trans a!73
                   a!76
                   (= (or (not spacer_proxy!0) a!69)
                      (or (not spacer_proxy!0) a!75))))
      (a!79 (def-axiom (or a!54 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!80 (def-axiom (or a!54
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!83 (def-axiom (or a!54 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!97 (th-lemma a!92
                      (lemma (th-lemma a!93 a!95 false) a!96)
                      (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!106 (or a!54 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!120 (th-lemma a!99 a!103 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!126 (or a!29 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!133 (def-axiom (or a!29 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!134 (def-axiom (or a!29
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!136 (def-axiom (or a!29
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!138 (def-axiom (or a!29 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!141 (def-axiom (or a!29 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!142 (def-axiom (or a!29
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!144 (def-axiom (or a!29
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!146 (def-axiom (or a!29 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!159 (monotonicity (monotonicity (monotonicity (monotonicity a!8 a!154)
                                                       (= a!151 a!155))
                                         (monotonicity (monotonicity a!5 a!156)
                                                       (= a!152 a!157))
                                         (= a!153 a!158))
                           (= (=> L2_tr1 a!153) (=> L2_tr1 a!158))))
      (a!160 (rewrite (= (=> L2_tr1 a!158) (or (not L2_tr1) a!158))))
      (a!162 (= (or (=> L2_tr1 a!153) |L2#level_5!143|)
                (or (or (not L2_tr1) a!158) |L2#level_5!143|)))
      (a!168 (monotonicity (monotonicity (monotonicity (rewrite a!163)
                                                       (= a!155 a!164))
                                         (monotonicity (rewrite a!165)
                                                       (= a!157 a!166))
                                         (= a!158 a!167))
                           (= (or (not L2_tr1) a!158) (or (not L2_tr1) a!167))))
      (a!169 (= (or (or (not L2_tr1) a!158) |L2#level_5!143|)
                (or (or (not L2_tr1) a!167) |L2#level_5!143|)))
      (a!171 (= (or (or (not L2_tr1) a!167) |L2#level_5!143|) a!170))
      (a!172 (= (or (or (not L2_tr1) a!158) |L2#level_5!143|) a!170))
      (a!175 (th-lemma a!103 (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!14 (trans a!12 a!13 (= (=> L2_tr1 a!4) (or (not L2_tr1) a!11))))
      (a!37 (mp (asserted (or (not L2_tr1) a!30)) a!36 (or (not L2_tr1) a!35)))
      (a!45 (trans (monotonicity (monotonicity (monotonicity a!41 a!42)
                                               (= a!40 a!43))
                                 (= (=> L2_tr0 a!40) (=> L2_tr0 a!43)))
                   a!44
                   (= (=> L2_tr0 a!40) (or (not L2_tr0) a!43))))
      (a!51 (trans a!48 a!50 (= (or (not L2_tr0) a!43) a!49)))
      (a!62 (unit-resolution (mp a!60 a!61 (or (not L2_tr0) (not a!54)))
                             (hypothesis L2_tr0)
                             (not a!54)))
      (a!78 (mp (asserted (or (not spacer_proxy!0) a!69))
                a!77
                (or (not spacer_proxy!0) a!75)))
      (a!161 (trans a!159 a!160 (= (=> L2_tr1 a!153) (or (not L2_tr1) a!158)))))
(let ((a!26 (trans (monotonicity a!14 a!15)
                   (trans (monotonicity a!21 a!22) (rewrite a!24) a!25)
                   (= (or (=> L2_tr1 a!4) |L2#level_5!143|) a!23)))
      (a!52 (mp (asserted (=> L2_tr0 a!40))
                (trans a!45 a!51 (= (=> L2_tr0 a!40) a!49))
                a!49))
      (a!64 (symm (unit-resolution a!63
                                   a!62
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!67 (symm (unit-resolution a!66
                                   a!62
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!81 (symm (unit-resolution a!80
                                   a!62
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!84 (symm (unit-resolution a!83
                                   a!62
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!89 (unit-resolution (def-axiom (or a!54 (= L1_2_0 L2_2_n)))
                             a!62
                             (= L1_2_0 L2_2_n)))
      (a!100 (unit-resolution (def-axiom (or a!54 (= L2_5_n 0)))
                              a!62
                              (= L2_5_n 0)))
      (a!104 (unit-resolution (def-axiom (or a!54 (= L1_4_0 L2_4_n)))
                              a!62
                              (= L1_4_0 L2_4_n)))
      (a!107 (unit-resolution (def-axiom a!106)
                              a!62
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!112 (unit-resolution (def-axiom (or a!54 (= L1_0_0 L2_0_n)))
                              a!62
                              (= L1_0_0 L2_0_n)))
      (a!173 (trans (monotonicity a!161 a!162)
                    (trans (monotonicity a!168 a!169) (rewrite a!171) a!172)
                    (= (or (=> L2_tr1 a!153) |L2#level_5!143|) a!170))))
(let ((a!27 (mp (asserted (or (=> L2_tr1 a!4) |L2#level_5!143|)) a!26 a!23))
      (a!65 (trans (unit-resolution a!55
                                    a!62
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!64
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!82 (trans (unit-resolution a!79
                                    a!62
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!81
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!90 (th-lemma (symm a!89 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!101 (th-lemma (symm a!89 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!105 (th-lemma (symm a!104 (= L2_4_n L1_4_0))
                       (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!109 (th-lemma (symm a!104 (= L2_4_n L1_4_0))
                       (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!113 (th-lemma (symm a!112 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!114 (th-lemma (symm a!112 (= L2_0_n L1_0_0))
                       (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!174 (mp (asserted (or (=> L2_tr1 a!153) |L2#level_5!143|)) a!173 a!170)))
(let ((a!68 (th-lemma (trans a!65 a!67 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!85 (th-lemma (trans a!82 a!84 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!108 (th-lemma a!105 a!107 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!88 (th-lemma (th-lemma a!68
                                (unit-resolution a!78
                                                 (asserted spacer_proxy!0)
                                                 a!75)
                                a!85
                                a!86)
                      a!87)))
(let ((a!115 (unit-resolution a!52
                              a!88
                              (th-lemma a!90
                                        a!97
                                        a!99
                                        (th-lemma a!100 (<= L2_5_n 0))
                                        (<= L1_2_0 1))
                              (hypothesis L2_tr0)
                              (th-lemma a!101
                                        a!103
                                        (th-lemma a!100 (>= L2_5_n 0))
                                        (not (<= L1_2_0 0)))
                              a!108
                              (th-lemma a!109
                                        (th-lemma a!100 (>= L2_5_n 0))
                                        a!111
                                        (not (<= L1_4_0 1)))
                              (th-lemma a!113
                                        (lemma (th-lemma a!93 a!95 false) a!96)
                                        (th-lemma a!100 (>= L2_5_n 0))
                                        (not (<= L1_0_0 0)))
                              (th-lemma a!114
                                        a!99
                                        (th-lemma a!100 (<= L2_5_n 0))
                                        (<= L1_0_0 1))
                              false)))
(let ((a!116 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!115 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!117 (unit-resolution (mp a!37 a!38 (or (not L2_tr1) (not a!29)))
                              a!116
                              (not a!29))))
(let ((a!118 (unit-resolution (def-axiom (or a!29 (= L2_0_0 L2_0_n)))
                              a!117
                              (= L2_0_0 L2_0_n)))
      (a!121 (unit-resolution (def-axiom (or a!29 (= L2_2_0 L2_2_n)))
                              a!117
                              (= L2_2_0 L2_2_n)))
      (a!124 (unit-resolution (def-axiom (or a!29 (= L2_4_0 L2_4_n)))
                              a!117
                              (= L2_4_0 L2_4_n)))
      (a!127 (unit-resolution (def-axiom a!126)
                              a!117
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!135 (trans (unit-resolution a!133
                                     a!117
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!134
                                     a!117
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!139 (symm (unit-resolution a!138
                                    a!117
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!143 (trans (unit-resolution a!141
                                     a!117
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!142
                                     a!117
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!147 (symm (unit-resolution a!146
                                    a!117
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n))))
(let ((a!119 (th-lemma a!118 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!122 (th-lemma a!121 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!125 (th-lemma a!124 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!128 (th-lemma a!127 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!130 (th-lemma a!121 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!131 (th-lemma a!127 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!137 (trans a!135
                    (unit-resolution a!136
                                     a!117
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!145 (trans a!143
                    (unit-resolution a!144
                                     a!117
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!184 (th-lemma a!118 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0))))
(let ((a!123 (th-lemma a!119 a!120 a!122 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!132 (th-lemma a!130 a!92 a!131 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!140 (th-lemma (trans a!137 a!139 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!148 (th-lemma (trans a!145 a!147 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!185 (th-lemma a!184 a!97 a!130 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!150 (unit-resolution a!27
                              a!123
                              (asserted (not |L2#level_5!143|))
                              a!116
                              (th-lemma a!125 a!111 a!128 a!129)
                              a!132
                              (th-lemma a!140
                                        (unit-resolution a!78
                                                         (asserted spacer_proxy!0)
                                                         a!75)
                                        a!148
                                        a!149)
                              a!19))
      (a!186 (unit-resolution a!174
                              (unit-resolution (lemma (th-lemma a!175
                                                                a!176
                                                                a!177
                                                                a!178
                                                                false)
                                                      (or a!179 a!180 a!181))
                                               a!122
                                               a!128
                                               a!179)
                              (asserted (not |L2#level_5!143|))
                              a!116
                              (th-lemma a!125
                                        (th-lemma a!111 a!182)
                                        a!128
                                        a!183)
                              a!185
                              (th-lemma a!140
                                        (unit-resolution a!78
                                                         (asserted spacer_proxy!0)
                                                         a!75)
                                        a!148
                                        a!149)
                              a!164)))
  (th-lemma a!150 a!186 false))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!2
      a!3))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 5 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 7
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not (= L1_0_0 0))
               (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0))))
      (a!2 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!3 (= (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!4 (or (not (= L1_0_0 0))
               (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0))))
      (a!8 (= (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
              (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!9 (or (not (= L1_0_0 0))
               (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
               (<= L1_5_0 0)
               (not (= L1_2_0 0))))
      (a!12 (or (not L2_tr0)
                (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))
                |L2#level_6!435|))
      (a!17 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!19 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!20 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!21 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!25 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!26 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!28 (rewrite (= (+ L2_3_0 (* (- 1) L2_1_0)) (+ (* (- 1) L2_1_0) L2_3_0))))
      (a!29 (= (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               (<= (+ (* (- 1) L2_1_0) L2_3_0) 0)))
      (a!30 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!31 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!32 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!33 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!39 (= (<= (+ (* (- 1) L2_1_0) L2_3_0) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!40 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!41 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!42 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!51 (hypothesis (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!52 (hypothesis (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!53 (hypothesis (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!54 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!56 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!57 (not (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!58 (not (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!59 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!61 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!62 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!63 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!64 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!84 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!85 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!86 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!87 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!89 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!90 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!102 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!103 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!105 (hypothesis (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!106 (hypothesis (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!107 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!108 (not (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!113 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!115 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!117 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!122 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!145 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
(let ((a!5 (rewrite (= (=> L2_tr0 a!4) (or (not L2_tr0) a!4))))
      (a!7 (= (or (=> L2_tr0 a!1) |L2#level_6!435|)
              (or (or (not L2_tr0) a!4) |L2#level_6!435|)))
      (a!10 (monotonicity (monotonicity (rewrite a!8) (= a!4 a!9))
                          (= (or (not L2_tr0) a!4) (or (not L2_tr0) a!9))))
      (a!11 (= (or (or (not L2_tr0) a!4) |L2#level_6!435|)
               (or (or (not L2_tr0) a!9) |L2#level_6!435|)))
      (a!13 (= (or (or (not L2_tr0) a!9) |L2#level_6!435|) a!12))
      (a!14 (= (or (or (not L2_tr0) a!4) |L2#level_6!435|) a!12))
      (a!18 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!17))
      (a!22 (monotonicity (monotonicity (rewrite a!20) (= a!19 a!21))
                          (= (or (not L2_tr0) a!19) (or (not L2_tr0) a!21))))
      (a!27 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
                (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
                a!25
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!26))
      (a!34 (or (<= (+ (* (- 1) L2_1_0) L2_3_0) 0)
                (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
                a!25
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!33))
      (a!43 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                a!25
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!42))
      (a!46 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                a!25
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!42
                |L2#level_6!435|))
      (a!55 (unit-resolution (asserted a!54)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!60 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!59
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!65 (monotonicity (rewrite a!63) (= (not (<= L2_4_n L2_5_0)) a!64)))
      (a!66 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!64))
      (a!88 (monotonicity (monotonicity (monotonicity a!85 a!86) (= a!84 a!87))
                          (= (or (not spacer_proxy!0) a!84)
                             (or (not spacer_proxy!0) a!87))))
      (a!91 (monotonicity (monotonicity (rewrite a!89) (= a!87 a!90))
                          (= (or (not spacer_proxy!0) a!87)
                             (or (not spacer_proxy!0) a!90))))
      (a!104 (unit-resolution (asserted a!103)
                              (asserted spacer_proxy!2)
                              (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!114 (unit-resolution (asserted (or (not spacer_proxy!3) a!113))
                              (asserted spacer_proxy!3)
                              a!113))
      (a!118 (unit-resolution (asserted a!117)
                              (asserted spacer_proxy!4)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!123 (unit-resolution (asserted a!122)
                              (asserted spacer_proxy!1)
                              (<= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!6 (trans (monotonicity (monotonicity (monotonicity a!2 a!3)
                                              (= a!1 a!4))
                                (= (=> L2_tr0 a!1) (=> L2_tr0 a!4)))
                  a!5
                  (= (=> L2_tr0 a!1) (or (not L2_tr0) a!4))))
      (a!23 (mp (asserted (or (not L2_tr0) a!19)) a!22 (or (not L2_tr0) a!21)))
      (a!24 (monotonicity (rewrite (= a!21 (not a!18)))
                          (= (or (not L2_tr0) a!21)
                             (or (not L2_tr0) (not a!18)))))
      (a!35 (monotonicity (monotonicity (monotonicity a!28 a!29)
                                        (monotonicity a!30 a!31)
                                        (monotonicity (monotonicity a!30 a!32)
                                                      (= a!26 a!33))
                                        (= a!27 a!34))
                          (= (=> L2_tr1 a!27) (=> L2_tr1 a!34))))
      (a!36 (rewrite (= (=> L2_tr1 a!34) (or (not L2_tr1) a!34))))
      (a!38 (= (or (=> L2_tr1 a!27) |L2#level_6!435|)
               (or (or (not L2_tr1) a!34) |L2#level_6!435|)))
      (a!44 (monotonicity (monotonicity (rewrite a!39)
                                        (rewrite a!40)
                                        (monotonicity (rewrite a!41)
                                                      (= a!33 a!42))
                                        (= a!34 a!43))
                          (= (or (not L2_tr1) a!34) (or (not L2_tr1) a!43))))
      (a!45 (= (or (or (not L2_tr1) a!34) |L2#level_6!435|)
               (or (or (not L2_tr1) a!43) |L2#level_6!435|)))
      (a!47 (= (or (or (not L2_tr1) a!43) |L2#level_6!435|) a!46))
      (a!48 (= (or (or (not L2_tr1) a!34) |L2#level_6!435|) a!46))
      (a!67 (monotonicity (monotonicity (rewrite a!62) a!65 (= a!61 a!66))
                          (= (or (not L2_tr1) a!61) (or (not L2_tr1) a!66))))
      (a!69 (monotonicity (rewrite (= a!66 (not a!60)))
                          (= (or (not L2_tr1) a!66)
                             (or (not L2_tr1) (not a!60)))))
      (a!73 (or a!60 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!76 (def-axiom (or a!60 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!77 (def-axiom (or a!60
                           (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))))
      (a!79 (def-axiom (or a!60
                           (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))))
      (a!81 (def-axiom (or a!60 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!92 (trans a!88
                   a!91
                   (= (or (not spacer_proxy!0) a!84)
                      (or (not spacer_proxy!0) a!90))))
      (a!94 (def-axiom (or a!60 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!95 (def-axiom (or a!60
                           (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))))
      (a!97 (def-axiom (or a!60
                           (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))))
      (a!99 (def-axiom (or a!60 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!129 (or a!18 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!131 (def-axiom (or a!18 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!132 (def-axiom (or a!18
                            (= (select aux!15_n L2_0_n)
                               (select aux!12_n L2_0_n)))))
      (a!135 (def-axiom (or a!18 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!138 (def-axiom (or a!18 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!139 (def-axiom (or a!18
                            (= (select aux!14_n L2_2_n)
                               (select aux!13_n L2_2_n)))))
      (a!142 (def-axiom (or a!18 (= L1_3_0 (select aux!14_n L2_2_n))))))
(let ((a!15 (trans (monotonicity a!6 a!7)
                   (trans (monotonicity a!10 a!11) (rewrite a!13) a!14)
                   (= (or (=> L2_tr0 a!1) |L2#level_6!435|) a!12)))
      (a!37 (trans a!35 a!36 (= (=> L2_tr1 a!27) (or (not L2_tr1) a!34))))
      (a!68 (mp (asserted (or (not L2_tr1) a!61)) a!67 (or (not L2_tr1) a!66)))
      (a!93 (mp (asserted (or (not spacer_proxy!0) a!84))
                a!92
                (or (not spacer_proxy!0) a!90))))
(let ((a!16 (mp (asserted (or (=> L2_tr0 a!1) |L2#level_6!435|)) a!15 a!12))
      (a!49 (trans (monotonicity a!37 a!38)
                   (trans (monotonicity a!44 a!45) (rewrite a!47) a!48)
                   (= (or (=> L2_tr1 a!27) |L2#level_6!435|) a!46)))
      (a!70 (unit-resolution (mp a!68 a!69 (or (not L2_tr1) (not a!60)))
                             (hypothesis L2_tr1)
                             (not a!60))))
(let ((a!50 (mp (asserted (or (=> L2_tr1 a!27) |L2#level_6!435|)) a!49 a!46))
      (a!71 (unit-resolution (def-axiom (or a!60 (= L2_0_0 L2_0_n)))
                             a!70
                             (= L2_0_0 L2_0_n)))
      (a!74 (unit-resolution (def-axiom a!73)
                             a!70
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!78 (trans (unit-resolution a!76
                                    a!70
                                    (= L2_1_0 (select aux!21_n L2_0_n)))
                   (unit-resolution a!77
                                    a!70
                                    (= (select aux!21_n L2_0_n)
                                       (select aux!18_n L2_0_n)))
                   (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!82 (symm (unit-resolution a!81
                                   a!70
                                   (= L2_1_n (select aux!16_n L2_0_n)))
                  (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!96 (trans (unit-resolution a!94
                                    a!70
                                    (= L2_3_0 (select aux!20_n L2_2_n)))
                   (unit-resolution a!95
                                    a!70
                                    (= (select aux!20_n L2_2_n)
                                       (select aux!19_n L2_2_n)))
                   (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!100 (symm (unit-resolution a!99
                                    a!70
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!109 (unit-resolution (def-axiom (or a!60 (= L2_2_0 L2_2_n)))
                              a!70
                              (= L2_2_0 L2_2_n)))
      (a!111 (unit-resolution (def-axiom (or a!60 (= L2_4_0 L2_4_n)))
                              a!70
                              (= L2_4_0 L2_4_n))))
(let ((a!72 (th-lemma a!71 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!75 (th-lemma a!74 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!80 (trans a!78
                   (unit-resolution a!79
                                    a!70
                                    (= (select aux!18_n L2_0_n)
                                       (select aux!16_n L2_0_n)))
                   (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!98 (trans a!96
                   (unit-resolution a!97
                                    a!70
                                    (= (select aux!19_n L2_2_n)
                                       (select aux!17_n L2_2_n)))
                   (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!110 (th-lemma a!109 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!112 (th-lemma a!111 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!116 (th-lemma a!71 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!119 (th-lemma a!74 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!121 (th-lemma a!109 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0))))
(let ((a!83 (th-lemma (trans a!80 a!82 (= L2_1_0 L2_1_n))
                      (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!101 (th-lemma (trans a!98 a!100 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!120 (th-lemma a!116 a!118 a!119 (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!124 (th-lemma a!121 a!123 a!119 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1))))
(let ((a!125 (unit-resolution a!50
                              (unit-resolution (lemma (th-lemma a!51
                                                                a!52
                                                                a!53
                                                                a!55
                                                                false)
                                                      (or a!56 a!57 a!58))
                                               a!72
                                               a!75
                                               a!56)
                              (th-lemma a!83
                                        (unit-resolution a!93
                                                         (asserted spacer_proxy!0)
                                                         a!90)
                                        a!101
                                        a!102)
                              (hypothesis L2_tr1)
                              (unit-resolution (lemma (th-lemma a!104
                                                                a!105
                                                                a!52
                                                                a!106
                                                                false)
                                                      (or a!107 a!108 a!57))
                                               a!110
                                               a!75
                                               a!107)
                              (asserted (not |L2#level_6!435|))
                              (th-lemma a!112 a!114 a!75 a!115)
                              a!120
                              a!124
                              false)))
(let ((a!126 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!125 (not L2_tr1))
                              (asserted (not L2_ext0_n))
                              L2_tr0)))
(let ((a!127 (unit-resolution (mp a!23 a!24 (or (not L2_tr0) (not a!18)))
                              a!126
                              (not a!18))))
(let ((a!128 (unit-resolution (def-axiom (or a!18 (= L2_5_n 0)))
                              a!127
                              (= L2_5_n 0)))
      (a!130 (unit-resolution (def-axiom a!129)
                              a!127
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!133 (symm (unit-resolution a!132
                                    a!127
                                    (= (select aux!15_n L2_0_n)
                                       (select aux!12_n L2_0_n)))
                   (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!136 (symm (unit-resolution a!135
                                    a!127
                                    (= L1_1_0 (select aux!15_n L2_0_n)))
                   (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!140 (symm (unit-resolution a!139
                                    a!127
                                    (= (select aux!14_n L2_2_n)
                                       (select aux!13_n L2_2_n)))
                   (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!143 (symm (unit-resolution a!142
                                    a!127
                                    (= L1_3_0 (select aux!14_n L2_2_n)))
                   (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!146 (unit-resolution (def-axiom (or a!18 (= L1_2_0 L2_2_n)))
                              a!127
                              (= L1_2_0 L2_2_n)))
      (a!150 (unit-resolution (def-axiom (or a!18 (= L1_0_0 L2_0_n)))
                              a!127
                              (= L1_0_0 L2_0_n))))
(let ((a!134 (trans (unit-resolution a!131
                                     a!127
                                     (= L2_1_n (select aux!12_n L2_0_n)))
                    a!133
                    (= L2_1_n (select aux!15_n L2_0_n))))
      (a!141 (trans (unit-resolution a!138
                                     a!127
                                     (= L2_3_n (select aux!13_n L2_2_n)))
                    a!140
                    (= L2_3_n (select aux!14_n L2_2_n))))
      (a!147 (monotonicity (trans a!146
                                  (th-lemma a!104 a!123 (= L2_2_n L2_5_n))
                                  (= L1_2_0 L2_5_n))
                           (= (= L1_2_0 0) (= L2_5_n 0))))
      (a!151 (trans (trans a!150
                           (th-lemma a!104 a!123 a!55 a!118 (= L2_0_n L2_2_n))
                           (= L1_0_0 L2_2_n))
                    (th-lemma a!104 a!123 (= L2_2_n L2_5_n))
                    (= L1_0_0 L2_5_n))))
(let ((a!137 (th-lemma (trans a!134 a!136 (= L2_1_n L1_1_0))
                       (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!144 (th-lemma (trans a!141 a!143 (= L2_3_n L1_3_0))
                       (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!148 (mp a!128 (symm a!147 (= (= L2_5_n 0) (= L1_2_0 0))) (= L1_2_0 0)))
      (a!152 (symm (monotonicity a!151 (= (= L1_0_0 0) (= L2_5_n 0)))
                   (= (= L2_5_n 0) (= L1_0_0 0)))))
(let ((a!149 (unit-resolution (hypothesis (not (= L1_2_0 0))) a!148 false)))
  (unit-resolution a!16
                   (th-lemma (th-lemma a!128 (>= L2_5_n 0))
                             a!114
                             a!130
                             (not (<= L1_5_0 0)))
                   (th-lemma a!137
                             (unit-resolution a!93
                                              (asserted spacer_proxy!0)
                                              a!90)
                             a!144
                             a!145)
                   a!126
                   (lemma a!149 (= L1_2_0 0))
                   (mp a!128 a!152 (= L1_0_0 0))
                   (asserted (not |L2#level_6!435|))
                   false))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(= L2_2_n L2_5_n)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
(= L2_0_n L2_2_n)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(= L2_2_n L2_5_n)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
(= L2_0_n L2_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(= L2_2_n L2_5_n)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
(= L2_0_n L2_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1))
      (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1))))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      a!4
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3
               a!4)))
  (or (=> L2_tr1 a!5) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 7 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 7 depth: 7
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  true)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 4187))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  239)
(define-fun L2_5_0 () Int
  (- 4187))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 4186))
(define-fun L2_1_3 () Int
  1)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!1947))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!1951))
(define-fun query!0_0_n () Int
  (- 4187))
(define-fun L2_3_3 () Int
  2804)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  4749)
(define-fun L2_1_2 () Int
  239)
(define-fun query!0_3_n () Int
  2804)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!1950))
(define-fun |query!0#level_9!1735| () Bool
  false)
(define-fun L2_3_1 () Int
  2804)
(define-fun L2_5_1 () Int
  (- 4187))
(define-fun query!0_2_n () Int
  4749)
(define-fun L2_5_2 () Int
  (- 4187))
(define-fun |query!0#level_8!1203| () Bool
  false)
(define-fun L2_0_2 () Int
  (- 4186))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!1949))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!1945))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  0)
(define-fun |query!0#level_4!80| () Bool
  true)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 4187))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 4187))
(define-fun |query!0#level_7!853| () Bool
  false)
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!1946))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  true)
(define-fun query!0_4_n () Int
  (- 4186))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  239)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!1948))
(define-fun L2_0_0 () Int
  (- 4187))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!1953))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!1944))
(define-fun L2_2_0 () Int
  (- 4187))
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!1952))
(define-fun L2_3_2 () Int
  0)
(define-fun L2_2_1 () Int
  4749)
(define-fun L2_4_0 () Int
  0)
(define-fun L2_1_0 () Int
  1)
(define-fun k!1951 ((x!0 Int)) Int
  (ite (= x!0 4749) 2804
    2804))
(define-fun k!1948 ((x!0 Int)) Int
  (ite (= x!0 4749) 2804
  (ite (= x!0 (- 4187)) 0
    2804)))
(define-fun k!1945 ((x!0 Int)) Int
  (ite (= x!0 (- 4187)) 1
  (ite (= x!0 (- 4186)) 239
    1)))
(define-fun k!1953 ((x!0 Int)) Int
  (ite (= x!0 (- 4187)) 0
    0))
(define-fun k!1950 ((x!0 Int)) Int
  (ite (= x!0 (- 4186)) 239
    239))
(define-fun k!1947 ((x!0 Int)) Int
  (ite (= x!0 (- 4187)) 0
    0))
(define-fun k!1944 ((x!0 Int)) Int
  (ite (= x!0 (- 4187)) 1
    1))
(define-fun k!1952 ((x!0 Int)) Int
  (ite (= x!0 (- 4186)) 239
    239))
(define-fun k!1949 ((x!0 Int)) Int
  (ite (= x!0 4749) 2804
    2804))
(define-fun k!1946 ((x!0 Int)) Int
  (ite (= x!0 (- 4187)) 1
    1))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L2_1_3) L2_3_2)))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 7
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L2_1_0 () Int
  3610)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun spacer_proxy!98 () Bool
  false)
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!1969))
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun spacer_proxy!62 () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!97 () Bool
  false)
(define-fun spacer_proxy!100 () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun spacer_proxy!128 () Bool
  false)
(define-fun spacer_proxy!61 () Bool
  false)
(define-fun L2_4_n () Int
  1)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun spacer_proxy!102 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!1971))
(define-fun L2_0_n () Int
  0)
(define-fun spacer_proxy!42 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!96 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!71 () Bool
  false)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!1970))
(define-fun spacer_proxy!23 () Bool
  false)
(define-fun |L2#level_5!143| () Bool
  true)
(define-fun spacer_proxy!99 () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  true)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun spacer_proxy!57 () Bool
  false)
(define-fun L2_1_n () Int
  3610)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!1968))
(define-fun spacer_proxy!101 () Bool
  false)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!1967))
(define-fun L2_3_0 () Int
  3609)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!59 () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun spacer_proxy!60 () Bool
  false)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!1966))
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun spacer_proxy!26 () Bool
  false)
(define-fun spacer_proxy!56 () Bool
  false)
(define-fun L2_3_n () Int
  3609)
(define-fun spacer_proxy!80 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_2_0 () Int
  0)
(define-fun spacer_proxy!111 () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  1)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!1967 ((x!0 Int)) Int
  (ite (= x!0 0) 3610
    3610))
(define-fun k!1971 ((x!0 Int)) Int
  (ite (= x!0 0) 3609
    3609))
(define-fun k!1968 ((x!0 Int)) Int
  (ite (= x!0 0) 3609
    3609))
(define-fun k!1969 ((x!0 Int)) Int
  (ite (= x!0 0) 3609
    3609))
(define-fun k!1966 ((x!0 Int)) Int
  (ite (= x!0 0) 3610
    3610))
(define-fun k!1970 ((x!0 Int)) Int
  (ite (= x!0 0) 3610
    3610))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ (* (- 1) L2_1_0) L2_3_0)))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 7
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!118 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!1981))
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun spacer_proxy!116 () Bool
  false)
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!114 () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun L2_4_n () Int
  2)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun spacer_proxy!61 () Bool
  false)
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!1983))
(define-fun L2_0_n () Int
  1)
(define-fun spacer_proxy!25 () Bool
  true)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!71 () Bool
  false)
(define-fun spacer_proxy!21 () Bool
  true)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!1982))
(define-fun spacer_proxy!23 () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  true)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun L2_1_n () Int
  3610)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!1980))
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!1979))
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_3_0 () Int
  3609)
(define-fun spacer_proxy!78 () Bool
  false)
(define-fun spacer_proxy!24 () Bool
  true)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  true)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  1)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!1978))
(define-fun spacer_proxy!121 () Bool
  false)
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  1)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_3_n () Int
  3609)
(define-fun spacer_proxy!26 () Bool
  false)
(define-fun L2_2_0 () Int
  1)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  3610)
(define-fun spacer_proxy!111 () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  2)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!1979 ((x!0 Int)) Int
  (ite (= x!0 1) 3610
    3610))
(define-fun k!1983 ((x!0 Int)) Int
  (ite (= x!0 1) 3609
    3609))
(define-fun k!1980 ((x!0 Int)) Int
  (ite (= x!0 1) 3609
    3609))
(define-fun k!1981 ((x!0 Int)) Int
  (ite (= x!0 1) 3609
    3609))
(define-fun k!1978 ((x!0 Int)) Int
  (ite (= x!0 1) 3610
    3610))
(define-fun k!1982 ((x!0 Int)) Int
  (ite (= x!0 1) 3610
    3610))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and (not (<= L2_4_n L2_5_0))
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L2_1_0) L2_3_0))))
      (a!2 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
       (not (<= L2_4_0 L2_5_0))
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 2)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 7
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3)))
      (a!2 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!3 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!4 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3)))
      (a!8 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
              (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!9 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3)))
      (a!12 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)
                |L2#level_4!81|))
      (a!17 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!19 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!20 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!21 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!25 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!33 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!35 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!36 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!37 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!38 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!47 (or (not spacer_proxy!75) (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!57 (or (not spacer_proxy!74) (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!59 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!66 (or (not spacer_proxy!72) (<= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!72 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!75 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!84 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!93 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!94 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!96 (or (not spacer_proxy!73) (>= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!99 (hypothesis (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!100 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1))))
(let ((a!5 (rewrite (= (=> L2_tr0 a!4) (or (not L2_tr0) a!4))))
      (a!7 (= (or (=> L2_tr0 a!1) |L2#level_4!81|)
              (or (or (not L2_tr0) a!4) |L2#level_4!81|)))
      (a!10 (monotonicity (monotonicity (rewrite a!8) (= a!4 a!9))
                          (= (or (not L2_tr0) a!4) (or (not L2_tr0) a!9))))
      (a!11 (= (or (or (not L2_tr0) a!4) |L2#level_4!81|)
               (or (or (not L2_tr0) a!9) |L2#level_4!81|)))
      (a!13 (= (or (or (not L2_tr0) a!9) |L2#level_4!81|) a!12))
      (a!14 (= (or (or (not L2_tr0) a!4) |L2#level_4!81|) a!12))
      (a!18 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!17))
      (a!22 (monotonicity (monotonicity (rewrite a!20) (= a!19 a!21))
                          (= (or (not L2_tr0) a!19) (or (not L2_tr0) a!21))))
      (a!26 (or a!25 (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!29 (or (not L2_tr1)
                a!25
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_4!81|))
      (a!34 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!33
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!39 (monotonicity (rewrite a!37) (= (not (<= L2_4_n L2_5_0)) a!38)))
      (a!40 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!38))
      (a!48 (unit-resolution (asserted a!47)
                             (asserted spacer_proxy!75)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!58 (unit-resolution (asserted a!57)
                             (asserted spacer_proxy!74)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!60 (unit-resolution (asserted (or (not spacer_proxy!71) a!59))
                             (asserted spacer_proxy!71)
                             a!59))
      (a!67 (unit-resolution (asserted a!66)
                             (asserted spacer_proxy!72)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!85 (unit-resolution (asserted (or (not spacer_proxy!14) a!84))
                             (asserted spacer_proxy!14)
                             a!84))
      (a!97 (unit-resolution (asserted a!96)
                             (asserted spacer_proxy!73)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
(let ((a!6 (trans (monotonicity (monotonicity (monotonicity a!2 a!3)
                                              (= a!1 a!4))
                                (= (=> L2_tr0 a!1) (=> L2_tr0 a!4)))
                  a!5
                  (= (=> L2_tr0 a!1) (or (not L2_tr0) a!4))))
      (a!23 (mp (asserted (or (not L2_tr0) a!19)) a!22 (or (not L2_tr0) a!21)))
      (a!24 (monotonicity (rewrite (= a!21 (not a!18)))
                          (= (or (not L2_tr0) a!21)
                             (or (not L2_tr0) (not a!18)))))
      (a!27 (rewrite (= (=> L2_tr1 a!26) (or (not L2_tr1) a!26))))
      (a!28 (= (or (=> L2_tr1 a!26) |L2#level_4!81|)
               (or (or (not L2_tr1) a!26) |L2#level_4!81|)))
      (a!30 (= (or (or (not L2_tr1) a!26) |L2#level_4!81|) a!29))
      (a!41 (monotonicity (monotonicity (rewrite a!36) a!39 (= a!35 a!40))
                          (= (or (not L2_tr1) a!35) (or (not L2_tr1) a!40))))
      (a!43 (monotonicity (rewrite (= a!40 (not a!34)))
                          (= (or (not L2_tr1) a!40)
                             (or (not L2_tr1) (not a!34)))))
      (a!49 (th-lemma a!48 (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!50 (or a!34 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!68 (th-lemma a!48 a!67 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!73 (or a!18 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!77 (def-axiom (or a!18 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!78 (def-axiom (or a!18
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!81 (def-axiom (or a!18 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!86 (def-axiom (or a!18 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!87 (def-axiom (or a!18
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!90 (def-axiom (or a!18 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!98 (th-lemma a!97 a!58 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
(let ((a!15 (trans (monotonicity a!6 a!7)
                   (trans (monotonicity a!10 a!11) (rewrite a!13) a!14)
                   (= (or (=> L2_tr0 a!1) |L2#level_4!81|) a!12)))
      (a!31 (trans (monotonicity a!27 a!28)
                   (rewrite a!30)
                   (= (or (=> L2_tr1 a!26) |L2#level_4!81|) a!29)))
      (a!42 (mp (asserted (or (not L2_tr1) a!35)) a!41 (or (not L2_tr1) a!40))))
(let ((a!16 (mp (asserted (or (=> L2_tr0 a!1) |L2#level_4!81|)) a!15 a!12))
      (a!32 (mp (asserted (or (=> L2_tr1 a!26) |L2#level_4!81|)) a!31 a!29))
      (a!44 (unit-resolution (mp a!42 a!43 (or (not L2_tr1) (not a!34)))
                             (hypothesis L2_tr1)
                             (not a!34))))
(let ((a!45 (unit-resolution (def-axiom (or a!34 (= L2_2_0 L2_2_n)))
                             a!44
                             (= L2_2_0 L2_2_n)))
      (a!51 (unit-resolution (def-axiom a!50)
                             a!44
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!55 (unit-resolution (def-axiom (or a!34 (= L2_4_0 L2_4_n)))
                             a!44
                             (= L2_4_0 L2_4_n))))
(let ((a!46 (th-lemma a!45 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!52 (th-lemma a!51 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!56 (th-lemma a!55 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!61 (th-lemma a!45 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0))))
(let ((a!53 (th-lemma a!46 a!49 a!52 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!54 (unit-resolution a!32
                             a!53
                             (asserted (not |L2#level_4!81|))
                             (hypothesis L2_tr1)
                             (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!62 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!54 a!56 a!58 a!60 a!61 false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!63 (unit-resolution (mp a!23 a!24 (or (not L2_tr0) (not a!18)))
                             a!62
                             (not a!18))))
(let ((a!64 (unit-resolution (def-axiom (or a!18 (= L1_0_0 L2_0_n)))
                             a!63
                             (= L1_0_0 L2_0_n)))
      (a!69 (unit-resolution (def-axiom (or a!18 (= L2_5_n 0)))
                             a!63
                             (= L2_5_n 0)))
      (a!70 (unit-resolution (def-axiom (or a!18 (= L1_2_0 L2_2_n)))
                             a!63
                             (= L1_2_0 L2_2_n)))
      (a!74 (unit-resolution (def-axiom a!73)
                             a!63
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!79 (symm (unit-resolution a!78
                                   a!63
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!82 (symm (unit-resolution a!81
                                   a!63
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!88 (symm (unit-resolution a!87
                                   a!63
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!91 (symm (unit-resolution a!90
                                   a!63
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0))))
(let ((a!65 (th-lemma (symm a!64 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!71 (th-lemma (symm a!70 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!76 (th-lemma (symm a!70 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!80 (trans (unit-resolution a!77
                                    a!63
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!79
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!89 (trans (unit-resolution a!86
                                    a!63
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!88
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!95 (th-lemma (symm a!64 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!83 (th-lemma (trans a!80 a!82 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!92 (th-lemma (trans a!89 a!91 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
  (unit-resolution a!16
                   (th-lemma a!65
                             a!58
                             a!68
                             (th-lemma a!69 (<= L2_5_n 0))
                             (<= L1_0_0 2))
                   (th-lemma a!71 (th-lemma a!60 a!58 a!72) a!74 a!75)
                   (asserted (not |L2#level_4!81|))
                   a!62
                   (th-lemma (th-lemma a!69 (>= L2_5_n 0))
                             a!48
                             a!76
                             (not (<= L1_2_0 1)))
                   (th-lemma (th-lemma a!83 a!85 a!92 a!93) a!94)
                   (th-lemma a!95
                             a!98
                             (lemma (th-lemma a!99 a!48 false) a!100)
                             (th-lemma a!69 (>= L2_5_n 0))
                             (>= L1_0_0 2))
                   (th-lemma a!71
                             a!58
                             (th-lemma a!69 (<= L2_5_n 0))
                             (not (>= L1_2_0 3)))
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_2_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_2_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_2_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!5 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!5 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!5 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 7
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!6 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!7 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!8 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!9 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!10 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!11 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!12 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!18 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!19 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!20 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!21 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!22 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!31 (hypothesis (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!32 (hypothesis (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!33 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!35 (hypothesis (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!36 (not (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!37 (not (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!38 (not (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!39 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!42 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!43 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!44 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!45 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!51 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!53 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!54 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!58 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!65 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!67 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!68 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!69 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!75 (or (not spacer_proxy!25) (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!80 (or (not spacer_proxy!24) (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!82 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!104 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!105 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!106 (hypothesis (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!107 (or (not spacer_proxy!22) (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!109 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!113 (or (not spacer_proxy!21) (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!138 (symm (commutativity (= (= L2_2_0 L2_0_0) (= L2_0_0 L2_2_0)))
                   (= (= L2_0_0 L2_2_0) (= L2_2_0 L2_0_0))))
      (a!152 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!13 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!8
                a!10
                a!3
                a!4
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!23 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!21
                a!3
                a!4
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!26 (or (not L2_tr1)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!21
                a!3
                a!4
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_5!143|))
      (a!34 (unit-resolution (asserted (or (not spacer_proxy!14) a!33))
                             (asserted spacer_proxy!14)
                             a!33))
      (a!40 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!39
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!46 (monotonicity (rewrite a!44) (= (not (<= L2_4_n L2_5_0)) a!45)))
      (a!47 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!45))
      (a!52 (or a!51
                (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!55 (or a!51
                (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!59 (or a!51
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!61 (or (not L2_tr0)
                a!51
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!66 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!65))
      (a!70 (monotonicity (monotonicity (rewrite a!68) (= a!67 a!69))
                          (= (or (not L2_tr0) a!67) (or (not L2_tr0) a!69))))
      (a!76 (unit-resolution (asserted a!75)
                             (asserted spacer_proxy!25)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!81 (unit-resolution (asserted a!80)
                             (asserted spacer_proxy!24)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!83 (unit-resolution (asserted (or (not spacer_proxy!23) a!82))
                             (asserted spacer_proxy!23)
                             a!82))
      (a!108 (unit-resolution (asserted a!107)
                              (asserted spacer_proxy!22)
                              (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!114 (unit-resolution (asserted a!113)
                              (asserted spacer_proxy!21)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
(let ((a!14 (monotonicity (monotonicity (monotonicity (monotonicity a!6 a!7)
                                                      (= a!1 a!8))
                                        (monotonicity (monotonicity a!6 a!9)
                                                      (= a!2 a!10))
                                        (monotonicity a!11 a!12)
                                        (= a!5 a!13))
                          (= (=> L2_tr1 a!5) (=> L2_tr1 a!13))))
      (a!15 (rewrite (= (=> L2_tr1 a!13) (or (not L2_tr1) a!13))))
      (a!17 (= (or (=> L2_tr1 a!5) |L2#level_5!143|)
               (or (or (not L2_tr1) a!13) |L2#level_5!143|)))
      (a!24 (monotonicity (monotonicity (monotonicity (rewrite a!18)
                                                      (= a!8 a!19))
                                        (monotonicity (rewrite a!20)
                                                      (= a!10 a!21))
                                        (rewrite a!22)
                                        (= a!13 a!23))
                          (= (or (not L2_tr1) a!13) (or (not L2_tr1) a!23))))
      (a!25 (= (or (or (not L2_tr1) a!13) |L2#level_5!143|)
               (or (or (not L2_tr1) a!23) |L2#level_5!143|)))
      (a!27 (= (or (or (not L2_tr1) a!23) |L2#level_5!143|) a!26))
      (a!28 (= (or (or (not L2_tr1) a!13) |L2#level_5!143|) a!26))
      (a!41 (def-axiom (or a!40 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!48 (monotonicity (monotonicity (rewrite a!43) a!46 (= a!42 a!47))
                          (= (or (not L2_tr1) a!42) (or (not L2_tr1) a!47))))
      (a!50 (monotonicity (rewrite (= a!47 (not a!40)))
                          (= (or (not L2_tr1) a!47)
                             (or (not L2_tr1) (not a!40)))))
      (a!56 (rewrite (= (=> L2_tr0 a!55) (or (not L2_tr0) a!55))))
      (a!60 (monotonicity (monotonicity (rewrite a!58) (= a!55 a!59))
                          (= (or (not L2_tr0) a!55) (or (not L2_tr0) a!59))))
      (a!62 (rewrite (= (or (not L2_tr0) a!59) a!61)))
      (a!71 (mp (asserted (or (not L2_tr0) a!67)) a!70 (or (not L2_tr0) a!69)))
      (a!72 (monotonicity (rewrite (= a!69 (not a!66)))
                          (= (or (not L2_tr0) a!69)
                             (or (not L2_tr0) (not a!66)))))
      (a!87 (or a!66 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!90 (def-axiom (or a!66 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!91 (def-axiom (or a!66
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!94 (def-axiom (or a!66 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!97 (def-axiom (or a!66 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!98 (def-axiom (or a!66
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!101 (def-axiom (or a!66 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!118 (def-axiom (or a!40
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!120 (def-axiom (or a!40
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!122 (def-axiom (or a!40 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!125 (def-axiom (or a!40 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!126 (def-axiom (or a!40
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!128 (def-axiom (or a!40
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!130 (def-axiom (or a!40 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!134 (th-lemma a!81
                       (lemma (th-lemma a!106 a!108 false) a!109)
                       (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!135 (th-lemma a!114 a!76 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!143 (or a!40 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!16 (trans a!14 a!15 (= (=> L2_tr1 a!5) (or (not L2_tr1) a!13))))
      (a!49 (mp (asserted (or (not L2_tr1) a!42)) a!48 (or (not L2_tr1) a!47)))
      (a!57 (trans (monotonicity (monotonicity (monotonicity a!53 a!54)
                                               (= a!52 a!55))
                                 (= (=> L2_tr0 a!52) (=> L2_tr0 a!55)))
                   a!56
                   (= (=> L2_tr0 a!52) (or (not L2_tr0) a!55))))
      (a!63 (trans a!60 a!62 (= (or (not L2_tr0) a!55) a!61)))
      (a!73 (unit-resolution (mp a!71 a!72 (or (not L2_tr0) (not a!66)))
                             (hypothesis L2_tr0)
                             (not a!66))))
(let ((a!29 (trans (monotonicity a!16 a!17)
                   (trans (monotonicity a!24 a!25) (rewrite a!27) a!28)
                   (= (or (=> L2_tr1 a!5) |L2#level_5!143|) a!26)))
      (a!64 (mp (asserted (=> L2_tr0 a!52))
                (trans a!57 a!63 (= (=> L2_tr0 a!52) a!61))
                a!61))
      (a!74 (unit-resolution (def-axiom (or a!66 (= L2_5_n 0)))
                             a!73
                             (= L2_5_n 0)))
      (a!77 (unit-resolution (def-axiom (or a!66 (= L1_2_0 L2_2_n)))
                             a!73
                             (= L1_2_0 L2_2_n)))
      (a!84 (unit-resolution (def-axiom (or a!66 (= L1_4_0 L2_4_n)))
                             a!73
                             (= L1_4_0 L2_4_n)))
      (a!88 (unit-resolution (def-axiom a!87)
                             a!73
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!92 (symm (unit-resolution a!91
                                   a!73
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!95 (symm (unit-resolution a!94
                                   a!73
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!99 (symm (unit-resolution a!98
                                   a!73
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!102 (symm (unit-resolution a!101
                                    a!73
                                    (= L1_3_0 (select aux!14_n L2_2_n)))
                   (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!110 (unit-resolution (def-axiom (or a!66 (= L1_0_0 L2_0_n)))
                              a!73
                              (= L1_0_0 L2_0_n))))
(let ((a!30 (mp (asserted (or (=> L2_tr1 a!5) |L2#level_5!143|)) a!29 a!26))
      (a!78 (th-lemma (symm a!77 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!79 (th-lemma (symm a!77 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!85 (th-lemma (symm a!84 (= L2_4_n L1_4_0))
                      (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!86 (th-lemma (symm a!84 (= L2_4_n L1_4_0))
                      (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!93 (trans (unit-resolution a!90
                                    a!73
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!92
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!100 (trans (unit-resolution a!97
                                     a!73
                                     (= L2_3_n (select aux!13_n L2_2_n)))
                    a!99
                    (= L2_3_n (select aux!14_n L2_2_n))))
      (a!111 (th-lemma (symm a!110 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!112 (th-lemma (symm a!110 (= L2_0_n L1_0_0))
                       (>= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!89 (th-lemma a!86 a!88 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!96 (th-lemma (trans a!93 a!95 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!103 (th-lemma (trans a!100 a!102 (= L2_3_n L1_3_0))
                       (>= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!115 (unit-resolution a!64
                              (th-lemma (th-lemma a!74 (>= L2_5_n 0))
                                        a!76
                                        a!78
                                        (not (<= L1_2_0 0)))
                              (th-lemma a!79
                                        a!81
                                        (th-lemma a!74 (<= L2_5_n 0))
                                        (<= L1_2_0 1))
                              (hypothesis L2_tr0)
                              (th-lemma (th-lemma a!74 (>= L2_5_n 0))
                                        a!83
                                        a!85
                                        (not (<= L1_4_0 1)))
                              a!89
                              (th-lemma (th-lemma a!96 a!34 a!103 a!104) a!105)
                              (th-lemma (th-lemma a!74 (>= L2_5_n 0))
                                        (lemma (th-lemma a!106 a!108 false)
                                               a!109)
                                        a!111
                                        (not (<= L1_0_0 0)))
                              (th-lemma a!112
                                        a!114
                                        (th-lemma a!74 (<= L2_5_n 0))
                                        (<= L1_0_0 1))
                              false)))
(let ((a!116 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!115 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!117 (unit-resolution (mp a!49 a!50 (or (not L2_tr1) (not a!40)))
                              a!116
                              (not a!40))))
(let ((a!119 (trans (unit-resolution a!41
                                     a!117
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!118
                                     a!117
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!123 (symm (unit-resolution a!122
                                    a!117
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!127 (trans (unit-resolution a!125
                                     a!117
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!126
                                     a!117
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!131 (symm (unit-resolution a!130
                                    a!117
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!133 (unit-resolution (def-axiom (or a!40 (= L2_0_0 L2_0_n)))
                              a!117
                              (= L2_0_0 L2_0_n)))
      (a!136 (unit-resolution (def-axiom (or a!40 (= L2_2_0 L2_2_n)))
                              a!117
                              (= L2_2_0 L2_2_n)))
      (a!144 (unit-resolution (def-axiom a!143)
                              a!117
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!150 (unit-resolution (def-axiom (or a!40 (= L2_4_0 L2_4_n)))
                              a!117
                              (= L2_4_0 L2_4_n))))
(let ((a!121 (trans a!119
                    (unit-resolution a!120
                                     a!117
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!129 (trans a!127
                    (unit-resolution a!128
                                     a!117
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!137 (monotonicity (trans (th-lemma a!134
                                            a!135
                                            a!76
                                            a!81
                                            a!76
                                            a!81
                                            (= L2_0_n L2_2_n))
                                  (symm a!136 (= L2_2_n L2_2_0))
                                  (= L2_0_n L2_2_0))
                           (= (= L2_0_0 L2_0_n) (= L2_0_0 L2_2_0))))
      (a!142 (th-lemma a!136 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!145 (th-lemma a!144 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!147 (th-lemma a!136 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!148 (th-lemma a!144 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!151 (th-lemma a!150 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!124 (th-lemma (trans a!121 a!123 (= L2_3_0 L2_3_n))
                       (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!132 (th-lemma (trans a!129 a!131 (= L2_1_0 L2_1_n))
                       (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!139 (mp a!133
                 (trans a!137 a!138 (= (= L2_0_0 L2_0_n) (= L2_2_0 L2_0_0)))
                 (= L2_2_0 L2_0_0)))
      (a!146 (th-lemma a!142 a!76 a!145 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!149 (th-lemma a!147 a!81 a!148 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!140 (th-lemma a!139 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!141 (th-lemma a!139 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
  (unit-resolution a!30
                   (unit-resolution (lemma (th-lemma a!31 a!32 a!34 a!35 false)
                                           (or a!36 a!37 a!38))
                                    a!124
                                    a!132
                                    a!36)
                   a!140
                   (asserted (not |L2#level_5!143|))
                   a!116
                   a!141
                   a!146
                   a!149
                   (th-lemma a!147 a!81 a!83 a!151 a!152)
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!2
      a!3))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 5 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 7
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!4 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!5 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!6 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!7 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!13 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!14 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!15 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!24 (hypothesis (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!25 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!28 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!29 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!30 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!31 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!37 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!39 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!40 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!45 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!54 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!57 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!58 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!59 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!70 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!79 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!80 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!82 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!93 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!96 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!99 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!101 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!111 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!112 (hypothesis (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!115 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!116 (hypothesis (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!133 (not (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!136 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2))
      (a!8 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!7))
      (a!16 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                a!1
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!15))
      (a!19 (or (not L2_tr1)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                a!1
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!15
                |L2#level_6!435|))
      (a!26 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!25
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!32 (monotonicity (rewrite a!30) (= (not (<= L2_4_n L2_5_0)) a!31)))
      (a!33 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!31))
      (a!38 (or (not (<= L1_0_0 0))
                a!37
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)))
      (a!41 (or (not (<= L1_0_0 0))
                a!37
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!46 (or (not (<= L1_0_0 0))
                a!37
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!49 (or (not L2_tr0)
                (not (<= L1_0_0 0))
                a!37
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                |L2#level_6!435|))
      (a!55 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!54))
      (a!60 (monotonicity (monotonicity (rewrite a!58) (= a!57 a!59))
                          (= (or (not L2_tr0) a!57) (or (not L2_tr0) a!59))))
      (a!71 (unit-resolution (asserted (or (not spacer_proxy!14) a!70))
                             (asserted spacer_proxy!14)
                             a!70))
      (a!83 (unit-resolution (asserted a!82)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!94 (unit-resolution (asserted a!93)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!97 (unit-resolution (asserted a!96)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!100 (unit-resolution (asserted (or (not spacer_proxy!3) a!99))
                              (asserted spacer_proxy!3)
                              a!99))
      (a!102 (unit-resolution (asserted a!101)
                              (asserted spacer_proxy!2)
                              (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!9 (monotonicity (monotonicity (monotonicity a!4 a!5)
                                       (monotonicity (monotonicity a!4 a!6)
                                                     (= a!2 a!7))
                                       (= a!3 a!8))
                         (= (=> L2_tr1 a!3) (=> L2_tr1 a!8))))
      (a!10 (rewrite (= (=> L2_tr1 a!8) (or (not L2_tr1) a!8))))
      (a!12 (= (or (=> L2_tr1 a!3) |L2#level_6!435|)
               (or (or (not L2_tr1) a!8) |L2#level_6!435|)))
      (a!17 (monotonicity (monotonicity (rewrite a!13)
                                        (monotonicity (rewrite a!14)
                                                      (= a!7 a!15))
                                        (= a!8 a!16))
                          (= (or (not L2_tr1) a!8) (or (not L2_tr1) a!16))))
      (a!18 (= (or (or (not L2_tr1) a!8) |L2#level_6!435|)
               (or (or (not L2_tr1) a!16) |L2#level_6!435|)))
      (a!20 (= (or (or (not L2_tr1) a!16) |L2#level_6!435|) a!19))
      (a!21 (= (or (or (not L2_tr1) a!8) |L2#level_6!435|) a!19))
      (a!27 (or a!26 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!34 (monotonicity (monotonicity (rewrite a!29) a!32 (= a!28 a!33))
                          (= (or (not L2_tr1) a!28) (or (not L2_tr1) a!33))))
      (a!36 (monotonicity (rewrite (= a!33 (not a!26)))
                          (= (or (not L2_tr1) a!33)
                             (or (not L2_tr1) (not a!26)))))
      (a!42 (rewrite (= (=> L2_tr0 a!41) (or (not L2_tr0) a!41))))
      (a!44 (= (or (=> L2_tr0 a!38) |L2#level_6!435|)
               (or (or (not L2_tr0) a!41) |L2#level_6!435|)))
      (a!47 (monotonicity (monotonicity (rewrite a!45) (= a!41 a!46))
                          (= (or (not L2_tr0) a!41) (or (not L2_tr0) a!46))))
      (a!48 (= (or (or (not L2_tr0) a!41) |L2#level_6!435|)
               (or (or (not L2_tr0) a!46) |L2#level_6!435|)))
      (a!50 (= (or (or (not L2_tr0) a!46) |L2#level_6!435|) a!49))
      (a!51 (= (or (or (not L2_tr0) a!41) |L2#level_6!435|) a!49))
      (a!56 (def-axiom (or a!55 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!61 (mp (asserted (or (not L2_tr0) a!57)) a!60 (or (not L2_tr0) a!59)))
      (a!62 (monotonicity (rewrite (= a!59 (not a!55)))
                          (= (or (not L2_tr0) a!59)
                             (or (not L2_tr0) (not a!55)))))
      (a!64 (def-axiom (or a!55
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!67 (def-axiom (or a!55 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!72 (def-axiom (or a!55 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!73 (def-axiom (or a!55
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!76 (def-axiom (or a!55 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!88 (or a!55 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!117 (def-axiom (or a!26 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!118 (def-axiom (or a!26
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!120 (def-axiom (or a!26
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!122 (def-axiom (or a!26 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!125 (def-axiom (or a!26 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!126 (def-axiom (or a!26
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!128 (def-axiom (or a!26
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!130 (def-axiom (or a!26 (= L2_3_n (select aux!17_n L2_2_n))))))
(let ((a!11 (trans a!9 a!10 (= (=> L2_tr1 a!3) (or (not L2_tr1) a!8))))
      (a!35 (mp (asserted (or (not L2_tr1) a!28)) a!34 (or (not L2_tr1) a!33)))
      (a!43 (trans (monotonicity (monotonicity (monotonicity a!39 a!40)
                                               (= a!38 a!41))
                                 (= (=> L2_tr0 a!38) (=> L2_tr0 a!41)))
                   a!42
                   (= (=> L2_tr0 a!38) (or (not L2_tr0) a!41))))
      (a!63 (unit-resolution (mp a!61 a!62 (or (not L2_tr0) (not a!55)))
                             (hypothesis L2_tr0)
                             (not a!55))))
(let ((a!22 (trans (monotonicity a!11 a!12)
                   (trans (monotonicity a!17 a!18) (rewrite a!20) a!21)
                   (= (or (=> L2_tr1 a!3) |L2#level_6!435|) a!19)))
      (a!52 (trans (monotonicity a!43 a!44)
                   (trans (monotonicity a!47 a!48) (rewrite a!50) a!51)
                   (= (or (=> L2_tr0 a!38) |L2#level_6!435|) a!49)))
      (a!65 (symm (unit-resolution a!64
                                   a!63
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!68 (symm (unit-resolution a!67
                                   a!63
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!74 (symm (unit-resolution a!73
                                   a!63
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!77 (symm (unit-resolution a!76
                                   a!63
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!81 (unit-resolution (def-axiom (or a!55 (= L2_5_n 0)))
                             a!63
                             (= L2_5_n 0)))
      (a!84 (unit-resolution (def-axiom (or a!55 (= L1_0_0 L2_0_n)))
                             a!63
                             (= L1_0_0 L2_0_n)))
      (a!86 (unit-resolution (def-axiom (or a!55 (= L1_4_0 L2_4_n)))
                             a!63
                             (= L1_4_0 L2_4_n)))
      (a!89 (unit-resolution (def-axiom a!88)
                             a!63
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!91 (unit-resolution (def-axiom (or a!55 (= L1_2_0 L2_2_n)))
                             a!63
                             (= L1_2_0 L2_2_n))))
(let ((a!23 (mp (asserted (or (=> L2_tr1 a!3) |L2#level_6!435|)) a!22 a!19))
      (a!53 (mp (asserted (or (=> L2_tr0 a!38) |L2#level_6!435|)) a!52 a!49))
      (a!66 (trans (unit-resolution a!56
                                    a!63
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!65
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!75 (trans (unit-resolution a!72
                                    a!63
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!74
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!85 (th-lemma (symm a!84 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!87 (th-lemma (symm a!86 (= L2_4_n L1_4_0))
                      (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!92 (th-lemma (symm a!91 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!95 (th-lemma (symm a!84 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!98 (th-lemma (symm a!86 (= L2_4_n L1_4_0))
                      (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!103 (th-lemma (symm a!91 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0))))
(let ((a!69 (th-lemma (trans a!66 a!68 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!78 (th-lemma (trans a!75 a!77 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!90 (th-lemma a!87 a!89 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!104 (unit-resolution a!53
                              (th-lemma (th-lemma a!69 a!71 a!78 a!79) a!80)
                              (th-lemma (th-lemma a!81 (>= L2_5_n 0))
                                        a!83
                                        a!85
                                        (>= L1_0_0 0))
                              (hypothesis L2_tr0)
                              a!90
                              (th-lemma a!92
                                        a!94
                                        (th-lemma a!81 (<= L2_5_n 0))
                                        (<= L1_2_0 0))
                              (th-lemma a!95
                                        a!97
                                        (th-lemma a!81 (<= L2_5_n 0))
                                        (<= L1_0_0 0))
                              (th-lemma a!98
                                        a!100
                                        (th-lemma a!81 (>= L2_5_n 0))
                                        (not (<= L1_4_0 0)))
                              (th-lemma (th-lemma a!81 (>= L2_5_n 0))
                                        a!102
                                        a!103
                                        (>= L1_2_0 0))
                              (asserted (not |L2#level_6!435|))
                              false)))
(let ((a!105 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!104 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!106 (unit-resolution (mp a!35 a!36 (or (not L2_tr1) (not a!26)))
                              a!105
                              (not a!26))))
(let ((a!107 (unit-resolution (def-axiom a!27)
                              a!106
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!109 (unit-resolution (def-axiom (or a!26 (= L2_0_0 L2_0_n)))
                              a!106
                              (= L2_0_0 L2_0_n)))
      (a!113 (unit-resolution (def-axiom (or a!26 (= L2_2_0 L2_2_n)))
                              a!106
                              (= L2_2_0 L2_2_n)))
      (a!119 (trans (unit-resolution a!117
                                     a!106
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!118
                                     a!106
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!123 (symm (unit-resolution a!122
                                    a!106
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!127 (trans (unit-resolution a!125
                                     a!106
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!126
                                     a!106
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!131 (symm (unit-resolution a!130
                                    a!106
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!134 (unit-resolution (def-axiom (or a!26 (= L2_4_0 L2_4_n)))
                              a!106
                              (= L2_4_0 L2_4_n))))
(let ((a!108 (th-lemma a!107 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!110 (th-lemma a!109 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!114 (th-lemma a!113 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!121 (trans a!119
                    (unit-resolution a!120
                                     a!106
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!129 (trans a!127
                    (unit-resolution a!128
                                     a!106
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!135 (th-lemma a!134 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!137 (th-lemma a!109 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!138 (th-lemma a!107 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!140 (th-lemma a!113 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0))))
(let ((a!124 (th-lemma (trans a!121 a!123 (= L2_1_0 L2_1_n))
                       (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!132 (th-lemma (trans a!129 a!131 (= L2_3_0 L2_3_n))
                       (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!139 (th-lemma a!137 a!97 a!138 (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!141 (th-lemma a!140 a!94 a!138 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1))))
  (unit-resolution a!23
                   (lemma (th-lemma a!24 a!108 a!110 a!83 false) a!111)
                   (lemma (th-lemma a!102 a!112 a!108 a!114 false) a!115)
                   a!105
                   (lemma (th-lemma a!116 a!124 a!71 a!132 false) a!133)
                   (asserted (not |L2#level_6!435|))
                   (th-lemma a!135 a!100 a!108 a!136)
                   a!139
                   a!141
                   false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 7 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 7 depth: 7
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not (= L2_0_0 query!0_0_n))
               (not (= L2_2_0 query!0_0_n))
               (not (= L2_4_0 query!0_1_n))
               (not (= L2_5_0 query!0_0_n))
               (not (= L2_0_1 query!0_4_n))
               (not (= L2_2_1 query!0_2_n))
               (not (= L2_4_1 query!0_1_n))
               (not (= L2_5_1 query!0_0_n))
               (not (= L2_0_2 query!0_4_n))
               (not (= L2_2_2 query!0_0_n))
               (not (= L2_4_2 query!0_1_n))
               (not (= L2_5_2 query!0_0_n))
               (not (= L2_0_3 query!0_0_n))
               (not (= L2_2_3 query!0_2_n))
               (not (= L2_4_3 query!0_1_n))
               (not (= L2_5_3 query!0_0_n))
               (not (= (select aux!10_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!4_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!7_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (not (= (select aux!9_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!6_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!5_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!8_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!3_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
               (not (= L2_1_3 (select aux!10_n query!0_0_n)))
               (not (= L2_3_3 (select aux!9_n query!0_2_n)))
               (not (= L2_3_2 (select aux!7_n query!0_0_n)))
               (not (= L2_1_2 (select aux!8_n query!0_4_n)))
               (not (= L2_1_1 (select aux!6_n query!0_4_n)))
               (not (= L2_3_1 (select aux!5_n query!0_2_n)))
               (not (= query!0_3_n (select aux!2_n query!0_2_n)))
               (not (= query!0_5_n (select aux!1_n query!0_4_n)))
               (not (= L2_1_0 (select aux!4_n query!0_0_n)))
               (not (= L2_3_0 (select aux!3_n query!0_0_n)))
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!3 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n))))
      (a!4 (= (<= query!0_1_n query!0_0_n)
              (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!5 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!17 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!18 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!19 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!20 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!22 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!23 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!24 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!25 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!26 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!32 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!33 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!34 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!35 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!46 (hypothesis (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!50 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0))))
(let ((a!2 (or a!1
               (not (= (select aux!2_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))))
      (a!6 (monotonicity (rewrite a!4)
                         (= (not (<= query!0_1_n query!0_0_n)) a!5)))
      (a!7 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                a!5))
      (a!13 (def-axiom (or a!1
                           (= (select aux!3_n query!0_0_n)
                              (select aux!2_n query!0_0_n)))))
      (a!15 (def-axiom (or a!1 (= L2_3_0 (select aux!3_n query!0_0_n)))))
      (a!21 (or a!17
                a!18
                a!19
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!27 (or a!24
                a!26
                a!19
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!36 (or a!33
                a!35
                a!19
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!39 (or (not query!0_dummy)
                a!33
                a!35
                a!19
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                |query!0#level_7!853|))
      (a!63 (or a!17
                a!19
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!20
                a!18))
      (a!64 (or a!24
                a!19
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!20
                a!26))
      (a!69 (or a!33
                a!19
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!20
                a!35))
      (a!72 (or (not query!0_dummy)
                a!33
                a!19
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!20
                a!35
                |query!0#level_7!853|))
      (a!79 (def-axiom (or a!1 (= L2_1_0 (select aux!4_n query!0_0_n)))))
      (a!81 (def-axiom (or a!1
                           (= (select aux!4_n query!0_0_n)
                              (select aux!1_n query!0_0_n))))))
(let ((a!8 (monotonicity (monotonicity a!6 (= a!3 a!7))
                         (= (or (not query!0_dummy) a!3)
                            (or (not query!0_dummy) a!7))))
      (a!10 (monotonicity (rewrite (= a!7 (not a!1)))
                          (= (or (not query!0_dummy) a!7)
                             (or (not query!0_dummy) (not a!1)))))
      (a!28 (monotonicity (monotonicity (monotonicity (monotonicity a!22 a!23)
                                                      (= a!17 a!24))
                                        (monotonicity (monotonicity a!22 a!25)
                                                      (= a!18 a!26))
                                        (= a!21 a!27))
                          (= (=> query!0_dummy a!21) (=> query!0_dummy a!27))))
      (a!29 (rewrite (= (=> query!0_dummy a!27) (or (not query!0_dummy) a!27))))
      (a!31 (= (or (=> query!0_dummy a!21) |query!0#level_7!853|)
               (or (or (not query!0_dummy) a!27) |query!0#level_7!853|)))
      (a!37 (monotonicity (monotonicity (monotonicity (rewrite a!32)
                                                      (= a!24 a!33))
                                        (monotonicity (rewrite a!34)
                                                      (= a!26 a!35))
                                        (= a!27 a!36))
                          (= (or (not query!0_dummy) a!27)
                             (or (not query!0_dummy) a!36))))
      (a!38 (= (or (or (not query!0_dummy) a!27) |query!0#level_7!853|)
               (or (or (not query!0_dummy) a!36) |query!0#level_7!853|)))
      (a!40 (= (or (or (not query!0_dummy) a!36) |query!0#level_7!853|) a!39))
      (a!41 (= (or (or (not query!0_dummy) a!27) |query!0#level_7!853|) a!39))
      (a!65 (monotonicity (monotonicity (monotonicity (monotonicity a!22 a!23)
                                                      (= a!17 a!24))
                                        (monotonicity (monotonicity a!22 a!25)
                                                      (= a!18 a!26))
                                        (= a!63 a!64))
                          (= (=> query!0_dummy a!63) (=> query!0_dummy a!64))))
      (a!66 (rewrite (= (=> query!0_dummy a!64) (or (not query!0_dummy) a!64))))
      (a!68 (= (or (=> query!0_dummy a!63) |query!0#level_7!853|)
               (or (or (not query!0_dummy) a!64) |query!0#level_7!853|)))
      (a!70 (monotonicity (monotonicity (monotonicity (rewrite a!32)
                                                      (= a!24 a!33))
                                        (monotonicity (rewrite a!34)
                                                      (= a!26 a!35))
                                        (= a!64 a!69))
                          (= (or (not query!0_dummy) a!64)
                             (or (not query!0_dummy) a!69))))
      (a!71 (= (or (or (not query!0_dummy) a!64) |query!0#level_7!853|)
               (or (or (not query!0_dummy) a!69) |query!0#level_7!853|)))
      (a!73 (= (or (or (not query!0_dummy) a!69) |query!0#level_7!853|) a!72))
      (a!74 (= (or (or (not query!0_dummy) a!64) |query!0#level_7!853|) a!72)))
(let ((a!9 (mp (asserted (or (not query!0_dummy) a!3))
               a!8
               (or (not query!0_dummy) a!7)))
      (a!30 (trans a!28
                   a!29
                   (= (=> query!0_dummy a!21) (or (not query!0_dummy) a!27))))
      (a!67 (trans a!65
                   a!66
                   (= (=> query!0_dummy a!63) (or (not query!0_dummy) a!64)))))
(let ((a!11 (unit-resolution (mp a!9 a!10 (or (not query!0_dummy) (not a!1)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!1)))
      (a!42 (trans (monotonicity a!30 a!31)
                   (trans (monotonicity a!37 a!38) (rewrite a!40) a!41)
                   (= (or (=> query!0_dummy a!21) |query!0#level_7!853|) a!39)))
      (a!75 (trans (monotonicity a!67 a!68)
                   (trans (monotonicity a!70 a!71) (rewrite a!73) a!74)
                   (= (or (=> query!0_dummy a!63) |query!0#level_7!853|) a!72))))
(let ((a!12 (unit-resolution (def-axiom a!2)
                             a!11
                             (not (= (select aux!2_n query!0_0_n)
                                     (select aux!1_n query!0_0_n)))))
      (a!14 (symm (unit-resolution a!13
                                   a!11
                                   (= (select aux!3_n query!0_0_n)
                                      (select aux!2_n query!0_0_n)))
                  (= (select aux!2_n query!0_0_n) (select aux!3_n query!0_0_n))))
      (a!16 (symm (unit-resolution a!15
                                   a!11
                                   (= L2_3_0 (select aux!3_n query!0_0_n)))
                  (= (select aux!3_n query!0_0_n) L2_3_0)))
      (a!43 (mp (asserted (or (=> query!0_dummy a!21) |query!0#level_7!853|))
                a!42
                a!39))
      (a!44 (unit-resolution (def-axiom (or a!1 (= L2_4_0 query!0_1_n)))
                             a!11
                             (= L2_4_0 query!0_1_n)))
      (a!47 (unit-resolution (def-axiom (or a!1 (= L2_5_0 query!0_0_n)))
                             a!11
                             (= L2_5_0 query!0_0_n)))
      (a!51 (unit-resolution (def-axiom (or a!1 (= L2_0_0 query!0_0_n)))
                             a!11
                             (= L2_0_0 query!0_0_n)))
      (a!55 (unit-resolution (def-axiom (or a!1 (= L2_2_0 query!0_0_n)))
                             a!11
                             (= L2_2_0 query!0_0_n)))
      (a!76 (mp (asserted (or (=> query!0_dummy a!63) |query!0#level_7!853|))
                a!75
                a!72)))
(let ((a!45 (th-lemma a!44 (>= (+ L2_4_0 (* (- 1) query!0_1_n)) 0)))
      (a!48 (th-lemma a!47 (<= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!52 (th-lemma a!51 (<= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!53 (th-lemma a!47 (>= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!56 (th-lemma a!55 (<= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!58 (th-lemma a!55 (>= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!60 (th-lemma a!51 (>= (+ L2_0_0 (* (- 1) query!0_0_n)) 0))))
(let ((a!49 (th-lemma a!45
                      a!46
                      (unit-resolution (def-axiom (or a!1 a!5)) a!11 a!5)
                      a!48
                      false))
      (a!54 (lemma (th-lemma (hypothesis a!33) a!52 a!53 false)
                   (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!57 (lemma (th-lemma (hypothesis a!19) a!56 a!53 false)
                   (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!59 (lemma (th-lemma (hypothesis a!20) a!58 a!48 false)
                   (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!61 (lemma (th-lemma (hypothesis a!35) a!60 a!48 false)
                   (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0))))
(let ((a!62 (unit-resolution a!43
                             (lemma a!49 a!50)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!54
                             a!57
                             a!59
                             a!61
                             (asserted (not |query!0#level_7!853|))
                             (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!77 (unit-resolution a!76
                             (lemma a!49 a!50)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!61
                             a!54
                             a!57
                             a!59
                             (asserted (not |query!0#level_7!853|))
                             (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!78 (trans (trans a!14 a!16 (= (select aux!2_n query!0_0_n) L2_3_0))
                   (symm (th-lemma a!62 a!77 (= L2_1_0 L2_3_0))
                         (= L2_3_0 L2_1_0))
                   (= (select aux!2_n query!0_0_n) L2_1_0))))
(let ((a!80 (trans a!78
                   (unit-resolution a!79
                                    a!11
                                    (= L2_1_0 (select aux!4_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!4_n query!0_0_n)))))
(let ((a!82 (trans a!80
                   (unit-resolution a!81
                                    a!11
                                    (= (select aux!4_n query!0_0_n)
                                       (select aux!1_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))))
  (unit-resolution a!12 a!82 false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 7 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_7!853|)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3)
    |L1#level_4!141|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L2_tr0 a!1) |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L1_tr1 a!1) |L1#level_5!144|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
               (<= L1_2_1 1)
               (not (>= L1_0_1 2))
               (not (<= L1_0_1 2))
               (>= L1_2_1 3))))
  (or (=> L1_tr1 a!1) |L1#level_5!144|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3)
    |L1#level_5!144|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L2_tr0 a!1) |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L1_tr1 a!1) |L1#level_6!436|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
               (<= L1_2_1 1)
               (not (>= L1_0_1 2))
               (not (<= L1_0_1 2))
               (>= L1_2_1 3))))
  (or (=> L1_tr1 a!1) |L1#level_6!436|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!4 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!5 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!4 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!5 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!4 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!5 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> L2_tr1 a!5) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3)
    |L1#level_6!436|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L2_tr0 a!1) |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L1_tr1 a!1) |L1#level_7!439|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
               (<= L1_2_1 1)
               (not (>= L1_0_1 2))
               (not (<= L1_0_1 2))
               (>= L1_2_1 3))))
  (or (=> L1_tr1 a!1) |L1#level_7!439|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3)
    |L1#level_7!439|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L2_tr0 a!1) |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L1_tr1 a!1) |L1#level_8!855|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
               (<= L1_2_1 1)
               (not (>= L1_0_1 2))
               (not (<= L1_0_1 2))
               (>= L1_2_1 3))))
  (or (=> L1_tr1 a!1) |L1#level_8!855|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3)
    |L1#level_8!855|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L2_tr0 a!1) |L2#level_9!1736|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L1_tr1 a!1) |L1#level_9!1737|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
               (<= L1_2_1 1)
               (not (>= L1_0_1 2))
               (not (<= L1_0_1 2))
               (>= L1_2_1 3))))
  (or (=> L1_tr1 a!1) |L1#level_9!1737|))
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3)
    |L1#level_9!1737|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L2_tr0 a!1) |L2#level_10!2192|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (or (=> L1_tr1 a!1) |L1#level_10!2193|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
               (<= L1_2_1 1)
               (not (>= L1_0_1 2))
               (not (<= L1_0_1 2))
               (>= L1_2_1 3))))
  (or (=> L1_tr1 a!1) |L1#level_10!2193|))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)
    (<= L1_2_n 1)
    (not (>= L1_0_n 2))
    (not (<= L1_0_n 2))
    (>= L1_2_n 3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (=> L2_tr0 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
               (<= L1_2_0 1)
               (not (>= L1_0_0 2))
               (not (<= L1_0_0 2))
               (>= L1_2_0 3))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
               (<= L1_2_1 1)
               (not (>= L1_0_1 2))
               (not (<= L1_0_1 2))
               (>= L1_2_1 3))))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 8 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 8 depth: 8
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  true)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 4322))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun |query!0#level_10!2194| () Bool
  false)
(define-fun query!0_5_n () Int
  3634)
(define-fun L2_5_0 () Int
  (- 4322))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 4321))
(define-fun L2_1_3 () Int
  2698)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!2200))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!2204))
(define-fun query!0_0_n () Int
  (- 4322))
(define-fun L2_3_3 () Int
  5725)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  (- 3075))
(define-fun L2_1_2 () Int
  3634)
(define-fun query!0_3_n () Int
  5725)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!2203))
(define-fun |query!0#level_9!1735| () Bool
  false)
(define-fun L2_3_1 () Int
  5725)
(define-fun L2_5_1 () Int
  (- 4322))
(define-fun query!0_2_n () Int
  (- 3075))
(define-fun L2_5_2 () Int
  (- 4322))
(define-fun |query!0#level_8!1203| () Bool
  false)
(define-fun L2_0_2 () Int
  (- 4321))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!2202))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!2198))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  2699)
(define-fun |query!0#level_4!80| () Bool
  true)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 4322))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 4322))
(define-fun |query!0#level_7!853| () Bool
  true)
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!2199))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  true)
(define-fun query!0_4_n () Int
  (- 4321))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  3634)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!2201))
(define-fun L2_0_0 () Int
  (- 4322))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!2206))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!2197))
(define-fun L2_2_0 () Int
  (- 4322))
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!2205))
(define-fun L2_3_2 () Int
  2699)
(define-fun L2_2_1 () Int
  (- 3075))
(define-fun L2_4_0 () Int
  0)
(define-fun L2_1_0 () Int
  2698)
(define-fun k!2199 ((x!0 Int)) Int
  (ite (= x!0 (- 4322)) 2698
    2698))
(define-fun k!2204 ((x!0 Int)) Int
  (ite (= x!0 (- 3075)) 5725
    5725))
(define-fun k!2201 ((x!0 Int)) Int
  (ite (= x!0 (- 3075)) 5725
  (ite (= x!0 (- 4322)) 2699
    5725)))
(define-fun k!2198 ((x!0 Int)) Int
  (ite (= x!0 (- 4322)) 2698
  (ite (= x!0 (- 4321)) 3634
    2698)))
(define-fun k!2206 ((x!0 Int)) Int
  (ite (= x!0 (- 4322)) 2699
    2699))
(define-fun k!2203 ((x!0 Int)) Int
  (ite (= x!0 (- 4321)) 3634
    3634))
(define-fun k!2200 ((x!0 Int)) Int
  (ite (= x!0 (- 4322)) 2699
    2699))
(define-fun k!2197 ((x!0 Int)) Int
  (ite (= x!0 (- 4322)) 2698
    2698))
(define-fun k!2205 ((x!0 Int)) Int
  (ite (= x!0 (- 4321)) 3634
    3634))
(define-fun k!2202 ((x!0 Int)) Int
  (ite (= x!0 (- 3075)) 5725
    5725))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 7 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 7 depth: 8
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun spacer_proxy!127 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2222))
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!79 () Bool
  false)
(define-fun spacer_proxy!97 () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun spacer_proxy!128 () Bool
  false)
(define-fun L2_4_n () Int
  3)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2224))
(define-fun L2_0_n () Int
  0)
(define-fun spacer_proxy!84 () Bool
  false)
(define-fun spacer_proxy!82 () Bool
  false)
(define-fun spacer_proxy!42 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!96 () Bool
  false)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2223))
(define-fun |L2#level_5!143| () Bool
  true)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun spacer_proxy!40 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun spacer_proxy!57 () Bool
  false)
(define-fun spacer_proxy!130 () Bool
  false)
(define-fun L2_1_n () Int
  7885)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2220))
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2221))
(define-fun L2_3_0 () Int
  7886)
(define-fun spacer_proxy!41 () Bool
  false)
(define-fun spacer_proxy!129 () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  true)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!131 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun spacer_proxy!132 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun spacer_proxy!46 () Bool
  false)
(define-fun spacer_proxy!133 () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun spacer_proxy!83 () Bool
  false)
(define-fun spacer_proxy!86 () Bool
  false)
(define-fun spacer_proxy!81 () Bool
  false)
(define-fun spacer_proxy!43 () Bool
  false)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2219))
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun spacer_proxy!45 () Bool
  false)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun L2_3_n () Int
  7886)
(define-fun L2_2_0 () Int
  0)
(define-fun spacer_proxy!80 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  7885)
(define-fun L2_tr0 () Bool
  false)
(define-fun spacer_proxy!111 () Bool
  false)
(define-fun L2_4_0 () Int
  3)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2219 ((x!0 Int)) Int
  (ite (= x!0 0) 7885
    7885))
(define-fun k!2223 ((x!0 Int)) Int
  (ite (= x!0 0) 7885
    7885))
(define-fun k!2220 ((x!0 Int)) Int
  (ite (= x!0 0) 7885
    7885))
(define-fun k!2224 ((x!0 Int)) Int
  (ite (= x!0 0) 7886
    7886))
(define-fun k!2221 ((x!0 Int)) Int
  (ite (= x!0 0) 7886
    7886))
(define-fun k!2222 ((x!0 Int)) Int
  (ite (= x!0 0) 7886
    7886))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0))))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 8
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L2_1_0 () Int
  7885)
(define-fun spacer_proxy!118 () Bool
  false)
(define-fun spacer_proxy!126 () Bool
  false)
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2234))
(define-fun spacer_proxy!116 () Bool
  false)
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!114 () Bool
  false)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun L2_4_n () Int
  3)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2236))
(define-fun L2_0_n () Int
  1)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  true)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!123 () Bool
  false)
(define-fun spacer_proxy!21 () Bool
  true)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2235))
(define-fun spacer_proxy!23 () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  true)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!119 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun spacer_proxy!125 () Bool
  false)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun spacer_proxy!120 () Bool
  false)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun L2_1_n () Int
  7885)
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2232))
(define-fun spacer_proxy!78 () Bool
  false)
(define-fun spacer_proxy!24 () Bool
  true)
(define-fun spacer_proxy!124 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2233))
(define-fun L2_3_0 () Int
  7886)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!144 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  true)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  1)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2231))
(define-fun spacer_proxy!121 () Bool
  false)
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  1)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_3_n () Int
  7886)
(define-fun L2_2_0 () Int
  1)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!122 () Bool
  false)
(define-fun spacer_proxy!111 () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  3)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2231 ((x!0 Int)) Int
  (ite (= x!0 1) 7885
    7885))
(define-fun k!2235 ((x!0 Int)) Int
  (ite (= x!0 1) 7885
    7885))
(define-fun k!2232 ((x!0 Int)) Int
  (ite (= x!0 1) 7885
    7885))
(define-fun k!2236 ((x!0 Int)) Int
  (ite (= x!0 1) 7886
    7886))
(define-fun k!2233 ((x!0 Int)) Int
  (ite (= x!0 1) 7886
    7886))
(define-fun k!2234 ((x!0 Int)) Int
  (ite (= x!0 1) 7886
    7886))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and (not (<= L2_4_n L2_5_0))
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0)))))
      (a!2 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
       (not (<= L2_4_0 L2_5_0))
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 2)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 8
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!74 () Bool
  true)
(define-fun spacer_proxy!118 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2246))
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun spacer_proxy!116 () Bool
  false)
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!114 () Bool
  false)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun L2_4_n () Int
  3)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2248))
(define-fun L2_0_n () Int
  2)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!71 () Bool
  true)
(define-fun spacer_proxy!21 () Bool
  false)
(define-fun spacer_proxy!72 () Bool
  true)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2247))
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun spacer_proxy!125 () Bool
  false)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun L2_1_n () Int
  7885)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2244))
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2245))
(define-fun L2_3_0 () Int
  7886)
(define-fun spacer_proxy!24 () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  2)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2243))
(define-fun spacer_proxy!73 () Bool
  true)
(define-fun L2_2_n () Int
  2)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_3_n () Int
  7886)
(define-fun L2_2_0 () Int
  2)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  7885)
(define-fun spacer_proxy!111 () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  3)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2243 ((x!0 Int)) Int
  (ite (= x!0 2) 7885
    7885))
(define-fun k!2247 ((x!0 Int)) Int
  (ite (= x!0 2) 7885
    7885))
(define-fun k!2244 ((x!0 Int)) Int
  (ite (= x!0 2) 7885
    7885))
(define-fun k!2248 ((x!0 Int)) Int
  (ite (= x!0 2) 7886
    7886))
(define-fun k!2245 ((x!0 Int)) Int
  (ite (= x!0 2) 7886
    7886))
(define-fun k!2246 ((x!0 Int)) Int
  (ite (= x!0 2) 7886
    7886))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!2
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0))))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 3)
       (not (<= L2_4_0 L2_5_0))
       a!1
       a!2
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 8
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!74 () Bool
  false)
(define-fun L1_0_0 () Int
  3)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  true)
(define-fun L2_4_n () Int
  4)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!2255))
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!2258))
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun L1_3_0 () Int
  7886)
(define-fun L2_0_n () Int
  3)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!2256))
(define-fun spacer_proxy!72 () Bool
  false)
(define-fun spacer_proxy!21 () Bool
  false)
(define-fun spacer_proxy!110 () Bool
  true)
(define-fun spacer_proxy!112 () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L1_4_0 () Int
  4)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  true)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  7885)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun L1_ext!1321_0 () Bool
  true)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun L1_2_0 () Int
  3)
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun spacer_proxy!24 () Bool
  false)
(define-fun L1_ext!612_0 () Bool
  true)
(define-fun L1_1_0 () Int
  7885)
(define-fun L1_5_0 () Int
  4)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!2257))
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun L2_3_n () Int
  7886)
(define-fun L2_2_n () Int
  3)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!111 () Bool
  true)
(define-fun spacer_proxy!109 () Bool
  true)
(define-fun L2_tr0 () Bool
  true)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2255 ((x!0 Int)) Int
  (ite (= x!0 3) 7885
    7885))
(define-fun k!2256 ((x!0 Int)) Int
  (ite (= x!0 3) 7885
    7885))
(define-fun k!2257 ((x!0 Int)) Int
  (ite (= x!0 3) 7886
    7886))
(define-fun k!2258 ((x!0 Int)) Int
  (ite (= x!0 3) 7886
    7886))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and (<= L2_4_n L1_5_0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (= L1_2_0 3) (<= L1_4_0 L1_5_0) (= L1_0_0 3) a!1 (not (<= L1_4_0 3))))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 3 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_0_n 3)
       (= L1_2_n 3)
       (not (<= L1_4_n 3))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 3 depth: 8
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       a!1
       (= L1_0_n 3)
       (= L1_2_n 3)
       (not (<= L1_4_n 3))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L1_ext!1380_1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!3 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!5 (or (<= L1_2_1 1) (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)))
      (a!6 (rewrite (= (+ L1_5_1 (* (- 1) L1_2_1)) (+ (* (- 1) L1_2_1) L1_5_1))))
      (a!7 (= (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
              (<= (+ (* (- 1) L1_2_1) L1_5_1) 0)))
      (a!8 (or (<= L1_2_1 1) (<= (+ (* (- 1) L1_2_1) L1_5_1) 0)))
      (a!12 (= (<= (+ (* (- 1) L1_2_1) L1_5_1) 0)
               (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)))
      (a!13 (or (<= L1_2_1 1) (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)))
      (a!16 (or (not L1_tr1)
                (<= L1_2_1 1)
                (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)
                |L1#level_3!130|))
      (a!21 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!23 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               (select aux!29_n L1_0_n)))
      (a!27 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!28 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!29 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!35 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!36 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!39 (asserted (or (not spacer_proxy!204) (not (<= L1_4_n 3)))))
      (a!40 (unit-resolution (asserted (or (not spacer_proxy!207) (<= L1_2_n 3)))
                             (asserted spacer_proxy!207)
                             (<= L1_2_n 3)))
      (a!41 (not (>= (+ L1_2_n (* (- 1) L1_4_n)) 0)))
      (a!43 (or (not spacer_proxy!1) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!45 (not (>= (+ L1_2_n (* (- 1) L1_5_n)) 0)))
      (a!47 (unit-resolution (asserted (or (not spacer_proxy!208) (>= L1_2_n 3)))
                             (asserted spacer_proxy!208)
                             (>= L1_2_n 3)))
      (a!51 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!52 (= (<= L1_2_n (+ (- 1) L1_5_n))
               (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!53 (not (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!55 (= (= L1_5_n (+ 1 L1_0_n)) (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!56 (= (<= L1_4_n (+ (- 1) L1_5_n))
               (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!57 (not (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!63 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))))
      (a!66 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (= L1_5_n (+ 1 L1_0_n))
                 (not (<= L1_4_n 0))
                 (= 2 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!73 (and (not (<= L1_2_n (+ (- 1) L1_5_n)))
                 (not (= L1_5_n (+ 1 L1_0_n)))
                 (= 1 L1_5_n)
                 (not (<= L1_4_n (+ (- 1) L1_5_n)))))
      (a!79 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!98 (not (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!112 (unit-resolution (asserted (or (not spacer_proxy!205)
                                            (<= L1_0_n 3)))
                              (asserted spacer_proxy!205)
                              (<= L1_0_n 3)))
      (a!113 (unit-resolution (asserted (or (not spacer_proxy!206)
                                            (>= L1_0_n 3)))
                              (asserted spacer_proxy!206)
                              (>= L1_0_n 3))))
(let ((a!2 (def-axiom (or (not (= L1_0_n L1_2_0))
                          (= (select aux!32_n L1_2_0) a!1))))
      (a!4 (unit-resolution (asserted (or (not spacer_proxy!0) a!3))
                            (asserted spacer_proxy!0)
                            a!3))
      (a!9 (rewrite (= (=> L1_tr1 a!8) (or (not L1_tr1) a!8))))
      (a!11 (= (or (=> L1_tr1 a!5) |L1#level_3!130|)
               (or (or (not L1_tr1) a!8) |L1#level_3!130|)))
      (a!14 (monotonicity (monotonicity (rewrite a!12) (= a!8 a!13))
                          (= (or (not L1_tr1) a!8) (or (not L1_tr1) a!13))))
      (a!15 (= (or (or (not L1_tr1) a!8) |L1#level_3!130|)
               (or (or (not L1_tr1) a!13) |L1#level_3!130|)))
      (a!17 (= (or (or (not L1_tr1) a!13) |L1#level_3!130|) a!16))
      (a!18 (= (or (or (not L1_tr1) a!8) |L1#level_3!130|) a!16))
      (a!22 (or (not (= L1_0_0 L1_0_n))
                (not (= L1_4_0 L1_4_n))
                (not (= L1_5_0 L1_2_0))
                (not (= L1_0_1 L1_0_n))
                (not (= L1_2_1 L1_2_n))
                (not (= L1_4_1 L1_4_n))
                (not (= L1_5_1 L1_2_0))
                (not (= a!1 (select aux!29_n L1_0_n)))
                (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
                (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
                (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
                (not (= L1_3_1 (select aux!35_n L1_2_n)))
                (not (= L1_1_1 (select aux!36_n L1_0_n)))
                (not (= L1_3_0 (select aux!33_n L1_2_0)))
                a!21
                (not (= L1_1_n (select aux!29_n L1_0_n)))
                (not (= L1_1_0 (select aux!34_n L1_0_n)))
                (not (= L1_3_n (select aux!30_n L1_2_n)))
                (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!24 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 a!23
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= L1_5_n (+ 1 L1_2_0))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 (not (<= L1_4_n L1_2_0))))
      (a!25 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               a!1))
      (a!30 (monotonicity (rewrite a!28) (= (not (<= L1_4_n L1_2_0)) a!29)))
      (a!31 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!1 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!29))
      (a!37 (monotonicity (rewrite (= a!35 (not a!36)))
                          (= (or (not L1_tr0) a!35)
                             (or (not L1_tr0) (not a!36)))))
      (a!42 (th-lemma (unit-resolution a!39
                                       (asserted spacer_proxy!204)
                                       (not (<= L1_4_n 3)))
                      a!40
                      a!41))
      (a!44 (unit-resolution (asserted a!43)
                             (asserted spacer_proxy!1)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!48 (th-lemma (th-lemma (th-lemma a!47 (>= L1_2_n 2)) (>= L1_2_n 1))
                      (>= L1_2_n 0)))
      (a!54 (= (not (<= L1_2_n (+ (- 1) L1_5_n))) a!53))
      (a!58 (= (not (<= L1_4_n (+ (- 1) L1_5_n))) a!57))
      (a!59 (and a!53 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)) (= L1_5_n 1) a!57))
      (a!64 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!63
                (not (= L1_5_n 1))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
      (a!67 (and a!53
                 (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
                 (not (<= L1_4_n 0))
                 (= L1_5_n 2)
                 a!57
                 (not (<= L1_5_n 1))
                 (not (<= L1_0_n 0))
                 (not (<= L1_2_n 0))))
      (a!71 (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
                a!63
                (<= L1_4_n 0)
                (not (= L1_5_n 2))
                (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
                (<= L1_5_n 1)
                (<= L1_0_n 0)
                (<= L1_2_n 0)))
      (a!74 (= (not (= L1_5_n (+ 1 L1_0_n))) a!63))
      (a!76 (or (not L1_ext!612_n)
                (and a!53 a!63 (= L1_5_n 1) a!57)
                L1_ext!1321_n))
      (a!80 (rewrite (= (and a!53 a!63 (= L1_5_n 1) a!57) (not a!79))))
      (a!89 (lemma (th-lemma (hypothesis (<= L1_2_n 1))
                             (th-lemma a!47 (>= L1_2_n 2))
                             false)
                   (not (<= L1_2_n 1))))
      (a!110 (= (not (= L1_3_n L1_1_n)) (not (= (select aux!32_n L1_2_0) a!1)))))
(let ((a!10 (trans (monotonicity (monotonicity (monotonicity a!6 a!7)
                                               (= a!5 a!8))
                                 (= (=> L1_tr1 a!5) (=> L1_tr1 a!8)))
                   a!9
                   (= (=> L1_tr1 a!5) (or (not L1_tr1) a!8))))
      (a!26 (monotonicity (rewrite a!25)
                          (= a!23 (= a!1 (select aux!29_n L1_0_n)))))
      (a!34 (monotonicity (rewrite (= a!31 (not a!22)))
                          (= (or (not L1_tr1) a!31)
                             (or (not L1_tr1) (not a!22)))))
      (a!38 (mp (asserted (or (not L1_tr0) a!35))
                a!37
                (or (not L1_tr0) (not a!36))))
      (a!46 (th-lemma (th-lemma a!42 a!44 a!45)
                      (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))))
      (a!60 (monotonicity (monotonicity (rewrite a!52) a!54)
                          (rewrite a!55)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!56) a!58)
                          (= a!51 a!59)))
      (a!65 (monotonicity (rewrite (= a!59 (not a!64)))
                          (= (or (not L1_ext0_n) a!59 L1_ext!612_n)
                             (or (not L1_ext0_n) (not a!64) L1_ext!612_n))))
      (a!68 (monotonicity (monotonicity (rewrite a!52) a!54)
                          (rewrite a!55)
                          (rewrite (= (= 2 L1_5_n) (= L1_5_n 2)))
                          (monotonicity (rewrite a!56) a!58)
                          (= a!66 a!67)))
      (a!72 (monotonicity (rewrite (= a!67 (not a!71)))
                          (= (or (not L1_ext!1321_n) a!67 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) (not a!71) L1_ext!1380_n))))
      (a!75 (monotonicity (monotonicity (rewrite a!52) a!54)
                          (monotonicity (rewrite a!55) a!74)
                          (rewrite (= (= 1 L1_5_n) (= L1_5_n 1)))
                          (monotonicity (rewrite a!56) a!58)
                          (= a!73 (and a!53 a!63 (= L1_5_n 1) a!57))))
      (a!81 (monotonicity a!80
                          (= a!76
                             (or (not L1_ext!612_n) (not a!79) L1_ext!1321_n))))
      (a!95 (or a!22 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!100 (def-axiom (or a!22
                            (= (select aux!32_n L1_2_n)
                               (select aux!30_n L1_2_n)))))
      (a!102 (def-axiom (or a!22 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!104 (def-axiom (or a!22 (= a!1 (select aux!29_n L1_0_n)))))
      (a!105 (def-axiom (or a!22 (= L1_1_n (select aux!29_n L1_0_n))))))
(let ((a!19 (trans (monotonicity a!10 a!11)
                   (trans (monotonicity a!14 a!15) (rewrite a!17) a!18)
                   (= (or (=> L1_tr1 a!5) |L1#level_3!130|) a!16)))
      (a!32 (monotonicity (monotonicity a!26 (rewrite a!27) a!30 (= a!24 a!31))
                          (= (or (not L1_tr1) a!24) (or (not L1_tr1) a!31))))
      (a!49 (th-lemma (hypothesis (= L1_5_n 0))
                      (th-lemma a!46 a!48 (not (<= L1_5_n 0)))
                      false))
      (a!61 (monotonicity a!60
                          (= (or (not L1_ext0_n) a!51 L1_ext!612_n)
                             (or (not L1_ext0_n) a!59 L1_ext!612_n))))
      (a!69 (monotonicity a!68
                          (= (or (not L1_ext!1321_n) a!66 L1_ext!1380_n)
                             (or (not L1_ext!1321_n) a!67 L1_ext!1380_n))))
      (a!77 (monotonicity a!75
                          (= (or (not L1_ext!612_n) a!73 L1_ext!1321_n) a!76))))
(let ((a!20 (mp (asserted (or (=> L1_tr1 a!5) |L1#level_3!130|)) a!19 a!16))
      (a!33 (mp (asserted (or (not L1_tr1) a!24)) a!32 (or (not L1_tr1) a!31)))
      (a!50 (unit-resolution (def-axiom (or a!36 (= L1_5_n 0)))
                             (lemma a!49 (not (= L1_5_n 0)))
                             a!36))
      (a!62 (mp (asserted (or (not L1_ext0_n) a!51 L1_ext!612_n))
                a!61
                (or (not L1_ext0_n) a!59 L1_ext!612_n)))
      (a!70 (mp (asserted (or (not L1_ext!1321_n) a!66 L1_ext!1380_n))
                a!69
                (or (not L1_ext!1321_n) a!67 L1_ext!1380_n)))
      (a!78 (mp (asserted (or (not L1_ext!612_n) a!73 L1_ext!1321_n)) a!77 a!76)))
(let ((a!82 (unit-resolution (mp a!78
                                 a!81
                                 (or (not L1_ext!612_n)
                                     (not a!79)
                                     L1_ext!1321_n))
                             (unit-resolution (def-axiom (or a!79 a!53))
                                              a!46
                                              a!79)
                             (hypothesis L1_ext!612_n)
                             L1_ext!1321_n)))
(let ((a!83 (unit-resolution (mp a!70
                                 a!72
                                 (or (not L1_ext!1321_n)
                                     (not a!71)
                                     L1_ext!1380_n))
                             a!82
                             (unit-resolution (def-axiom (or a!71 a!53))
                                              a!46
                                              a!71)
                             (asserted (not L1_ext!1380_n))
                             false)))
(let ((a!84 (unit-resolution (mp a!62
                                 a!65
                                 (or (not L1_ext0_n) (not a!64) L1_ext!612_n))
                             (lemma a!83 (not L1_ext!612_n))
                             (unit-resolution (def-axiom (or a!64 a!53))
                                              a!46
                                              a!64)
                             (not L1_ext0_n))))
(let ((a!85 (unit-resolution a!38
                             a!50
                             (unit-resolution (asserted (or L1_ext0_n
                                                            L1_tr0
                                                            L1_tr1))
                                              a!84
                                              (hypothesis (not L1_tr1))
                                              L1_tr0)
                             false)))
(let ((a!86 (unit-resolution (mp a!33 a!34 (or (not L1_tr1) (not a!22)))
                             (lemma a!85 L1_tr1)
                             (not a!22))))
(let ((a!87 (unit-resolution (def-axiom (or a!22 (= L1_2_1 L1_2_n)))
                             a!86
                             (= L1_2_1 L1_2_n)))
      (a!91 (unit-resolution (def-axiom (or a!22 (= L1_5_1 L1_2_0)))
                             a!86
                             (= L1_5_1 L1_2_0)))
      (a!96 (unit-resolution (def-axiom a!95)
                             a!86
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!103 (symm (unit-resolution a!102
                                    a!86
                                    (= L1_3_n (select aux!30_n L1_2_n)))
                   (= (select aux!30_n L1_2_n) L1_3_n)))
      (a!106 (symm (unit-resolution a!105
                                    a!86
                                    (= L1_1_n (select aux!29_n L1_0_n)))
                   (= (select aux!29_n L1_0_n) L1_1_n))))
(let ((a!88 (th-lemma (symm a!87 (= L1_2_n L1_2_1))
                      (<= (+ L1_2_n (* (- 1) L1_2_1)) 0)))
      (a!92 (th-lemma (symm a!91 (= L1_2_0 L1_5_1))
                      (<= (+ L1_2_0 (* (- 1) L1_5_1)) 0)))
      (a!93 (th-lemma (symm a!87 (= L1_2_n L1_2_1))
                      (>= (+ L1_2_n (* (- 1) L1_2_1)) 0)))
      (a!97 (th-lemma a!96 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!107 (trans (unit-resolution a!104
                                     a!86
                                     (= a!1 (select aux!29_n L1_0_n)))
                    a!106
                    (= a!1 L1_1_n))))
(let ((a!90 (unit-resolution a!20
                             (th-lemma a!88 a!89 (not (<= L1_2_1 1)))
                             (asserted (not |L1#level_3!130|))
                             (lemma a!85 L1_tr1)
                             (>= (+ L1_2_1 (* (- 1) L1_5_1)) 0)))
      (a!99 (lemma (th-lemma a!97 (hypothesis a!98) a!46 false)
                   (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0))))
(let ((a!94 (th-lemma a!90 a!92 a!93 (<= (+ L1_2_0 (* (- 1) L1_2_n)) 0))))
(let ((a!101 (trans (monotonicity (th-lemma a!94 a!99 (= L1_2_0 L1_2_n))
                                  (= (select aux!32_n L1_2_0)
                                     (select aux!32_n L1_2_n)))
                    (unit-resolution a!100
                                     a!86
                                     (= (select aux!32_n L1_2_n)
                                        (select aux!30_n L1_2_n)))
                    (= (select aux!32_n L1_2_0) (select aux!30_n L1_2_n))))
      (a!114 (trans (th-lemma a!47 a!112 a!113 a!40 (= L1_0_n L1_2_n))
                    (symm (th-lemma a!94 a!99 (= L1_2_0 L1_2_n))
                          (= L1_2_n L1_2_0))
                    (= L1_0_n L1_2_0))))
(let ((a!108 (monotonicity (trans a!101
                                  a!103
                                  (= (select aux!32_n L1_2_0) L1_3_n))
                           a!107
                           (= (= (select aux!32_n L1_2_0) a!1)
                              (= L1_3_n L1_1_n)))))
(let ((a!109 (symm a!108 (= (= L1_3_n L1_1_n) (= (select aux!32_n L1_2_0) a!1)))))
(let ((a!111 (mp (th-lemma a!4 (not (= L1_3_n L1_1_n)))
                 (monotonicity a!109 a!110)
                 (not (= (select aux!32_n L1_2_0) a!1)))))
  (unit-resolution a!2 a!111 a!114 false)))))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (= L1_3_n L1_1_n))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_2_n 1))
(not (<= L1_5_n 0))
(= L1_0_n L1_2_n)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (= L1_3_n L1_1_n))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_2_n 1))
(not (<= L1_5_n 0))
(= L1_0_n L1_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= L1_3_n L1_1_n))
(not (<= (+ L1_5_n (* (- 1) L1_2_n)) 0))
(or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
    (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1))
    (not (= L1_5_n 1))
    (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (<= L1_4_n 0)
      (not (= L1_5_n 2))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))
      (<= L1_5_n 1)
      (<= L1_0_n 0)
      (<= L1_2_n 0)))
(let ((a!1 (not (= (+ L1_0_n (* (- 1) L1_5_n)) (- 1)))))
  (or (<= (+ L1_2_n (* (- 1) L1_5_n)) (- 1))
      a!1
      (not (= L1_5_n 1))
      (<= (+ L1_4_n (* (- 1) L1_5_n)) (- 1))))
(not (<= L1_2_n 1))
(not (<= L1_5_n 0))
(= L1_0_n L1_2_n)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (= L1_3_n L1_1_n)
    (<= L1_2_n 1)
    (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
    (not (<= L1_0_n L1_2_n))
    (not (>= L1_0_n L1_2_n)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2
      |L1#level_3!130|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr0 a!3) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_4!141|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0))))
(let ((a!3 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_2_1 1)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_4!141|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 8
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!4 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!5 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!6 (rewrite (= (+ L1_5_0 (* (- 1) L1_2_0)) (+ (* (- 1) L1_2_0) L1_5_0))))
      (a!7 (= (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
              (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!12 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!13 (= (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!22 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!24 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!25 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!26 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!30 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!38 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!40 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!41 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!42 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!43 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!52 (or (not spacer_proxy!113) (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!61 (or (not spacer_proxy!112) (<= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!63 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3)))
      (a!65 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!68 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!74 (or (not spacer_proxy!109) (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!80 (or (not spacer_proxy!110) (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!86 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!95 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!96 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!97 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!98 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!100 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
                (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!101 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!112 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!113 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2))
      (a!8 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (<= L1_2_0 1)
               (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
               a!1
               a!2))
      (a!14 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                a!1
                a!2))
      (a!17 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                a!1
                a!2
                |L2#level_4!81|))
      (a!23 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!22))
      (a!27 (monotonicity (monotonicity (rewrite a!25) (= a!24 a!26))
                          (= (or (not L2_tr0) a!24) (or (not L2_tr0) a!26))))
      (a!31 (or a!30 (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!34 (or (not L2_tr1)
                a!30
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_4!81|))
      (a!39 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!38
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!44 (monotonicity (rewrite a!42) (= (not (<= L2_4_n L2_5_0)) a!43)))
      (a!45 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!43))
      (a!53 (unit-resolution (asserted a!52)
                             (asserted spacer_proxy!113)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!62 (unit-resolution (asserted a!61)
                             (asserted spacer_proxy!112)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!64 (unit-resolution (asserted (or (not spacer_proxy!111) a!63))
                             (asserted spacer_proxy!111)
                             a!63))
      (a!75 (unit-resolution (asserted a!74)
                             (asserted spacer_proxy!109)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!81 (unit-resolution (asserted a!80)
                             (asserted spacer_proxy!110)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!99 (monotonicity (monotonicity (monotonicity a!96 a!97) (= a!95 a!98))
                          (= (or (not spacer_proxy!0) a!95)
                             (or (not spacer_proxy!0) a!98))))
      (a!102 (monotonicity (monotonicity (rewrite a!100) (= a!98 a!101))
                           (= (or (not spacer_proxy!0) a!98)
                              (or (not spacer_proxy!0) a!101)))))
(let ((a!9 (rewrite (= (=> L2_tr0 a!8) (or (not L2_tr0) a!8))))
      (a!11 (= (or (=> L2_tr0 a!3) |L2#level_4!81|)
               (or (or (not L2_tr0) a!8) |L2#level_4!81|)))
      (a!15 (monotonicity (monotonicity (rewrite a!12)
                                        (rewrite a!13)
                                        (= a!8 a!14))
                          (= (or (not L2_tr0) a!8) (or (not L2_tr0) a!14))))
      (a!16 (= (or (or (not L2_tr0) a!8) |L2#level_4!81|)
               (or (or (not L2_tr0) a!14) |L2#level_4!81|)))
      (a!18 (= (or (or (not L2_tr0) a!14) |L2#level_4!81|) a!17))
      (a!19 (= (or (or (not L2_tr0) a!8) |L2#level_4!81|) a!17))
      (a!28 (mp (asserted (or (not L2_tr0) a!24)) a!27 (or (not L2_tr0) a!26)))
      (a!29 (monotonicity (rewrite (= a!26 (not a!23)))
                          (= (or (not L2_tr0) a!26)
                             (or (not L2_tr0) (not a!23)))))
      (a!32 (rewrite (= (=> L2_tr1 a!31) (or (not L2_tr1) a!31))))
      (a!33 (= (or (=> L2_tr1 a!31) |L2#level_4!81|)
               (or (or (not L2_tr1) a!31) |L2#level_4!81|)))
      (a!35 (= (or (or (not L2_tr1) a!31) |L2#level_4!81|) a!34))
      (a!46 (monotonicity (monotonicity (rewrite a!41) a!44 (= a!40 a!45))
                          (= (or (not L2_tr1) a!40) (or (not L2_tr1) a!45))))
      (a!48 (monotonicity (rewrite (= a!45 (not a!39)))
                          (= (or (not L2_tr1) a!45)
                             (or (not L2_tr1) (not a!39)))))
      (a!54 (th-lemma a!53 (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!56 (or a!39 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!84 (or a!23 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!88 (def-axiom (or a!23 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!89 (def-axiom (or a!23
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!92 (def-axiom (or a!23 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!103 (trans a!99
                    a!102
                    (= (or (not spacer_proxy!0) a!95)
                       (or (not spacer_proxy!0) a!101))))
      (a!105 (def-axiom (or a!23 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!106 (def-axiom (or a!23
                            (= (select aux!14_n L2_2_n)
                               (select aux!13_n L2_2_n)))))
      (a!109 (def-axiom (or a!23 (= L1_3_0 (select aux!14_n L2_2_n))))))
(let ((a!10 (trans (monotonicity (monotonicity (monotonicity a!4 a!5)
                                               (monotonicity a!6 a!7)
                                               (= a!3 a!8))
                                 (= (=> L2_tr0 a!3) (=> L2_tr0 a!8)))
                   a!9
                   (= (=> L2_tr0 a!3) (or (not L2_tr0) a!8))))
      (a!36 (trans (monotonicity a!32 a!33)
                   (rewrite a!35)
                   (= (or (=> L2_tr1 a!31) |L2#level_4!81|) a!34)))
      (a!47 (mp (asserted (or (not L2_tr1) a!40)) a!46 (or (not L2_tr1) a!45)))
      (a!55 (th-lemma a!54 (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!104 (mp (asserted (or (not spacer_proxy!0) a!95))
                 a!103
                 (or (not spacer_proxy!0) a!101))))
(let ((a!20 (trans (monotonicity a!10 a!11)
                   (trans (monotonicity a!15 a!16) (rewrite a!18) a!19)
                   (= (or (=> L2_tr0 a!3) |L2#level_4!81|) a!17)))
      (a!37 (mp (asserted (or (=> L2_tr1 a!31) |L2#level_4!81|)) a!36 a!34))
      (a!49 (unit-resolution (mp a!47 a!48 (or (not L2_tr1) (not a!39)))
                             (hypothesis L2_tr1)
                             (not a!39))))
(let ((a!21 (mp (asserted (or (=> L2_tr0 a!3) |L2#level_4!81|)) a!20 a!17))
      (a!50 (unit-resolution (def-axiom (or a!39 (= L2_2_0 L2_2_n)))
                             a!49
                             (= L2_2_0 L2_2_n)))
      (a!57 (unit-resolution (def-axiom a!56)
                             a!49
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!66 (unit-resolution (def-axiom (or a!39 (= L2_4_0 L2_4_n)))
                             a!49
                             (= L2_4_0 L2_4_n))))
(let ((a!51 (th-lemma a!50 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!58 (th-lemma a!57 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!60 (th-lemma a!50 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!67 (th-lemma a!66 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!59 (th-lemma a!51 a!55 a!58 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!69 (lemma (unit-resolution a!37
                                    a!59
                                    (th-lemma a!60
                                              (th-lemma a!62 a!64 a!65)
                                              a!67
                                              a!68)
                                    (asserted (not |L2#level_4!81|))
                                    (hypothesis L2_tr1)
                                    false)
                   (not L2_tr1))))
(let ((a!70 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             a!69
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!71 (unit-resolution (mp a!28 a!29 (or (not L2_tr0) (not a!23)))
                             a!70
                             (not a!23))))
(let ((a!72 (unit-resolution (def-axiom (or a!23 (= L1_0_0 L2_0_n)))
                             a!71
                             (= L1_0_0 L2_0_n)))
      (a!76 (unit-resolution (def-axiom (or a!23 (= L1_2_0 L2_2_n)))
                             a!71
                             (= L1_2_0 L2_2_n)))
      (a!85 (unit-resolution (def-axiom a!84)
                             a!71
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!87 (unit-resolution (def-axiom (or a!23 (= L2_5_n 0)))
                             a!71
                             (= L2_5_n 0)))
      (a!90 (symm (unit-resolution a!89
                                   a!71
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!93 (symm (unit-resolution a!92
                                   a!71
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!107 (symm (unit-resolution a!106
                                    a!71
                                    (= (select aux!14_n L2_2_n)
                                       (select aux!13_n L2_2_n)))
                   (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!110 (symm (unit-resolution a!109
                                    a!71
                                    (= L1_3_0 (select aux!14_n L2_2_n)))
                   (= (select aux!14_n L2_2_n) L1_3_0))))
(let ((a!73 (th-lemma (symm a!72 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!77 (th-lemma (symm a!76 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!79 (th-lemma (symm a!72 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!82 (th-lemma (symm a!76 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!91 (trans (unit-resolution a!88
                                    a!71
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!90
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!108 (trans (unit-resolution a!105
                                     a!71
                                     (= L2_3_n (select aux!13_n L2_2_n)))
                    a!107
                    (= L2_3_n (select aux!14_n L2_2_n)))))
(let ((a!78 (th-lemma a!73 a!75 a!53 a!77 (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!83 (th-lemma a!79 a!81 a!62 a!82 (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!94 (th-lemma (trans a!91 a!93 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!111 (th-lemma (trans a!108 a!110 (= L2_3_n L1_3_0))
                       (<= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!114 (th-lemma (th-lemma a!94
                                 (unit-resolution a!104
                                                  (asserted spacer_proxy!0)
                                                  a!101)
                                 a!111
                                 a!112)
                       a!113)))
  (unit-resolution a!21
                   a!78
                   a!83
                   (asserted (not |L2#level_4!81|))
                   a!70
                   (th-lemma a!82 (th-lemma a!62 a!64 a!65) a!85 a!86)
                   (th-lemma (th-lemma a!87 (>= L2_5_n 0))
                             a!54
                             a!77
                             (not (<= L1_2_0 1)))
                   a!114
                   false))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(>= (+ L2_2_n (* (- 1) L2_5_n)) 3)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 3)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 3)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 3)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(>= (+ L2_2_n (* (- 1) L2_5_n)) 3)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 3)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 3)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 3)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(>= (+ L2_2_n (* (- 1) L2_5_n)) 3)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 3)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 3)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 3)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      a!3
      a!4
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 3)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 3))))
(let ((a!5 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 3)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 3)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 3)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 3))))
(let ((a!5 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 3)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 3)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 3)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 3))))
(let ((a!5 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 3)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 3)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 3)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 3))))
(let ((a!5 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 3)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 3))))
(let ((a!5 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               a!3
               a!4)))
  (or (=> L2_tr1 a!5) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 8
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 3)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 3)))
      (a!6 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!7 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 3)
              (>= (+ (* (- 1) L2_5_0) L2_0_0) 3)))
      (a!8 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 3)))
      (a!9 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 3)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 3)))
      (a!10 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 3)))
      (a!11 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!12 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!18 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 3)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) (- 3))))
      (a!19 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) (- 3))))
      (a!20 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 3)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 3))))
      (a!21 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 3))))
      (a!22 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!31 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!33 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!34 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!35 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!36 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!42 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)))
      (a!43 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!44 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!45 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)))
      (a!49 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!50 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)))
      (a!53 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)
                |L2#level_5!143|))
      (a!58 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!61 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!62 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!63 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!74 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!75 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!76 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!77 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!79 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!80 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!91 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!92 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!95 (hypothesis (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!96 (or (not spacer_proxy!75) (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!98 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!102 (or (not spacer_proxy!74) (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!104 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!106 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!109 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!112 (or (not spacer_proxy!73) (>= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!116 (or (not spacer_proxy!72) (<= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!132 (hypothesis (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!133 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!152 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!155 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               a!3
               a!4))
      (a!13 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!8
                a!10
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
                a!3
                a!4))
      (a!23 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!21
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                a!3
                a!4))
      (a!26 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!21
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                a!3
                a!4
                |L2#level_5!143|))
      (a!32 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!31
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!37 (monotonicity (rewrite a!35) (= (not (<= L2_4_n L2_5_0)) a!36)))
      (a!38 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!36))
      (a!46 (rewrite (= (=> L2_tr0 a!45) (or (not L2_tr0) a!45))))
      (a!48 (= (or (=> L2_tr0 a!42) |L2#level_5!143|)
               (or (or (not L2_tr0) a!45) |L2#level_5!143|)))
      (a!51 (monotonicity (monotonicity (rewrite a!49) (= a!45 a!50))
                          (= (or (not L2_tr0) a!45) (or (not L2_tr0) a!50))))
      (a!52 (= (or (or (not L2_tr0) a!45) |L2#level_5!143|)
               (or (or (not L2_tr0) a!50) |L2#level_5!143|)))
      (a!54 (= (or (or (not L2_tr0) a!50) |L2#level_5!143|) a!53))
      (a!55 (= (or (or (not L2_tr0) a!45) |L2#level_5!143|) a!53))
      (a!59 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!58))
      (a!64 (monotonicity (monotonicity (rewrite a!62) (= a!61 a!63))
                          (= (or (not L2_tr0) a!61) (or (not L2_tr0) a!63))))
      (a!78 (monotonicity (monotonicity (monotonicity a!75 a!76) (= a!74 a!77))
                          (= (or (not spacer_proxy!0) a!74)
                             (or (not spacer_proxy!0) a!77))))
      (a!81 (monotonicity (monotonicity (rewrite a!79) (= a!77 a!80))
                          (= (or (not spacer_proxy!0) a!77)
                             (or (not spacer_proxy!0) a!80))))
      (a!97 (unit-resolution (asserted a!96)
                             (asserted spacer_proxy!75)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!103 (unit-resolution (asserted a!102)
                              (asserted spacer_proxy!74)
                              (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!105 (unit-resolution (asserted (or (not spacer_proxy!71) a!104))
                              (asserted spacer_proxy!71)
                              a!104))
      (a!113 (unit-resolution (asserted a!112)
                              (asserted spacer_proxy!73)
                              (>= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!117 (unit-resolution (asserted a!116)
                              (asserted spacer_proxy!72)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
(let ((a!14 (monotonicity (monotonicity (monotonicity (monotonicity a!6 a!7)
                                                      (= a!1 a!8))
                                        (monotonicity (monotonicity a!6 a!9)
                                                      (= a!2 a!10))
                                        (monotonicity a!11 a!12)
                                        (= a!5 a!13))
                          (= (=> L2_tr1 a!5) (=> L2_tr1 a!13))))
      (a!15 (rewrite (= (=> L2_tr1 a!13) (or (not L2_tr1) a!13))))
      (a!17 (= (or (=> L2_tr1 a!5) |L2#level_5!143|)
               (or (or (not L2_tr1) a!13) |L2#level_5!143|)))
      (a!24 (monotonicity (monotonicity (monotonicity (rewrite a!18)
                                                      (= a!8 a!19))
                                        (monotonicity (rewrite a!20)
                                                      (= a!10 a!21))
                                        (rewrite a!22)
                                        (= a!13 a!23))
                          (= (or (not L2_tr1) a!13) (or (not L2_tr1) a!23))))
      (a!25 (= (or (or (not L2_tr1) a!13) |L2#level_5!143|)
               (or (or (not L2_tr1) a!23) |L2#level_5!143|)))
      (a!27 (= (or (or (not L2_tr1) a!23) |L2#level_5!143|) a!26))
      (a!28 (= (or (or (not L2_tr1) a!13) |L2#level_5!143|) a!26))
      (a!39 (monotonicity (monotonicity (rewrite a!34) a!37 (= a!33 a!38))
                          (= (or (not L2_tr1) a!33) (or (not L2_tr1) a!38))))
      (a!41 (monotonicity (rewrite (= a!38 (not a!32)))
                          (= (or (not L2_tr1) a!38)
                             (or (not L2_tr1) (not a!32)))))
      (a!47 (trans (monotonicity (monotonicity (monotonicity a!43 a!44)
                                               (= a!42 a!45))
                                 (= (=> L2_tr0 a!42) (=> L2_tr0 a!45)))
                   a!46
                   (= (=> L2_tr0 a!42) (or (not L2_tr0) a!45))))
      (a!60 (def-axiom (or a!59 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!65 (mp (asserted (or (not L2_tr0) a!61)) a!64 (or (not L2_tr0) a!63)))
      (a!66 (monotonicity (rewrite (= a!63 (not a!59)))
                          (= (or (not L2_tr0) a!63)
                             (or (not L2_tr0) (not a!59)))))
      (a!68 (def-axiom (or a!59
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!71 (def-axiom (or a!59 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!82 (trans a!78
                   a!81
                   (= (or (not spacer_proxy!0) a!74)
                      (or (not spacer_proxy!0) a!80))))
      (a!84 (def-axiom (or a!59 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!85 (def-axiom (or a!59
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!88 (def-axiom (or a!59 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!107 (or a!59 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!114 (th-lemma a!103 a!113 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!118 (th-lemma a!117 a!97 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!124 (or a!32 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!136 (def-axiom (or a!32 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!137 (def-axiom (or a!32
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!139 (def-axiom (or a!32
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!141 (def-axiom (or a!32 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!144 (def-axiom (or a!32 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!145 (def-axiom (or a!32
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!147 (def-axiom (or a!32
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!149 (def-axiom (or a!32 (= L2_3_n (select aux!17_n L2_2_n))))))
(let ((a!16 (trans a!14 a!15 (= (=> L2_tr1 a!5) (or (not L2_tr1) a!13))))
      (a!40 (mp (asserted (or (not L2_tr1) a!33)) a!39 (or (not L2_tr1) a!38)))
      (a!56 (trans (monotonicity a!47 a!48)
                   (trans (monotonicity a!51 a!52) (rewrite a!54) a!55)
                   (= (or (=> L2_tr0 a!42) |L2#level_5!143|) a!53)))
      (a!67 (unit-resolution (mp a!65 a!66 (or (not L2_tr0) (not a!59)))
                             (hypothesis L2_tr0)
                             (not a!59)))
      (a!83 (mp (asserted (or (not spacer_proxy!0) a!74))
                a!82
                (or (not spacer_proxy!0) a!80))))
(let ((a!29 (trans (monotonicity a!16 a!17)
                   (trans (monotonicity a!24 a!25) (rewrite a!27) a!28)
                   (= (or (=> L2_tr1 a!5) |L2#level_5!143|) a!26)))
      (a!57 (mp (asserted (or (=> L2_tr0 a!42) |L2#level_5!143|)) a!56 a!53))
      (a!69 (symm (unit-resolution a!68
                                   a!67
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!72 (symm (unit-resolution a!71
                                   a!67
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!86 (symm (unit-resolution a!85
                                   a!67
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!89 (symm (unit-resolution a!88
                                   a!67
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!94 (unit-resolution (def-axiom (or a!59 (= L2_5_n 0)))
                             a!67
                             (= L2_5_n 0)))
      (a!99 (unit-resolution (def-axiom (or a!59 (= L1_2_0 L2_2_n)))
                             a!67
                             (= L1_2_0 L2_2_n)))
      (a!108 (unit-resolution (def-axiom a!107)
                              a!67
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!110 (unit-resolution (def-axiom (or a!59 (= L1_0_0 L2_0_n)))
                              a!67
                              (= L1_0_0 L2_0_n))))
(let ((a!30 (mp (asserted (or (=> L2_tr1 a!5) |L2#level_5!143|)) a!29 a!26))
      (a!70 (trans (unit-resolution a!60
                                    a!67
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!69
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!87 (trans (unit-resolution a!84
                                    a!67
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!86
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!100 (th-lemma (symm a!99 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!101 (th-lemma (symm a!99 (= L2_2_n L1_2_0))
                       (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!111 (th-lemma (symm a!110 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!115 (th-lemma (symm a!110 (= L2_0_n L1_0_0))
                       (>= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!73 (th-lemma (trans a!70 a!72 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!90 (th-lemma (trans a!87 a!89 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!93 (th-lemma (th-lemma a!73
                                (unit-resolution a!83
                                                 (asserted spacer_proxy!0)
                                                 a!80)
                                a!90
                                a!91)
                      a!92)))
(let ((a!119 (unit-resolution a!57
                              a!93
                              (th-lemma (th-lemma a!94 (>= L2_5_n 0))
                                        (lemma (th-lemma a!95 a!97 false) a!98)
                                        a!100
                                        (not (<= L1_2_0 1)))
                              (asserted (not |L2#level_5!143|))
                              (hypothesis L2_tr0)
                              (th-lemma a!101
                                        (th-lemma a!103 a!105 a!106)
                                        a!108
                                        a!109)
                              (th-lemma a!111
                                        a!114
                                        (lemma (th-lemma a!95 a!97 false) a!98)
                                        (th-lemma a!94 (>= L2_5_n 0))
                                        (>= L1_0_0 2))
                              (th-lemma a!115
                                        a!118
                                        a!103
                                        (th-lemma a!94 (<= L2_5_n 0))
                                        (<= L1_0_0 2))
                              (th-lemma a!101
                                        a!103
                                        (th-lemma a!94 (<= L2_5_n 0))
                                        (not (>= L1_2_0 3)))
                              false)))
(let ((a!120 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!119 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!121 (unit-resolution (mp a!40 a!41 (or (not L2_tr1) (not a!32)))
                              a!120
                              (not a!32))))
(let ((a!122 (unit-resolution (def-axiom (or a!32 (= L2_0_0 L2_0_n)))
                              a!121
                              (= L2_0_0 L2_0_n)))
      (a!125 (unit-resolution (def-axiom a!124)
                              a!121
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!128 (unit-resolution (def-axiom (or a!32 (= L2_2_0 L2_2_n)))
                              a!121
                              (= L2_2_0 L2_2_n)))
      (a!138 (trans (unit-resolution a!136
                                     a!121
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!137
                                     a!121
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!142 (symm (unit-resolution a!141
                                    a!121
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!146 (trans (unit-resolution a!144
                                     a!121
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!145
                                     a!121
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!150 (symm (unit-resolution a!149
                                    a!121
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!153 (unit-resolution (def-axiom (or a!32 (= L2_4_0 L2_4_n)))
                              a!121
                              (= L2_4_0 L2_4_n))))
(let ((a!123 (th-lemma a!122 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!126 (th-lemma a!125 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!129 (th-lemma a!128 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!131 (th-lemma a!122 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!134 (th-lemma a!125 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!140 (trans a!138
                    (unit-resolution a!139
                                     a!121
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!148 (trans a!146
                    (unit-resolution a!147
                                     a!121
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!154 (th-lemma a!153 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!156 (th-lemma a!128 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0))))
(let ((a!127 (th-lemma a!123 a!117 a!126 (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 3))))
      (a!130 (th-lemma a!129 a!103 a!126 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 3)))
      (a!135 (th-lemma a!131
                       (lemma (th-lemma a!132 a!113 false) a!133)
                       a!134
                       (<= (+ L2_5_0 (* (- 1) L2_0_0)) (- 3))))
      (a!143 (th-lemma (trans a!140 a!142 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!151 (th-lemma (trans a!148 a!150 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!157 (th-lemma a!156
                       (lemma (th-lemma a!95 a!97 false) a!98)
                       a!134
                       (>= (+ L2_2_0 (* (- 1) L2_5_0)) 3))))
  (unit-resolution a!30
                   a!127
                   a!130
                   (asserted (not |L2#level_5!143|))
                   a!120
                   a!135
                   (th-lemma a!143
                             (unit-resolution a!83
                                              (asserted spacer_proxy!0)
                                              a!80)
                             a!151
                             a!152)
                   (th-lemma a!129 (th-lemma a!103 a!105 a!106) a!154 a!155)
                   a!157
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 8
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!5 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!6 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!7 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!8 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!9 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!10 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!16 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!17 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!18 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!19 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!28 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!30 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!31 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!32 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!33 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!39 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!41 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!42 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!46 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!53 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!56 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!57 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!58 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!69 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!70 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!71 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!72 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!74 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!75 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!86 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!87 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!91 (or (not spacer_proxy!24) (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!93 (or (not spacer_proxy!22) (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!96 (or (not spacer_proxy!21) (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!100 (or (not spacer_proxy!25) (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!108 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!112 (hypothesis (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!113 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!140 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!145 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!149 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!152 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!11 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!6
                (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
                a!2
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!20 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))
                a!2
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!23 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))
                a!2
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_6!435|))
      (a!29 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!28
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!34 (monotonicity (rewrite a!32) (= (not (<= L2_4_n L2_5_0)) a!33)))
      (a!35 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!33))
      (a!40 (or a!39
                (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!43 (or a!39
                (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!47 (or a!39
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!49 (or (not L2_tr0)
                a!39
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!54 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!53))
      (a!59 (monotonicity (monotonicity (rewrite a!57) (= a!56 a!58))
                          (= (or (not L2_tr0) a!56) (or (not L2_tr0) a!58))))
      (a!73 (monotonicity (monotonicity (monotonicity a!70 a!71) (= a!69 a!72))
                          (= (or (not spacer_proxy!0) a!69)
                             (or (not spacer_proxy!0) a!72))))
      (a!76 (monotonicity (monotonicity (rewrite a!74) (= a!72 a!75))
                          (= (or (not spacer_proxy!0) a!72)
                             (or (not spacer_proxy!0) a!75))))
      (a!92 (unit-resolution (asserted a!91)
                             (asserted spacer_proxy!24)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!94 (unit-resolution (asserted a!93)
                             (asserted spacer_proxy!22)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!97 (unit-resolution (asserted a!96)
                             (asserted spacer_proxy!21)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!101 (unit-resolution (asserted a!100)
                              (asserted spacer_proxy!25)
                              (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!109 (unit-resolution (asserted (or (not spacer_proxy!23) a!108))
                              (asserted spacer_proxy!23)
                              a!108)))
(let ((a!12 (monotonicity (monotonicity (monotonicity (monotonicity a!4 a!5)
                                                      (= a!1 a!6))
                                        (monotonicity a!7 a!8)
                                        (monotonicity a!9 a!10)
                                        (= a!3 a!11))
                          (= (=> L2_tr1 a!3) (=> L2_tr1 a!11))))
      (a!13 (rewrite (= (=> L2_tr1 a!11) (or (not L2_tr1) a!11))))
      (a!15 (= (or (=> L2_tr1 a!3) |L2#level_6!435|)
               (or (or (not L2_tr1) a!11) |L2#level_6!435|)))
      (a!21 (monotonicity (monotonicity (monotonicity (rewrite a!16)
                                                      (= a!6 a!17))
                                        (rewrite a!18)
                                        (rewrite a!19)
                                        (= a!11 a!20))
                          (= (or (not L2_tr1) a!11) (or (not L2_tr1) a!20))))
      (a!22 (= (or (or (not L2_tr1) a!11) |L2#level_6!435|)
               (or (or (not L2_tr1) a!20) |L2#level_6!435|)))
      (a!24 (= (or (or (not L2_tr1) a!20) |L2#level_6!435|) a!23))
      (a!25 (= (or (or (not L2_tr1) a!11) |L2#level_6!435|) a!23))
      (a!36 (monotonicity (monotonicity (rewrite a!31) a!34 (= a!30 a!35))
                          (= (or (not L2_tr1) a!30) (or (not L2_tr1) a!35))))
      (a!38 (monotonicity (rewrite (= a!35 (not a!29)))
                          (= (or (not L2_tr1) a!35)
                             (or (not L2_tr1) (not a!29)))))
      (a!44 (rewrite (= (=> L2_tr0 a!43) (or (not L2_tr0) a!43))))
      (a!48 (monotonicity (monotonicity (rewrite a!46) (= a!43 a!47))
                          (= (or (not L2_tr0) a!43) (or (not L2_tr0) a!47))))
      (a!50 (rewrite (= (or (not L2_tr0) a!47) a!49)))
      (a!55 (def-axiom (or a!54 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!60 (mp (asserted (or (not L2_tr0) a!56)) a!59 (or (not L2_tr0) a!58)))
      (a!61 (monotonicity (rewrite (= a!58 (not a!54)))
                          (= (or (not L2_tr0) a!58)
                             (or (not L2_tr0) (not a!54)))))
      (a!63 (def-axiom (or a!54
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!66 (def-axiom (or a!54 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!77 (trans a!73
                   a!76
                   (= (or (not spacer_proxy!0) a!69)
                      (or (not spacer_proxy!0) a!75))))
      (a!79 (def-axiom (or a!54 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!80 (def-axiom (or a!54
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!83 (def-axiom (or a!54 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!95 (th-lemma a!92 a!94 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!104 (or a!54 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!120 (th-lemma a!97 a!101 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!124 (def-axiom (or a!29 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!125 (def-axiom (or a!29
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!127 (def-axiom (or a!29
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!129 (def-axiom (or a!29 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!132 (def-axiom (or a!29 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!133 (def-axiom (or a!29
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!135 (def-axiom (or a!29
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!137 (def-axiom (or a!29 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!142 (or a!29 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!14 (trans a!12 a!13 (= (=> L2_tr1 a!3) (or (not L2_tr1) a!11))))
      (a!37 (mp (asserted (or (not L2_tr1) a!30)) a!36 (or (not L2_tr1) a!35)))
      (a!45 (trans (monotonicity (monotonicity (monotonicity a!41 a!42)
                                               (= a!40 a!43))
                                 (= (=> L2_tr0 a!40) (=> L2_tr0 a!43)))
                   a!44
                   (= (=> L2_tr0 a!40) (or (not L2_tr0) a!43))))
      (a!51 (trans a!48 a!50 (= (or (not L2_tr0) a!43) a!49)))
      (a!62 (unit-resolution (mp a!60 a!61 (or (not L2_tr0) (not a!54)))
                             (hypothesis L2_tr0)
                             (not a!54)))
      (a!78 (mp (asserted (or (not spacer_proxy!0) a!69))
                a!77
                (or (not spacer_proxy!0) a!75))))
(let ((a!26 (trans (monotonicity a!14 a!15)
                   (trans (monotonicity a!21 a!22) (rewrite a!24) a!25)
                   (= (or (=> L2_tr1 a!3) |L2#level_6!435|) a!23)))
      (a!52 (mp (asserted (=> L2_tr0 a!40))
                (trans a!45 a!51 (= (=> L2_tr0 a!40) a!49))
                a!49))
      (a!64 (symm (unit-resolution a!63
                                   a!62
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!67 (symm (unit-resolution a!66
                                   a!62
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!81 (symm (unit-resolution a!80
                                   a!62
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!84 (symm (unit-resolution a!83
                                   a!62
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!89 (unit-resolution (def-axiom (or a!54 (= L1_2_0 L2_2_n)))
                             a!62
                             (= L1_2_0 L2_2_n)))
      (a!98 (unit-resolution (def-axiom (or a!54 (= L2_5_n 0)))
                             a!62
                             (= L2_5_n 0)))
      (a!102 (unit-resolution (def-axiom (or a!54 (= L1_4_0 L2_4_n)))
                              a!62
                              (= L1_4_0 L2_4_n)))
      (a!105 (unit-resolution (def-axiom a!104)
                              a!62
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!110 (unit-resolution (def-axiom (or a!54 (= L1_0_0 L2_0_n)))
                              a!62
                              (= L1_0_0 L2_0_n))))
(let ((a!27 (mp (asserted (or (=> L2_tr1 a!3) |L2#level_6!435|)) a!26 a!23))
      (a!65 (trans (unit-resolution a!55
                                    a!62
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!64
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!82 (trans (unit-resolution a!79
                                    a!62
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!81
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!90 (th-lemma (symm a!89 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!99 (th-lemma (symm a!89 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!103 (th-lemma (symm a!102 (= L2_4_n L1_4_0))
                       (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!107 (th-lemma (symm a!102 (= L2_4_n L1_4_0))
                       (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!111 (th-lemma (symm a!110 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!114 (th-lemma (symm a!110 (= L2_0_n L1_0_0))
                       (>= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!68 (th-lemma (trans a!65 a!67 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!85 (th-lemma (trans a!82 a!84 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!106 (th-lemma a!103 a!105 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!88 (th-lemma (th-lemma a!68
                                (unit-resolution a!78
                                                 (asserted spacer_proxy!0)
                                                 a!75)
                                a!85
                                a!86)
                      a!87)))
(let ((a!115 (unit-resolution a!52
                              a!88
                              (th-lemma a!90
                                        a!95
                                        a!97
                                        (th-lemma a!98 (<= L2_5_n 0))
                                        (<= L1_2_0 1))
                              (hypothesis L2_tr0)
                              (th-lemma a!99
                                        a!101
                                        (th-lemma a!98 (>= L2_5_n 0))
                                        (not (<= L1_2_0 0)))
                              a!106
                              (th-lemma a!107
                                        (th-lemma a!98 (>= L2_5_n 0))
                                        a!109
                                        (not (<= L1_4_0 1)))
                              (th-lemma a!111
                                        (lemma (th-lemma a!112 a!94 false)
                                               a!113)
                                        (th-lemma a!98 (>= L2_5_n 0))
                                        (not (<= L1_0_0 0)))
                              (th-lemma a!114
                                        a!97
                                        (th-lemma a!98 (<= L2_5_n 0))
                                        (<= L1_0_0 1))
                              false)))
(let ((a!116 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!115 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!117 (unit-resolution (mp a!37 a!38 (or (not L2_tr1) (not a!29)))
                              a!116
                              (not a!29))))
(let ((a!118 (unit-resolution (def-axiom (or a!29 (= L2_0_0 L2_0_n)))
                              a!117
                              (= L2_0_0 L2_0_n)))
      (a!121 (unit-resolution (def-axiom (or a!29 (= L2_2_0 L2_2_n)))
                              a!117
                              (= L2_2_0 L2_2_n)))
      (a!126 (trans (unit-resolution a!124
                                     a!117
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!125
                                     a!117
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!130 (symm (unit-resolution a!129
                                    a!117
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!134 (trans (unit-resolution a!132
                                     a!117
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!133
                                     a!117
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!138 (symm (unit-resolution a!137
                                    a!117
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!143 (unit-resolution (def-axiom a!142)
                              a!117
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!150 (unit-resolution (def-axiom (or a!29 (= L2_4_0 L2_4_n)))
                              a!117
                              (= L2_4_0 L2_4_n))))
(let ((a!119 (th-lemma a!118 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!122 (th-lemma a!121 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!128 (trans a!126
                    (unit-resolution a!127
                                     a!117
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!136 (trans a!134
                    (unit-resolution a!135
                                     a!117
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!141 (th-lemma a!118 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!144 (th-lemma a!143 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!146 (th-lemma a!121 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!147 (th-lemma a!143 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!151 (th-lemma a!150 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!123 (th-lemma a!119 a!120 a!122 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!131 (th-lemma (trans a!128 a!130 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!139 (th-lemma (trans a!136 a!138 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!148 (th-lemma a!146 a!92 a!147 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
  (unit-resolution a!27
                   a!123
                   (th-lemma a!131
                             (unit-resolution a!78
                                              (asserted spacer_proxy!0)
                                              a!75)
                             a!139
                             a!140)
                   (asserted (not |L2#level_6!435|))
                   a!116
                   (th-lemma a!141
                             (lemma (th-lemma a!112 a!94 false) a!113)
                             a!144
                             a!145)
                   a!148
                   (th-lemma a!146 (th-lemma a!92 a!109 a!149) a!151 a!152)
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 9 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!1
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!1
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!1
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 7 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 7 depth: 8
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!5 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!6 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!7 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!8 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!9 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!10 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!11 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!17 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!18 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!19 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!20 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!21 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!30 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!32 (hypothesis (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!33 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!36 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!37 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!38 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!39 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!45 (or (not (= L1_0_0 0))
                (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!46 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!47 (= (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!48 (or (not (= L1_0_0 0))
                (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!51 (= (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!52 (or (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!54 (or (not L2_tr0)
                (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!58 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!60 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!61 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!62 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!68 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!79 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!80 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!81 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!82 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!84 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!85 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!96 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!99 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!106 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!108 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!119 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!136 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!140 (symm (commutativity (= (= L2_2_0 L2_0_0) (= L2_0_0 L2_2_0)))
                   (= (= L2_0_0 L2_2_0) (= L2_2_0 L2_0_0))))
      (a!147 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!150 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!12 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!6
                a!9
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!22 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!18
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!25 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!18
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_7!438|))
      (a!31 (unit-resolution (asserted a!30)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!34 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!33
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!40 (monotonicity (rewrite a!38) (= (not (<= L2_4_n L2_5_0)) a!39)))
      (a!41 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!39))
      (a!49 (rewrite (= (=> L2_tr0 a!48) (or (not L2_tr0) a!48))))
      (a!53 (monotonicity (monotonicity (rewrite a!51) (= a!48 a!52))
                          (= (or (not L2_tr0) a!48) (or (not L2_tr0) a!52))))
      (a!55 (rewrite (= (or (not L2_tr0) a!52) a!54)))
      (a!59 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!58))
      (a!63 (monotonicity (monotonicity (rewrite a!61) (= a!60 a!62))
                          (= (or (not L2_tr0) a!60) (or (not L2_tr0) a!62))))
      (a!69 (unit-resolution (asserted (or (not spacer_proxy!3) a!68))
                             (asserted spacer_proxy!3)
                             a!68))
      (a!83 (monotonicity (monotonicity (monotonicity a!80 a!81) (= a!79 a!82))
                          (= (or (not spacer_proxy!0) a!79)
                             (or (not spacer_proxy!0) a!82))))
      (a!86 (monotonicity (monotonicity (rewrite a!84) (= a!82 a!85))
                          (= (or (not spacer_proxy!0) a!82)
                             (or (not spacer_proxy!0) a!85))))
      (a!100 (unit-resolution (asserted a!99)
                              (asserted spacer_proxy!1)
                              (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!107 (unit-resolution (asserted a!106)
                              (asserted spacer_proxy!5)
                              (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!109 (unit-resolution (asserted a!108)
                              (asserted spacer_proxy!4)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
(let ((a!13 (monotonicity (monotonicity (monotonicity (monotonicity a!4 a!5)
                                                      (= a!1 a!6))
                                        (monotonicity (monotonicity a!7 a!8)
                                                      (= a!2 a!9))
                                        (monotonicity a!10 a!11)
                                        (= a!3 a!12))
                          (= (=> L2_tr1 a!3) (=> L2_tr1 a!12))))
      (a!14 (rewrite (= (=> L2_tr1 a!12) (or (not L2_tr1) a!12))))
      (a!16 (= (or (=> L2_tr1 a!3) |L2#level_7!438|)
               (or (or (not L2_tr1) a!12) |L2#level_7!438|)))
      (a!23 (monotonicity (monotonicity (monotonicity (rewrite a!17)
                                                      (= a!6 a!18))
                                        (monotonicity (rewrite a!19)
                                                      (= a!9 a!20))
                                        (rewrite a!21)
                                        (= a!12 a!22))
                          (= (or (not L2_tr1) a!12) (or (not L2_tr1) a!22))))
      (a!24 (= (or (or (not L2_tr1) a!12) |L2#level_7!438|)
               (or (or (not L2_tr1) a!22) |L2#level_7!438|)))
      (a!26 (= (or (or (not L2_tr1) a!22) |L2#level_7!438|) a!25))
      (a!27 (= (or (or (not L2_tr1) a!12) |L2#level_7!438|) a!25))
      (a!35 (or a!34 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!42 (monotonicity (monotonicity (rewrite a!37) a!40 (= a!36 a!41))
                          (= (or (not L2_tr1) a!36) (or (not L2_tr1) a!41))))
      (a!44 (monotonicity (rewrite (= a!41 (not a!34)))
                          (= (or (not L2_tr1) a!41)
                             (or (not L2_tr1) (not a!34)))))
      (a!50 (trans (monotonicity (monotonicity (monotonicity a!46 a!47)
                                               (= a!45 a!48))
                                 (= (=> L2_tr0 a!45) (=> L2_tr0 a!48)))
                   a!49
                   (= (=> L2_tr0 a!45) (or (not L2_tr0) a!48))))
      (a!56 (trans a!53 a!55 (= (or (not L2_tr0) a!48) a!54)))
      (a!64 (mp (asserted (or (not L2_tr0) a!60)) a!63 (or (not L2_tr0) a!62)))
      (a!65 (monotonicity (rewrite (= a!62 (not a!59)))
                          (= (or (not L2_tr0) a!62)
                             (or (not L2_tr0) (not a!59)))))
      (a!70 (or a!59 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!72 (def-axiom (or a!59 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!73 (def-axiom (or a!59
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!76 (def-axiom (or a!59 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!87 (trans a!83
                   a!86
                   (= (or (not spacer_proxy!0) a!79)
                      (or (not spacer_proxy!0) a!85))))
      (a!89 (def-axiom (or a!59 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!90 (def-axiom (or a!59
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!93 (def-axiom (or a!59 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!97 (unit-resolution (def-axiom (or a!59 (= L2_5_n 0)))
                             (hypothesis (not a!59))
                             (= L2_5_n 0)))
      (a!98 (unit-resolution (def-axiom (or a!59 (= L1_2_0 L2_2_n)))
                             (hypothesis (not a!59))
                             (= L1_2_0 L2_2_n)))
      (a!120 (def-axiom (or a!34 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!121 (def-axiom (or a!34
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!123 (def-axiom (or a!34
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!125 (def-axiom (or a!34 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!128 (def-axiom (or a!34 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!129 (def-axiom (or a!34
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!131 (def-axiom (or a!34
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!133 (def-axiom (or a!34 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!138 (trans (th-lemma a!107 a!109 (= L2_0_n L2_5_n))
                    (symm (th-lemma a!31 a!100 (= L2_2_n L2_5_n))
                          (= L2_5_n L2_2_n))
                    (= L2_0_n L2_2_n))))
(let ((a!15 (trans a!13 a!14 (= (=> L2_tr1 a!3) (or (not L2_tr1) a!12))))
      (a!43 (mp (asserted (or (not L2_tr1) a!36)) a!42 (or (not L2_tr1) a!41)))
      (a!57 (mp (asserted (=> L2_tr0 a!45))
                (trans a!50 a!56 (= (=> L2_tr0 a!45) a!54))
                a!54))
      (a!66 (unit-resolution (mp a!64 a!65 (or (not L2_tr0) (not a!59)))
                             (hypothesis L2_tr0)
                             (not a!59)))
      (a!88 (mp (asserted (or (not spacer_proxy!0) a!79))
                a!87
                (or (not spacer_proxy!0) a!85)))
      (a!101 (monotonicity (trans a!98
                                  (th-lemma a!31 a!100 (= L2_2_n L2_5_n))
                                  (= L1_2_0 L2_5_n))
                           (= (= L1_2_0 0) (= L2_5_n 0)))))
(let ((a!28 (trans (monotonicity a!15 a!16)
                   (trans (monotonicity a!23 a!24) (rewrite a!26) a!27)
                   (= (or (=> L2_tr1 a!3) |L2#level_7!438|) a!25)))
      (a!67 (unit-resolution (def-axiom (or a!59 (= L2_5_n 0)))
                             a!66
                             (= L2_5_n 0)))
      (a!71 (unit-resolution (def-axiom a!70)
                             a!66
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!74 (symm (unit-resolution a!73
                                   a!66
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!77 (symm (unit-resolution a!76
                                   a!66
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!91 (symm (unit-resolution a!90
                                   a!66
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!94 (symm (unit-resolution a!93
                                   a!66
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!102 (mp a!97 (symm a!101 (= (= L2_5_n 0) (= L1_2_0 0))) (= L1_2_0 0)))
      (a!105 (unit-resolution (def-axiom (or a!59 (= L1_0_0 L2_0_n)))
                              a!66
                              (= L1_0_0 L2_0_n))))
(let ((a!29 (mp (asserted (or (=> L2_tr1 a!3) |L2#level_7!438|)) a!28 a!25))
      (a!75 (trans (unit-resolution a!72
                                    a!66
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!74
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!92 (trans (unit-resolution a!89
                                    a!66
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!91
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!103 (unit-resolution (hypothesis (not (= L1_2_0 0))) a!102 false))
      (a!110 (monotonicity (trans a!105
                                  (th-lemma a!107 a!109 (= L2_0_n L2_5_n))
                                  (= L1_0_0 L2_5_n))
                           (= (= L1_0_0 0) (= L2_5_n 0)))))
(let ((a!78 (th-lemma (trans a!75 a!77 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!95 (th-lemma (trans a!92 a!94 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!104 (unit-resolution (lemma a!103 (or a!59 (= L1_2_0 0)))
                              a!66
                              (= L1_2_0 0)))
      (a!111 (mp a!67 (symm a!110 (= (= L2_5_n 0) (= L1_0_0 0))) (= L1_0_0 0))))
(let ((a!112 (unit-resolution a!57
                              (th-lemma (th-lemma a!67 (>= L2_5_n 0))
                                        a!69
                                        a!71
                                        (not (<= L1_5_0 0)))
                              (th-lemma a!78
                                        (unit-resolution a!88
                                                         (asserted spacer_proxy!0)
                                                         a!85)
                                        a!95
                                        a!96)
                              (hypothesis L2_tr0)
                              a!104
                              a!111
                              false)))
(let ((a!113 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!112 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!114 (unit-resolution (mp a!43 a!44 (or (not L2_tr1) (not a!34)))
                              a!113
                              (not a!34))))
(let ((a!115 (unit-resolution (def-axiom a!35)
                              a!114
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!117 (unit-resolution (def-axiom (or a!34 (= L2_2_0 L2_2_n)))
                              a!114
                              (= L2_2_0 L2_2_n)))
      (a!122 (trans (unit-resolution a!120
                                     a!114
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!121
                                     a!114
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!126 (symm (unit-resolution a!125
                                    a!114
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!130 (trans (unit-resolution a!128
                                     a!114
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!129
                                     a!114
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!134 (symm (unit-resolution a!133
                                    a!114
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!137 (unit-resolution (def-axiom (or a!34 (= L2_0_0 L2_0_n)))
                              a!114
                              (= L2_0_0 L2_0_n)))
      (a!148 (unit-resolution (def-axiom (or a!34 (= L2_4_0 L2_4_n)))
                              a!114
                              (= L2_4_0 L2_4_n))))
(let ((a!116 (th-lemma a!115 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!118 (th-lemma a!117 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!124 (trans a!122
                    (unit-resolution a!123
                                     a!114
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!132 (trans a!130
                    (unit-resolution a!131
                                     a!114
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!139 (monotonicity (trans a!138
                                  (symm a!117 (= L2_2_n L2_2_0))
                                  (= L2_0_n L2_2_0))
                           (= (= L2_0_0 L2_0_n) (= L2_0_0 L2_2_0))))
      (a!143 (th-lemma a!117 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!144 (th-lemma a!115 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!149 (th-lemma a!148 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!127 (th-lemma (trans a!124 a!126 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!135 (th-lemma (trans a!132 a!134 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!141 (mp a!137
                 (trans a!139 a!140 (= (= L2_0_0 L2_0_n) (= L2_2_0 L2_0_0)))
                 (= L2_2_0 L2_0_0))))
(let ((a!142 (th-lemma a!141 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!145 (th-lemma a!141 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!146 (th-lemma a!143
                       a!100
                       a!144
                       a!145
                       (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1)))))
  (unit-resolution a!29
                   (lemma (th-lemma a!31 a!32 a!116 a!118 false) a!119)
                   (th-lemma a!127
                             (unit-resolution a!88
                                              (asserted spacer_proxy!0)
                                              a!85)
                             a!135
                             a!136)
                   a!113
                   a!142
                   (asserted (not |L2#level_7!438|))
                   a!146
                   (th-lemma a!143 (th-lemma a!100 a!69 a!147) a!149 a!150)
                   false))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(= L2_0_n L2_5_n)
(= L2_2_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(= L2_0_n L2_2_n)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(= L2_0_n L2_5_n)
(= L2_2_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(= L2_0_n L2_2_n)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(= L2_0_n L2_5_n)
(= L2_2_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(= L2_0_n L2_2_n)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
    (not (>= L2_2_n L2_5_n))
    (not (<= L2_0_n L2_5_n))
    (not (>= L2_0_n L2_2_n))
    (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 7 L2 (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 8 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 8 depth: 8
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  true)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 8747))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun |query!0#level_10!2194| () Bool
  false)
(define-fun query!0_5_n () Int
  3565)
(define-fun L2_5_0 () Int
  (- 8747))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 8746))
(define-fun L2_1_3 () Int
  1)
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!2404))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!2408))
(define-fun query!0_0_n () Int
  (- 8747))
(define-fun L2_3_3 () Int
  119)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  (- 6685))
(define-fun L2_1_2 () Int
  3565)
(define-fun query!0_3_n () Int
  119)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!2407))
(define-fun |query!0#level_9!1735| () Bool
  false)
(define-fun L2_3_1 () Int
  119)
(define-fun L2_5_1 () Int
  (- 8747))
(define-fun query!0_2_n () Int
  (- 6685))
(define-fun L2_5_2 () Int
  (- 8747))
(define-fun |query!0#level_8!1203| () Bool
  false)
(define-fun L2_0_2 () Int
  (- 8746))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!2406))
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!2402))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  0)
(define-fun |query!0#level_4!80| () Bool
  true)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 8747))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 8747))
(define-fun |query!0#level_7!853| () Bool
  true)
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!2403))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  true)
(define-fun query!0_4_n () Int
  (- 8746))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  3565)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!2405))
(define-fun L2_0_0 () Int
  (- 8747))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!2410))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!2401))
(define-fun L2_2_0 () Int
  (- 8747))
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!2409))
(define-fun L2_3_2 () Int
  0)
(define-fun L2_2_1 () Int
  (- 6685))
(define-fun L2_4_0 () Int
  0)
(define-fun L2_1_0 () Int
  1)
(define-fun k!2407 ((x!0 Int)) Int
  (ite (= x!0 (- 8746)) 3565
    3565))
(define-fun k!2404 ((x!0 Int)) Int
  (ite (= x!0 (- 8747)) 0
    0))
(define-fun k!2401 ((x!0 Int)) Int
  (ite (= x!0 (- 8747)) 1
    1))
(define-fun k!2409 ((x!0 Int)) Int
  (ite (= x!0 (- 8746)) 3565
    3565))
(define-fun k!2406 ((x!0 Int)) Int
  (ite (= x!0 (- 6685)) 119
    119))
(define-fun k!2403 ((x!0 Int)) Int
  (ite (= x!0 (- 8747)) 1
    1))
(define-fun k!2408 ((x!0 Int)) Int
  (ite (= x!0 (- 6685)) 119
    119))
(define-fun k!2405 ((x!0 Int)) Int
  (ite (= x!0 (- 6685)) 119
  (ite (= x!0 (- 8747)) 0
    119)))
(define-fun k!2402 ((x!0 Int)) Int
  (ite (= x!0 (- 8747)) 1
  (ite (= x!0 (- 8746)) 3565
    1)))
(define-fun k!2410 ((x!0 Int)) Int
  (ite (= x!0 (- 8747)) 0
    0))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L2_1_3) L2_3_2)))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 7 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 7 depth: 8
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!150 () Bool
  false)
(define-fun L2_4_0 () Int
  1)
(define-fun L2_1_0 () Int
  7887)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun spacer_proxy!98 () Bool
  false)
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2426))
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun spacer_proxy!62 () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!169 () Bool
  false)
(define-fun spacer_proxy!179 () Bool
  false)
(define-fun spacer_proxy!97 () Bool
  false)
(define-fun spacer_proxy!100 () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun spacer_proxy!128 () Bool
  false)
(define-fun spacer_proxy!61 () Bool
  false)
(define-fun L2_4_n () Int
  1)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun spacer_proxy!102 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2428))
(define-fun spacer_proxy!151 () Bool
  false)
(define-fun L2_0_n () Int
  0)
(define-fun spacer_proxy!42 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!96 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!71 () Bool
  false)
(define-fun spacer_proxy!152 () Bool
  false)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2427))
(define-fun spacer_proxy!23 () Bool
  false)
(define-fun |L2#level_5!143| () Bool
  true)
(define-fun spacer_proxy!99 () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  true)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun spacer_proxy!57 () Bool
  false)
(define-fun L2_1_n () Int
  7887)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2425))
(define-fun spacer_proxy!101 () Bool
  false)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2424))
(define-fun spacer_proxy!154 () Bool
  false)
(define-fun L2_3_0 () Int
  7886)
(define-fun |L2#level_6!435| () Bool
  true)
(define-fun L2_5_n () Int
  0)
(define-fun spacer_proxy!155 () Bool
  false)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!59 () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun spacer_proxy!60 () Bool
  false)
(define-fun spacer_proxy!153 () Bool
  false)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun spacer_proxy!148 () Bool
  false)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2423))
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun spacer_proxy!26 () Bool
  false)
(define-fun spacer_proxy!56 () Bool
  false)
(define-fun L2_3_n () Int
  7886)
(define-fun spacer_proxy!80 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_2_0 () Int
  0)
(define-fun spacer_proxy!111 () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun spacer_proxy!168 () Bool
  false)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2423 ((x!0 Int)) Int
  (ite (= x!0 0) 7887
    7887))
(define-fun k!2427 ((x!0 Int)) Int
  (ite (= x!0 0) 7887
    7887))
(define-fun k!2424 ((x!0 Int)) Int
  (ite (= x!0 0) 7887
    7887))
(define-fun k!2428 ((x!0 Int)) Int
  (ite (= x!0 0) 7886
    7886))
(define-fun k!2425 ((x!0 Int)) Int
  (ite (= x!0 0) 7886
    7886))
(define-fun k!2426 ((x!0 Int)) Int
  (ite (= x!0 0) 7886
    7886))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ (* (- 1) L2_1_0) L2_3_0)))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 8
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L2_4_0 () Int
  2)
(define-fun spacer_proxy!143 () Bool
  false)
(define-fun spacer_proxy!118 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2438))
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun spacer_proxy!116 () Bool
  false)
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!114 () Bool
  false)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!169 () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun L2_4_n () Int
  2)
(define-fun spacer_proxy!146 () Bool
  false)
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun spacer_proxy!61 () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2440))
(define-fun L2_0_n () Int
  1)
(define-fun spacer_proxy!147 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  true)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!71 () Bool
  false)
(define-fun spacer_proxy!21 () Bool
  true)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun spacer_proxy!171 () Bool
  false)
(define-fun spacer_proxy!23 () Bool
  true)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2439))
(define-fun |L2#level_5!143| () Bool
  true)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  true)
(define-fun spacer_proxy!142 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun L2_1_n () Int
  7887)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2437))
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2436))
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_3_0 () Int
  7886)
(define-fun spacer_proxy!78 () Bool
  false)
(define-fun spacer_proxy!24 () Bool
  true)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun spacer_proxy!144 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  true)
(define-fun spacer_proxy!145 () Bool
  false)
(define-fun spacer_proxy!149 () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  1)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2435))
(define-fun spacer_proxy!121 () Bool
  false)
(define-fun spacer_proxy!148 () Bool
  false)
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  1)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_3_n () Int
  7886)
(define-fun spacer_proxy!26 () Bool
  false)
(define-fun L2_2_0 () Int
  1)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  7887)
(define-fun spacer_proxy!111 () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun spacer_proxy!168 () Bool
  false)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2435 ((x!0 Int)) Int
  (ite (= x!0 1) 7887
    7887))
(define-fun k!2439 ((x!0 Int)) Int
  (ite (= x!0 1) 7887
    7887))
(define-fun k!2436 ((x!0 Int)) Int
  (ite (= x!0 1) 7887
    7887))
(define-fun k!2440 ((x!0 Int)) Int
  (ite (= x!0 1) 7886
    7886))
(define-fun k!2437 ((x!0 Int)) Int
  (ite (= x!0 1) 7886
    7886))
(define-fun k!2438 ((x!0 Int)) Int
  (ite (= x!0 1) 7886
    7886))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and (not (<= L2_4_n L2_5_0))
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L2_1_0) L2_3_0))))
      (a!2 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
       (not (<= L2_4_0 L2_5_0))
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 2)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 8
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!74 () Bool
  true)
(define-fun spacer_proxy!118 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2450))
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun spacer_proxy!116 () Bool
  false)
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!114 () Bool
  false)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun spacer_proxy!164 () Bool
  false)
(define-fun L2_4_n () Int
  3)
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun spacer_proxy!61 () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2452))
(define-fun L2_0_n () Int
  2)
(define-fun spacer_proxy!147 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!71 () Bool
  true)
(define-fun spacer_proxy!21 () Bool
  false)
(define-fun spacer_proxy!72 () Bool
  true)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2451))
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  true)
(define-fun spacer_proxy!14 () Bool
  true)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun L2_1_n () Int
  7887)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2449))
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2448))
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun L2_3_0 () Int
  7886)
(define-fun spacer_proxy!24 () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  2)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2447))
(define-fun spacer_proxy!73 () Bool
  true)
(define-fun L2_2_n () Int
  2)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_3_n () Int
  7886)
(define-fun spacer_proxy!26 () Bool
  false)
(define-fun L2_2_0 () Int
  2)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  7887)
(define-fun spacer_proxy!111 () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  3)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2447 ((x!0 Int)) Int
  (ite (= x!0 2) 7887
    7887))
(define-fun k!2451 ((x!0 Int)) Int
  (ite (= x!0 2) 7887
    7887))
(define-fun k!2448 ((x!0 Int)) Int
  (ite (= x!0 2) 7887
    7887))
(define-fun k!2452 ((x!0 Int)) Int
  (ite (= x!0 2) 7886
    7886))
(define-fun k!2449 ((x!0 Int)) Int
  (ite (= x!0 2) 7886
    7886))
(define-fun k!2450 ((x!0 Int)) Int
  (ite (= x!0 2) 7886
    7886))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!2
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= 0 (+ (* (- 1) L2_1_0) L2_3_0)))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 3)
       (not (<= L2_4_0 L2_5_0))
       a!1
       a!2
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 8
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!4 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!5 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!6 (rewrite (= (+ L1_5_0 (* (- 1) L1_2_0)) (+ (* (- 1) L1_2_0) L1_5_0))))
      (a!7 (= (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
              (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!12 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!13 (= (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!22 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!25 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!26 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!27 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!31 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!39 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!41 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!42 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!43 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!44 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!53 (or (not spacer_proxy!113) (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!62 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3)))
      (a!64 (or (not spacer_proxy!112) (<= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!66 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!69 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!79 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!88 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!89 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!92 (or (not spacer_proxy!109) (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!101 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!103 (or (not spacer_proxy!110) (>= (+ L2_0_n (* (- 1) L2_5_n)) 3))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2))
      (a!8 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (<= L1_2_0 1)
               (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
               a!1
               a!2))
      (a!14 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                a!1
                a!2))
      (a!17 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                a!1
                a!2
                |L2#level_4!81|))
      (a!23 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!22))
      (a!28 (monotonicity (monotonicity (rewrite a!26) (= a!25 a!27))
                          (= (or (not L2_tr0) a!25) (or (not L2_tr0) a!27))))
      (a!32 (or a!31 (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!35 (or (not L2_tr1)
                a!31
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_4!81|))
      (a!40 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!39
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!45 (monotonicity (rewrite a!43) (= (not (<= L2_4_n L2_5_0)) a!44)))
      (a!46 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!44))
      (a!54 (unit-resolution (asserted a!53)
                             (asserted spacer_proxy!113)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!63 (unit-resolution (asserted (or (not spacer_proxy!111) a!62))
                             (asserted spacer_proxy!111)
                             a!62))
      (a!65 (unit-resolution (asserted a!64)
                             (asserted spacer_proxy!112)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!80 (unit-resolution (asserted (or (not spacer_proxy!14) a!79))
                             (asserted spacer_proxy!14)
                             a!79))
      (a!93 (unit-resolution (asserted a!92)
                             (asserted spacer_proxy!109)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!104 (unit-resolution (asserted a!103)
                              (asserted spacer_proxy!110)
                              (>= (+ L2_0_n (* (- 1) L2_5_n)) 3))))
(let ((a!9 (rewrite (= (=> L2_tr0 a!8) (or (not L2_tr0) a!8))))
      (a!11 (= (or (=> L2_tr0 a!3) |L2#level_4!81|)
               (or (or (not L2_tr0) a!8) |L2#level_4!81|)))
      (a!15 (monotonicity (monotonicity (rewrite a!12)
                                        (rewrite a!13)
                                        (= a!8 a!14))
                          (= (or (not L2_tr0) a!8) (or (not L2_tr0) a!14))))
      (a!16 (= (or (or (not L2_tr0) a!8) |L2#level_4!81|)
               (or (or (not L2_tr0) a!14) |L2#level_4!81|)))
      (a!18 (= (or (or (not L2_tr0) a!14) |L2#level_4!81|) a!17))
      (a!19 (= (or (or (not L2_tr0) a!8) |L2#level_4!81|) a!17))
      (a!24 (def-axiom (or a!23 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!29 (mp (asserted (or (not L2_tr0) a!25)) a!28 (or (not L2_tr0) a!27)))
      (a!30 (monotonicity (rewrite (= a!27 (not a!23)))
                          (= (or (not L2_tr0) a!27)
                             (or (not L2_tr0) (not a!23)))))
      (a!33 (rewrite (= (=> L2_tr1 a!32) (or (not L2_tr1) a!32))))
      (a!34 (= (or (=> L2_tr1 a!32) |L2#level_4!81|)
               (or (or (not L2_tr1) a!32) |L2#level_4!81|)))
      (a!36 (= (or (or (not L2_tr1) a!32) |L2#level_4!81|) a!35))
      (a!47 (monotonicity (monotonicity (rewrite a!42) a!45 (= a!41 a!46))
                          (= (or (not L2_tr1) a!41) (or (not L2_tr1) a!46))))
      (a!49 (monotonicity (rewrite (= a!46 (not a!40)))
                          (= (or (not L2_tr1) a!46)
                             (or (not L2_tr1) (not a!40)))))
      (a!55 (th-lemma a!54 (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!57 (or a!40 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!73 (def-axiom (or a!23
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!76 (def-axiom (or a!23 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!81 (def-axiom (or a!23 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!82 (def-axiom (or a!23
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!85 (def-axiom (or a!23 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!94 (th-lemma a!54 a!93 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!99 (or a!23 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!105 (th-lemma a!104 a!65 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
(let ((a!10 (trans (monotonicity (monotonicity (monotonicity a!4 a!5)
                                               (monotonicity a!6 a!7)
                                               (= a!3 a!8))
                                 (= (=> L2_tr0 a!3) (=> L2_tr0 a!8)))
                   a!9
                   (= (=> L2_tr0 a!3) (or (not L2_tr0) a!8))))
      (a!37 (trans (monotonicity a!33 a!34)
                   (rewrite a!36)
                   (= (or (=> L2_tr1 a!32) |L2#level_4!81|) a!35)))
      (a!48 (mp (asserted (or (not L2_tr1) a!41)) a!47 (or (not L2_tr1) a!46)))
      (a!56 (th-lemma a!55 (>= (+ L2_2_n (* (- 1) L2_5_n)) 1))))
(let ((a!20 (trans (monotonicity a!10 a!11)
                   (trans (monotonicity a!15 a!16) (rewrite a!18) a!19)
                   (= (or (=> L2_tr0 a!3) |L2#level_4!81|) a!17)))
      (a!38 (mp (asserted (or (=> L2_tr1 a!32) |L2#level_4!81|)) a!37 a!35))
      (a!50 (unit-resolution (mp a!48 a!49 (or (not L2_tr1) (not a!40)))
                             (hypothesis L2_tr1)
                             (not a!40))))
(let ((a!21 (mp (asserted (or (=> L2_tr0 a!3) |L2#level_4!81|)) a!20 a!17))
      (a!51 (unit-resolution (def-axiom (or a!40 (= L2_2_0 L2_2_n)))
                             a!50
                             (= L2_2_0 L2_2_n)))
      (a!58 (unit-resolution (def-axiom a!57)
                             a!50
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!67 (unit-resolution (def-axiom (or a!40 (= L2_4_0 L2_4_n)))
                             a!50
                             (= L2_4_0 L2_4_n))))
(let ((a!52 (th-lemma a!51 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!59 (th-lemma a!58 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!61 (th-lemma a!51 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!68 (th-lemma a!67 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!60 (th-lemma a!52 a!56 a!59 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!70 (lemma (unit-resolution a!38
                                    a!60
                                    (th-lemma a!61
                                              (th-lemma a!63 a!65 a!66)
                                              a!68
                                              a!69)
                                    (asserted (not |L2#level_4!81|))
                                    (hypothesis L2_tr1)
                                    false)
                   (not L2_tr1))))
(let ((a!71 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             a!70
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!72 (unit-resolution (mp a!29 a!30 (or (not L2_tr0) (not a!23)))
                             a!71
                             (not a!23))))
(let ((a!74 (symm (unit-resolution a!73
                                   a!72
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!77 (symm (unit-resolution a!76
                                   a!72
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!83 (symm (unit-resolution a!82
                                   a!72
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!86 (symm (unit-resolution a!85
                                   a!72
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!90 (unit-resolution (def-axiom (or a!23 (= L1_0_0 L2_0_n)))
                             a!72
                             (= L1_0_0 L2_0_n)))
      (a!95 (unit-resolution (def-axiom (or a!23 (= L1_2_0 L2_2_n)))
                             a!72
                             (= L1_2_0 L2_2_n)))
      (a!100 (unit-resolution (def-axiom a!99)
                              a!72
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!102 (unit-resolution (def-axiom (or a!23 (= L2_5_n 0)))
                              a!72
                              (= L2_5_n 0))))
(let ((a!75 (trans (unit-resolution a!24
                                    a!72
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!74
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!84 (trans (unit-resolution a!81
                                    a!72
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!83
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!91 (th-lemma (symm a!90 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!96 (th-lemma (symm a!95 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!98 (th-lemma (symm a!95 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!106 (th-lemma (symm a!90 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!78 (th-lemma (trans a!75 a!77 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!87 (th-lemma (trans a!84 a!86 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!97 (th-lemma a!91 a!94 a!96 (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!107 (th-lemma a!98 a!105 a!106 (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
  (unit-resolution a!21
                   (th-lemma (th-lemma a!78 a!80 a!87 a!88) a!89)
                   a!97
                   (asserted (not |L2#level_4!81|))
                   a!71
                   (th-lemma a!98 (th-lemma a!63 a!65 a!66) a!100 a!101)
                   (th-lemma (th-lemma a!102 (>= L2_5_n 0))
                             a!55
                             a!96
                             (not (<= L1_2_0 1)))
                   a!107
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 5 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 8
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!5 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!6 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!7 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!8 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!9 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!10 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!11 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!17 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!18 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!19 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!20 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!21 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!30 (hypothesis (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!31 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!34 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!35 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!36 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!37 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!43 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)))
      (a!44 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!45 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!46 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)))
      (a!50 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!51 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)))
      (a!54 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)
                |L2#level_5!143|))
      (a!59 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!61 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!62 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!63 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!69 (or (not spacer_proxy!74) (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!71 (hypothesis (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!72 (or (not spacer_proxy!73) (>= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!74 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!76 (hypothesis (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!77 (or (not spacer_proxy!75) (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!79 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!83 (or (not spacer_proxy!72) (<= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!95 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!104 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!105 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!107 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!109 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!112 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!131 (not (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!135 (symm (commutativity (= (= L2_2_0 L2_0_0) (= L2_0_0 L2_2_0)))
                   (= (= L2_0_0 L2_2_0) (= L2_2_0 L2_0_0))))
      (a!148 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!12 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!7
                a!9
                a!3
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!22 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!18
                a!20
                a!3
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!25 (or (not L2_tr1)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!18
                a!20
                a!3
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_5!143|))
      (a!32 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!31
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!38 (monotonicity (rewrite a!36) (= (not (<= L2_4_n L2_5_0)) a!37)))
      (a!39 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!37))
      (a!47 (rewrite (= (=> L2_tr0 a!46) (or (not L2_tr0) a!46))))
      (a!49 (= (or (=> L2_tr0 a!43) |L2#level_5!143|)
               (or (or (not L2_tr0) a!46) |L2#level_5!143|)))
      (a!52 (monotonicity (monotonicity (rewrite a!50) (= a!46 a!51))
                          (= (or (not L2_tr0) a!46) (or (not L2_tr0) a!51))))
      (a!53 (= (or (or (not L2_tr0) a!46) |L2#level_5!143|)
               (or (or (not L2_tr0) a!51) |L2#level_5!143|)))
      (a!55 (= (or (or (not L2_tr0) a!51) |L2#level_5!143|) a!54))
      (a!56 (= (or (or (not L2_tr0) a!46) |L2#level_5!143|) a!54))
      (a!60 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!59))
      (a!64 (monotonicity (monotonicity (rewrite a!62) (= a!61 a!63))
                          (= (or (not L2_tr0) a!61) (or (not L2_tr0) a!63))))
      (a!70 (unit-resolution (asserted a!69)
                             (asserted spacer_proxy!74)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!73 (unit-resolution (asserted a!72)
                             (asserted spacer_proxy!73)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!78 (unit-resolution (asserted a!77)
                             (asserted spacer_proxy!75)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!84 (unit-resolution (asserted a!83)
                             (asserted spacer_proxy!72)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!96 (unit-resolution (asserted (or (not spacer_proxy!14) a!95))
                             (asserted spacer_proxy!14)
                             a!95))
      (a!108 (unit-resolution (asserted (or (not spacer_proxy!71) a!107))
                              (asserted spacer_proxy!71)
                              a!107)))
(let ((a!13 (monotonicity (monotonicity (monotonicity (monotonicity a!5 a!6)
                                                      (= a!1 a!7))
                                        (monotonicity (monotonicity a!5 a!8)
                                                      (= a!2 a!9))
                                        (monotonicity a!10 a!11)
                                        (= a!4 a!12))
                          (= (=> L2_tr1 a!4) (=> L2_tr1 a!12))))
      (a!14 (rewrite (= (=> L2_tr1 a!12) (or (not L2_tr1) a!12))))
      (a!16 (= (or (=> L2_tr1 a!4) |L2#level_5!143|)
               (or (or (not L2_tr1) a!12) |L2#level_5!143|)))
      (a!23 (monotonicity (monotonicity (monotonicity (rewrite a!17)
                                                      (= a!7 a!18))
                                        (monotonicity (rewrite a!19)
                                                      (= a!9 a!20))
                                        (rewrite a!21)
                                        (= a!12 a!22))
                          (= (or (not L2_tr1) a!12) (or (not L2_tr1) a!22))))
      (a!24 (= (or (or (not L2_tr1) a!12) |L2#level_5!143|)
               (or (or (not L2_tr1) a!22) |L2#level_5!143|)))
      (a!26 (= (or (or (not L2_tr1) a!22) |L2#level_5!143|) a!25))
      (a!27 (= (or (or (not L2_tr1) a!12) |L2#level_5!143|) a!25))
      (a!33 (def-axiom (or a!32 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!40 (monotonicity (monotonicity (rewrite a!35) a!38 (= a!34 a!39))
                          (= (or (not L2_tr1) a!34) (or (not L2_tr1) a!39))))
      (a!42 (monotonicity (rewrite (= a!39 (not a!32)))
                          (= (or (not L2_tr1) a!39)
                             (or (not L2_tr1) (not a!32)))))
      (a!48 (trans (monotonicity (monotonicity (monotonicity a!44 a!45)
                                               (= a!43 a!46))
                                 (= (=> L2_tr0 a!43) (=> L2_tr0 a!46)))
                   a!47
                   (= (=> L2_tr0 a!43) (or (not L2_tr0) a!46))))
      (a!65 (mp (asserted (or (not L2_tr0) a!61)) a!64 (or (not L2_tr0) a!63)))
      (a!66 (monotonicity (rewrite (= a!63 (not a!60)))
                          (= (or (not L2_tr0) a!63)
                             (or (not L2_tr0) (not a!60)))))
      (a!75 (th-lemma a!70
                      (lemma (th-lemma a!71 a!73 false) a!74)
                      (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!85 (th-lemma a!84 a!78 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!88 (def-axiom (or a!60 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!89 (def-axiom (or a!60
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!92 (def-axiom (or a!60 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!97 (def-axiom (or a!60 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!98 (def-axiom (or a!60
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!101 (def-axiom (or a!60 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!110 (or a!60 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!116 (def-axiom (or a!32
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!118 (def-axiom (or a!32
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!120 (def-axiom (or a!32 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!123 (def-axiom (or a!32 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!124 (def-axiom (or a!32
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!126 (def-axiom (or a!32
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!128 (def-axiom (or a!32 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!140 (th-lemma a!78 (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!141 (or a!32 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!15 (trans a!13 a!14 (= (=> L2_tr1 a!4) (or (not L2_tr1) a!12))))
      (a!41 (mp (asserted (or (not L2_tr1) a!34)) a!40 (or (not L2_tr1) a!39)))
      (a!57 (trans (monotonicity a!48 a!49)
                   (trans (monotonicity a!52 a!53) (rewrite a!55) a!56)
                   (= (or (=> L2_tr0 a!43) |L2#level_5!143|) a!54)))
      (a!67 (unit-resolution (mp a!65 a!66 (or (not L2_tr0) (not a!60)))
                             (hypothesis L2_tr0)
                             (not a!60))))
(let ((a!28 (trans (monotonicity a!15 a!16)
                   (trans (monotonicity a!23 a!24) (rewrite a!26) a!27)
                   (= (or (=> L2_tr1 a!4) |L2#level_5!143|) a!25)))
      (a!58 (mp (asserted (or (=> L2_tr0 a!43) |L2#level_5!143|)) a!57 a!54))
      (a!68 (unit-resolution (def-axiom (or a!60 (= L2_5_n 0)))
                             a!67
                             (= L2_5_n 0)))
      (a!80 (unit-resolution (def-axiom (or a!60 (= L1_0_0 L2_0_n)))
                             a!67
                             (= L1_0_0 L2_0_n)))
      (a!86 (unit-resolution (def-axiom (or a!60 (= L1_2_0 L2_2_n)))
                             a!67
                             (= L1_2_0 L2_2_n)))
      (a!90 (symm (unit-resolution a!89
                                   a!67
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!93 (symm (unit-resolution a!92
                                   a!67
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!99 (symm (unit-resolution a!98
                                   a!67
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!102 (symm (unit-resolution a!101
                                    a!67
                                    (= L1_3_0 (select aux!14_n L2_2_n)))
                   (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!111 (unit-resolution (def-axiom a!110)
                              a!67
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!29 (mp (asserted (or (=> L2_tr1 a!4) |L2#level_5!143|)) a!28 a!25))
      (a!81 (th-lemma (symm a!80 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!82 (th-lemma (symm a!80 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!87 (th-lemma (symm a!86 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!91 (trans (unit-resolution a!88
                                    a!67
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!90
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!100 (trans (unit-resolution a!97
                                     a!67
                                     (= L2_3_n (select aux!13_n L2_2_n)))
                    a!99
                    (= L2_3_n (select aux!14_n L2_2_n))))
      (a!106 (th-lemma (symm a!86 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0))))
(let ((a!94 (th-lemma (trans a!91 a!93 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!103 (th-lemma (trans a!100 a!102 (= L2_3_n L1_3_0))
                       (>= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!113 (unit-resolution a!58
                              (th-lemma (th-lemma a!68 (>= L2_5_n 0))
                                        a!75
                                        (lemma (th-lemma a!76 a!78 false) a!79)
                                        a!81
                                        (>= L1_0_0 2))
                              (th-lemma a!82
                                        a!85
                                        a!70
                                        (th-lemma a!68 (<= L2_5_n 0))
                                        (<= L1_0_0 2))
                              (asserted (not |L2#level_5!143|))
                              (hypothesis L2_tr0)
                              (th-lemma a!87
                                        a!70
                                        (th-lemma a!68 (<= L2_5_n 0))
                                        (not (>= L1_2_0 3)))
                              (th-lemma (th-lemma a!94 a!96 a!103 a!104) a!105)
                              (th-lemma (th-lemma a!68 (>= L2_5_n 0))
                                        a!78
                                        a!106
                                        (not (<= L1_2_0 1)))
                              (th-lemma a!87
                                        (th-lemma a!70 a!108 a!109)
                                        a!111
                                        a!112)
                              false)))
(let ((a!114 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!113 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!115 (unit-resolution (mp a!41 a!42 (or (not L2_tr1) (not a!32)))
                              a!114
                              (not a!32))))
(let ((a!117 (trans (unit-resolution a!33
                                     a!115
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!116
                                     a!115
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!121 (symm (unit-resolution a!120
                                    a!115
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!125 (trans (unit-resolution a!123
                                     a!115
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!124
                                     a!115
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!129 (symm (unit-resolution a!128
                                    a!115
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!132 (unit-resolution (def-axiom (or a!32 (= L2_0_0 L2_0_n)))
                              a!115
                              (= L2_0_0 L2_0_n)))
      (a!133 (unit-resolution (def-axiom (or a!32 (= L2_2_0 L2_2_n)))
                              a!115
                              (= L2_2_0 L2_2_n)))
      (a!142 (unit-resolution (def-axiom a!141)
                              a!115
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!146 (unit-resolution (def-axiom (or a!32 (= L2_4_0 L2_4_n)))
                              a!115
                              (= L2_4_0 L2_4_n))))
(let ((a!119 (trans a!117
                    (unit-resolution a!118
                                     a!115
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!127 (trans a!125
                    (unit-resolution a!126
                                     a!115
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!134 (monotonicity (trans (th-lemma a!73
                                            a!84
                                            a!78
                                            a!70
                                            (= L2_0_n L2_2_n))
                                  (symm a!133 (= L2_2_n L2_2_0))
                                  (= L2_0_n L2_2_0))
                           (= (= L2_0_0 L2_0_n) (= L2_0_0 L2_2_0))))
      (a!139 (th-lemma a!133 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!143 (th-lemma a!142 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!145 (th-lemma a!133 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!147 (th-lemma a!146 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!122 (th-lemma (trans a!119 a!121 (= L2_1_0 L2_1_n))
                       (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!130 (th-lemma (trans a!127 a!129 (= L2_3_0 L2_3_n))
                       (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!136 (mp a!132
                 (trans a!134 a!135 (= (= L2_0_0 L2_0_n) (= L2_2_0 L2_0_0)))
                 (= L2_2_0 L2_0_0)))
      (a!144 (th-lemma a!139 a!140 a!143 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!137 (th-lemma a!136 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!138 (th-lemma a!136 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
  (unit-resolution a!29
                   (lemma (th-lemma a!30 a!122 a!96 a!130 false) a!131)
                   a!137
                   (asserted (not |L2#level_5!143|))
                   a!114
                   a!138
                   a!144
                   (th-lemma a!145 (th-lemma a!70 a!108 a!109) a!147 a!148)
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(= L2_0_n L2_2_n)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(= L2_0_n L2_2_n)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(= L2_0_n L2_2_n)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 8
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!5 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!6 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!7 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!8 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!9 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!10 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!16 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!17 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!18 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!19 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!28 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!30 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!31 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!32 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!33 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!39 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!41 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!42 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!46 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!53 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!55 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!56 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!57 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!63 (or (not spacer_proxy!25) (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!68 (or (not spacer_proxy!24) (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!70 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!85 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!94 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!95 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!96 (hypothesis (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!97 (or (not spacer_proxy!22) (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!99 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!103 (or (not spacer_proxy!21) (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!114 (hypothesis (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!115 (hypothesis (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!116 (hypothesis (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!117 (not (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!118 (not (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!119 (not (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!140 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!144 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!147 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!11 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!6
                (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
                a!2
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!20 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))
                a!2
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!23 (or (not L2_tr1)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))
                a!2
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_6!435|))
      (a!29 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!28
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!34 (monotonicity (rewrite a!32) (= (not (<= L2_4_n L2_5_0)) a!33)))
      (a!35 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!33))
      (a!40 (or a!39
                (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!43 (or a!39
                (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!47 (or a!39
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!49 (or (not L2_tr0)
                a!39
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!54 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!53))
      (a!58 (monotonicity (monotonicity (rewrite a!56) (= a!55 a!57))
                          (= (or (not L2_tr0) a!55) (or (not L2_tr0) a!57))))
      (a!64 (unit-resolution (asserted a!63)
                             (asserted spacer_proxy!25)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!69 (unit-resolution (asserted a!68)
                             (asserted spacer_proxy!24)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!71 (unit-resolution (asserted (or (not spacer_proxy!23) a!70))
                             (asserted spacer_proxy!23)
                             a!70))
      (a!86 (unit-resolution (asserted (or (not spacer_proxy!14) a!85))
                             (asserted spacer_proxy!14)
                             a!85))
      (a!98 (unit-resolution (asserted a!97)
                             (asserted spacer_proxy!22)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!104 (unit-resolution (asserted a!103)
                              (asserted spacer_proxy!21)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
(let ((a!12 (monotonicity (monotonicity (monotonicity (monotonicity a!4 a!5)
                                                      (= a!1 a!6))
                                        (monotonicity a!7 a!8)
                                        (monotonicity a!9 a!10)
                                        (= a!3 a!11))
                          (= (=> L2_tr1 a!3) (=> L2_tr1 a!11))))
      (a!13 (rewrite (= (=> L2_tr1 a!11) (or (not L2_tr1) a!11))))
      (a!15 (= (or (=> L2_tr1 a!3) |L2#level_6!435|)
               (or (or (not L2_tr1) a!11) |L2#level_6!435|)))
      (a!21 (monotonicity (monotonicity (monotonicity (rewrite a!16)
                                                      (= a!6 a!17))
                                        (rewrite a!18)
                                        (rewrite a!19)
                                        (= a!11 a!20))
                          (= (or (not L2_tr1) a!11) (or (not L2_tr1) a!20))))
      (a!22 (= (or (or (not L2_tr1) a!11) |L2#level_6!435|)
               (or (or (not L2_tr1) a!20) |L2#level_6!435|)))
      (a!24 (= (or (or (not L2_tr1) a!20) |L2#level_6!435|) a!23))
      (a!25 (= (or (or (not L2_tr1) a!11) |L2#level_6!435|) a!23))
      (a!36 (monotonicity (monotonicity (rewrite a!31) a!34 (= a!30 a!35))
                          (= (or (not L2_tr1) a!30) (or (not L2_tr1) a!35))))
      (a!38 (monotonicity (rewrite (= a!35 (not a!29)))
                          (= (or (not L2_tr1) a!35)
                             (or (not L2_tr1) (not a!29)))))
      (a!44 (rewrite (= (=> L2_tr0 a!43) (or (not L2_tr0) a!43))))
      (a!48 (monotonicity (monotonicity (rewrite a!46) (= a!43 a!47))
                          (= (or (not L2_tr0) a!43) (or (not L2_tr0) a!47))))
      (a!50 (rewrite (= (or (not L2_tr0) a!47) a!49)))
      (a!59 (mp (asserted (or (not L2_tr0) a!55)) a!58 (or (not L2_tr0) a!57)))
      (a!60 (monotonicity (rewrite (= a!57 (not a!54)))
                          (= (or (not L2_tr0) a!57)
                             (or (not L2_tr0) (not a!54)))))
      (a!75 (or a!54 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!78 (def-axiom (or a!54 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!79 (def-axiom (or a!54
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!82 (def-axiom (or a!54 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!87 (def-axiom (or a!54 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!88 (def-axiom (or a!54
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!91 (def-axiom (or a!54 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!110 (th-lemma a!104 a!64 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!120 (def-axiom (or a!29 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!121 (def-axiom (or a!29
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!123 (def-axiom (or a!29
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!125 (def-axiom (or a!29 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!128 (def-axiom (or a!29 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!129 (def-axiom (or a!29
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!131 (def-axiom (or a!29
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!133 (def-axiom (or a!29 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!137 (or a!29 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!14 (trans a!12 a!13 (= (=> L2_tr1 a!3) (or (not L2_tr1) a!11))))
      (a!37 (mp (asserted (or (not L2_tr1) a!30)) a!36 (or (not L2_tr1) a!35)))
      (a!45 (trans (monotonicity (monotonicity (monotonicity a!41 a!42)
                                               (= a!40 a!43))
                                 (= (=> L2_tr0 a!40) (=> L2_tr0 a!43)))
                   a!44
                   (= (=> L2_tr0 a!40) (or (not L2_tr0) a!43))))
      (a!51 (trans a!48 a!50 (= (or (not L2_tr0) a!43) a!49)))
      (a!61 (unit-resolution (mp a!59 a!60 (or (not L2_tr0) (not a!54)))
                             (hypothesis L2_tr0)
                             (not a!54))))
(let ((a!26 (trans (monotonicity a!14 a!15)
                   (trans (monotonicity a!21 a!22) (rewrite a!24) a!25)
                   (= (or (=> L2_tr1 a!3) |L2#level_6!435|) a!23)))
      (a!52 (mp (asserted (=> L2_tr0 a!40))
                (trans a!45 a!51 (= (=> L2_tr0 a!40) a!49))
                a!49))
      (a!62 (unit-resolution (def-axiom (or a!54 (= L2_5_n 0)))
                             a!61
                             (= L2_5_n 0)))
      (a!65 (unit-resolution (def-axiom (or a!54 (= L1_2_0 L2_2_n)))
                             a!61
                             (= L1_2_0 L2_2_n)))
      (a!72 (unit-resolution (def-axiom (or a!54 (= L1_4_0 L2_4_n)))
                             a!61
                             (= L1_4_0 L2_4_n)))
      (a!76 (unit-resolution (def-axiom a!75)
                             a!61
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!80 (symm (unit-resolution a!79
                                   a!61
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!83 (symm (unit-resolution a!82
                                   a!61
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!89 (symm (unit-resolution a!88
                                   a!61
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!92 (symm (unit-resolution a!91
                                   a!61
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!100 (unit-resolution (def-axiom (or a!54 (= L1_0_0 L2_0_n)))
                              a!61
                              (= L1_0_0 L2_0_n))))
(let ((a!27 (mp (asserted (or (=> L2_tr1 a!3) |L2#level_6!435|)) a!26 a!23))
      (a!66 (th-lemma (symm a!65 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!67 (th-lemma (symm a!65 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!73 (th-lemma (symm a!72 (= L2_4_n L1_4_0))
                      (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!74 (th-lemma (symm a!72 (= L2_4_n L1_4_0))
                      (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!81 (trans (unit-resolution a!78
                                    a!61
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!80
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!90 (trans (unit-resolution a!87
                                    a!61
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!89
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!101 (th-lemma (symm a!100 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!102 (th-lemma (symm a!100 (= L2_0_n L1_0_0))
                       (>= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!77 (th-lemma a!74 a!76 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!84 (th-lemma (trans a!81 a!83 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!93 (th-lemma (trans a!90 a!92 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!105 (unit-resolution a!52
                              (th-lemma (th-lemma a!62 (>= L2_5_n 0))
                                        a!64
                                        a!66
                                        (not (<= L1_2_0 0)))
                              (th-lemma a!67
                                        a!69
                                        (th-lemma a!62 (<= L2_5_n 0))
                                        (<= L1_2_0 1))
                              (hypothesis L2_tr0)
                              (th-lemma (th-lemma a!62 (>= L2_5_n 0))
                                        a!71
                                        a!73
                                        (not (<= L1_4_0 1)))
                              a!77
                              (th-lemma (th-lemma a!84 a!86 a!93 a!94) a!95)
                              (th-lemma (th-lemma a!62 (>= L2_5_n 0))
                                        (lemma (th-lemma a!96 a!98 false) a!99)
                                        a!101
                                        (not (<= L1_0_0 0)))
                              (th-lemma a!102
                                        a!104
                                        (th-lemma a!62 (<= L2_5_n 0))
                                        (<= L1_0_0 1))
                              false)))
(let ((a!106 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!105 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!107 (unit-resolution (mp a!37 a!38 (or (not L2_tr1) (not a!29)))
                              a!106
                              (not a!29))))
(let ((a!108 (unit-resolution (def-axiom (or a!29 (= L2_0_0 L2_0_n)))
                              a!107
                              (= L2_0_0 L2_0_n)))
      (a!111 (unit-resolution (def-axiom (or a!29 (= L2_2_0 L2_2_n)))
                              a!107
                              (= L2_2_0 L2_2_n)))
      (a!122 (trans (unit-resolution a!120
                                     a!107
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!121
                                     a!107
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!126 (symm (unit-resolution a!125
                                    a!107
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!130 (trans (unit-resolution a!128
                                     a!107
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!129
                                     a!107
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!134 (symm (unit-resolution a!133
                                    a!107
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!138 (unit-resolution (def-axiom a!137)
                              a!107
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!145 (unit-resolution (def-axiom (or a!29 (= L2_4_0 L2_4_n)))
                              a!107
                              (= L2_4_0 L2_4_n))))
(let ((a!109 (th-lemma a!108 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!112 (th-lemma a!111 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!124 (trans a!122
                    (unit-resolution a!123
                                     a!107
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!132 (trans a!130
                    (unit-resolution a!131
                                     a!107
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!136 (th-lemma a!108 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!139 (th-lemma a!138 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!141 (th-lemma a!111 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!142 (th-lemma a!138 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!146 (th-lemma a!145 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!113 (th-lemma a!109 a!110 a!112 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!127 (th-lemma (trans a!124 a!126 (= L2_3_0 L2_3_n))
                       (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!135 (th-lemma (trans a!132 a!134 (= L2_1_0 L2_1_n))
                       (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!143 (th-lemma a!141 a!69 a!142 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
  (unit-resolution a!27
                   a!113
                   (unit-resolution (lemma (th-lemma a!114
                                                     a!115
                                                     a!86
                                                     a!116
                                                     false)
                                           (or a!117 a!118 a!119))
                                    a!127
                                    a!135
                                    a!117)
                   (asserted (not |L2#level_6!435|))
                   a!106
                   (th-lemma a!136
                             (lemma (th-lemma a!96 a!98 false) a!99)
                             a!139
                             a!140)
                   a!143
                   (th-lemma a!141 (th-lemma a!69 a!71 a!144) a!146 a!147)
                   false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 6 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 7 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 7 depth: 8
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!4 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!5 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!6 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!7 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!8 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!9 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
              (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!15 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!16 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!17 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!18 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!27 (hypothesis (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!28 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!31 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!32 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!33 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!34 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!40 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!42 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!43 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!48 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!57 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!59 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!60 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!61 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!67 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!71 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!80 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!84 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!93 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!102 (not (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!103 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!105 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!114 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!115 (hypothesis (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!118 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!119 (hypothesis (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!136 (not (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!142 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!145 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!10 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
                a!1
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!7
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!19 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                a!1
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!22 (or (not L2_tr1)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)
                a!1
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_7!438|))
      (a!29 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!28
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!35 (monotonicity (rewrite a!33) (= (not (<= L2_4_n L2_5_0)) a!34)))
      (a!36 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!34))
      (a!41 (or (not (<= L1_0_0 0))
                a!40
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)))
      (a!44 (or (not (<= L1_0_0 0))
                a!40
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!49 (or (not (<= L1_0_0 0))
                a!40
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!52 (or (not L2_tr0)
                (not (<= L1_0_0 0))
                a!40
                (not (>= L1_0_0 0))
                (<= L1_4_0 0)
                (not (>= L1_2_0 0))
                (not (<= L1_2_0 0))
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                |L2#level_7!438|))
      (a!58 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!57))
      (a!62 (monotonicity (monotonicity (rewrite a!60) (= a!59 a!61))
                          (= (or (not L2_tr0) a!59) (or (not L2_tr0) a!61))))
      (a!68 (unit-resolution (asserted (or (not spacer_proxy!3) a!67))
                             (asserted spacer_proxy!3)
                             a!67))
      (a!72 (unit-resolution (asserted a!71)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!81 (unit-resolution (asserted a!80)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!85 (unit-resolution (asserted a!84)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!94 (unit-resolution (asserted (or (not spacer_proxy!14) a!93))
                             (asserted spacer_proxy!14)
                             a!93))
      (a!106 (unit-resolution (asserted a!105)
                              (asserted spacer_proxy!2)
                              (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!11 (monotonicity (monotonicity (monotonicity a!4 a!5)
                                        (monotonicity (monotonicity a!4 a!6)
                                                      (= a!2 a!7))
                                        (monotonicity a!8 a!9)
                                        (= a!3 a!10))
                          (= (=> L2_tr1 a!3) (=> L2_tr1 a!10))))
      (a!12 (rewrite (= (=> L2_tr1 a!10) (or (not L2_tr1) a!10))))
      (a!14 (= (or (=> L2_tr1 a!3) |L2#level_7!438|)
               (or (or (not L2_tr1) a!10) |L2#level_7!438|)))
      (a!20 (monotonicity (monotonicity (rewrite a!15)
                                        (monotonicity (rewrite a!16)
                                                      (= a!7 a!17))
                                        (rewrite a!18)
                                        (= a!10 a!19))
                          (= (or (not L2_tr1) a!10) (or (not L2_tr1) a!19))))
      (a!21 (= (or (or (not L2_tr1) a!10) |L2#level_7!438|)
               (or (or (not L2_tr1) a!19) |L2#level_7!438|)))
      (a!23 (= (or (or (not L2_tr1) a!19) |L2#level_7!438|) a!22))
      (a!24 (= (or (or (not L2_tr1) a!10) |L2#level_7!438|) a!22))
      (a!30 (or a!29 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!37 (monotonicity (monotonicity (rewrite a!32) a!35 (= a!31 a!36))
                          (= (or (not L2_tr1) a!31) (or (not L2_tr1) a!36))))
      (a!39 (monotonicity (rewrite (= a!36 (not a!29)))
                          (= (or (not L2_tr1) a!36)
                             (or (not L2_tr1) (not a!29)))))
      (a!45 (rewrite (= (=> L2_tr0 a!44) (or (not L2_tr0) a!44))))
      (a!47 (= (or (=> L2_tr0 a!41) |L2#level_7!438|)
               (or (or (not L2_tr0) a!44) |L2#level_7!438|)))
      (a!50 (monotonicity (monotonicity (rewrite a!48) (= a!44 a!49))
                          (= (or (not L2_tr0) a!44) (or (not L2_tr0) a!49))))
      (a!51 (= (or (or (not L2_tr0) a!44) |L2#level_7!438|)
               (or (or (not L2_tr0) a!49) |L2#level_7!438|)))
      (a!53 (= (or (or (not L2_tr0) a!49) |L2#level_7!438|) a!52))
      (a!54 (= (or (or (not L2_tr0) a!44) |L2#level_7!438|) a!52))
      (a!63 (mp (asserted (or (not L2_tr0) a!59)) a!62 (or (not L2_tr0) a!61)))
      (a!64 (monotonicity (rewrite (= a!61 (not a!58)))
                          (= (or (not L2_tr0) a!61)
                             (or (not L2_tr0) (not a!58)))))
      (a!76 (or a!58 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!86 (def-axiom (or a!58 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!87 (def-axiom (or a!58
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!90 (def-axiom (or a!58 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!95 (def-axiom (or a!58 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!96 (def-axiom (or a!58
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!99 (def-axiom (or a!58 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!120 (def-axiom (or a!29 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!121 (def-axiom (or a!29
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!123 (def-axiom (or a!29
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!125 (def-axiom (or a!29 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!128 (def-axiom (or a!29 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!129 (def-axiom (or a!29
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!131 (def-axiom (or a!29
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!133 (def-axiom (or a!29 (= L2_3_n (select aux!17_n L2_2_n))))))
(let ((a!13 (trans a!11 a!12 (= (=> L2_tr1 a!3) (or (not L2_tr1) a!10))))
      (a!38 (mp (asserted (or (not L2_tr1) a!31)) a!37 (or (not L2_tr1) a!36)))
      (a!46 (trans (monotonicity (monotonicity (monotonicity a!42 a!43)
                                               (= a!41 a!44))
                                 (= (=> L2_tr0 a!41) (=> L2_tr0 a!44)))
                   a!45
                   (= (=> L2_tr0 a!41) (or (not L2_tr0) a!44))))
      (a!65 (unit-resolution (mp a!63 a!64 (or (not L2_tr0) (not a!58)))
                             (hypothesis L2_tr0)
                             (not a!58))))
(let ((a!25 (trans (monotonicity a!13 a!14)
                   (trans (monotonicity a!20 a!21) (rewrite a!23) a!24)
                   (= (or (=> L2_tr1 a!3) |L2#level_7!438|) a!22)))
      (a!55 (trans (monotonicity a!46 a!47)
                   (trans (monotonicity a!50 a!51) (rewrite a!53) a!54)
                   (= (or (=> L2_tr0 a!41) |L2#level_7!438|) a!52)))
      (a!66 (unit-resolution (def-axiom (or a!58 (= L2_5_n 0)))
                             a!65
                             (= L2_5_n 0)))
      (a!69 (unit-resolution (def-axiom (or a!58 (= L1_4_0 L2_4_n)))
                             a!65
                             (= L1_4_0 L2_4_n)))
      (a!73 (unit-resolution (def-axiom (or a!58 (= L1_0_0 L2_0_n)))
                             a!65
                             (= L1_0_0 L2_0_n)))
      (a!77 (unit-resolution (def-axiom a!76)
                             a!65
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!82 (unit-resolution (def-axiom (or a!58 (= L1_2_0 L2_2_n)))
                             a!65
                             (= L1_2_0 L2_2_n)))
      (a!88 (symm (unit-resolution a!87
                                   a!65
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!91 (symm (unit-resolution a!90
                                   a!65
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!97 (symm (unit-resolution a!96
                                   a!65
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!100 (symm (unit-resolution a!99
                                    a!65
                                    (= L1_3_0 (select aux!14_n L2_2_n)))
                   (= (select aux!14_n L2_2_n) L1_3_0))))
(let ((a!26 (mp (asserted (or (=> L2_tr1 a!3) |L2#level_7!438|)) a!25 a!22))
      (a!56 (mp (asserted (or (=> L2_tr0 a!41) |L2#level_7!438|)) a!55 a!52))
      (a!70 (th-lemma (symm a!69 (= L2_4_n L1_4_0))
                      (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!74 (th-lemma (symm a!73 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!75 (th-lemma (symm a!69 (= L2_4_n L1_4_0))
                      (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!79 (th-lemma (symm a!73 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!83 (th-lemma (symm a!82 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!89 (trans (unit-resolution a!86
                                    a!65
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!88
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!98 (trans (unit-resolution a!95
                                    a!65
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!97
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!104 (th-lemma (symm a!82 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0))))
(let ((a!78 (th-lemma a!75 a!77 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!92 (th-lemma (trans a!89 a!91 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!101 (th-lemma (trans a!98 a!100 (= L2_3_n L1_3_0))
                       (>= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!107 (unit-resolution a!56
                              (th-lemma (th-lemma a!66 (>= L2_5_n 0))
                                        a!68
                                        a!70
                                        (not (<= L1_4_0 0)))
                              (th-lemma (th-lemma a!66 (>= L2_5_n 0))
                                        a!72
                                        a!74
                                        (>= L1_0_0 0))
                              (hypothesis L2_tr0)
                              a!78
                              (th-lemma a!79
                                        a!81
                                        (th-lemma a!66 (<= L2_5_n 0))
                                        (<= L1_0_0 0))
                              (th-lemma a!83
                                        a!85
                                        (th-lemma a!66 (<= L2_5_n 0))
                                        (<= L1_2_0 0))
                              (th-lemma (th-lemma a!92 a!94 a!101 a!102) a!103)
                              (th-lemma a!104
                                        a!106
                                        (th-lemma a!66 (>= L2_5_n 0))
                                        (>= L1_2_0 0))
                              (asserted (not |L2#level_7!438|))
                              false)))
(let ((a!108 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!107 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!109 (unit-resolution (mp a!38 a!39 (or (not L2_tr1) (not a!29)))
                              a!108
                              (not a!29))))
(let ((a!110 (unit-resolution (def-axiom a!30)
                              a!109
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!112 (unit-resolution (def-axiom (or a!29 (= L2_0_0 L2_0_n)))
                              a!109
                              (= L2_0_0 L2_0_n)))
      (a!116 (unit-resolution (def-axiom (or a!29 (= L2_2_0 L2_2_n)))
                              a!109
                              (= L2_2_0 L2_2_n)))
      (a!122 (trans (unit-resolution a!120
                                     a!109
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!121
                                     a!109
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!126 (symm (unit-resolution a!125
                                    a!109
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!130 (trans (unit-resolution a!128
                                     a!109
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!129
                                     a!109
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!134 (symm (unit-resolution a!133
                                    a!109
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!143 (unit-resolution (def-axiom (or a!29 (= L2_4_0 L2_4_n)))
                              a!109
                              (= L2_4_0 L2_4_n))))
(let ((a!111 (th-lemma a!110 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!113 (th-lemma a!112 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!117 (th-lemma a!116 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!124 (trans a!122
                    (unit-resolution a!123
                                     a!109
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!132 (trans a!130
                    (unit-resolution a!131
                                     a!109
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!137 (th-lemma a!112 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!138 (th-lemma a!110 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!140 (th-lemma a!116 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!144 (th-lemma a!143 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!127 (th-lemma (trans a!124 a!126 (= L2_1_0 L2_1_n))
                       (>= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!135 (th-lemma (trans a!132 a!134 (= L2_3_0 L2_3_n))
                       (<= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!139 (th-lemma a!137 a!81 a!138 (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!141 (th-lemma a!140 a!85 a!138 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1))))
  (unit-resolution a!26
                   (lemma (th-lemma a!27 a!111 a!113 a!72 false) a!114)
                   (lemma (th-lemma a!106 a!115 a!111 a!117 false) a!118)
                   a!108
                   (lemma (th-lemma a!119 a!127 a!94 a!135 false) a!136)
                   (asserted (not |L2#level_7!438|))
                   a!139
                   a!141
                   (th-lemma a!140 (th-lemma a!85 a!68 a!142) a!144 a!145)
                   false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 6
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 7 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 8 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 8 depth: 8
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not (= L2_0_0 query!0_0_n))
               (not (= L2_2_0 query!0_0_n))
               (not (= L2_4_0 query!0_1_n))
               (not (= L2_5_0 query!0_0_n))
               (not (= L2_0_1 query!0_4_n))
               (not (= L2_2_1 query!0_2_n))
               (not (= L2_4_1 query!0_1_n))
               (not (= L2_5_1 query!0_0_n))
               (not (= L2_0_2 query!0_4_n))
               (not (= L2_2_2 query!0_0_n))
               (not (= L2_4_2 query!0_1_n))
               (not (= L2_5_2 query!0_0_n))
               (not (= L2_0_3 query!0_0_n))
               (not (= L2_2_3 query!0_2_n))
               (not (= L2_4_3 query!0_1_n))
               (not (= L2_5_3 query!0_0_n))
               (not (= (select aux!10_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!4_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!7_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (not (= (select aux!9_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!6_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!5_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!8_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!3_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
               (not (= L2_1_3 (select aux!10_n query!0_0_n)))
               (not (= L2_3_3 (select aux!9_n query!0_2_n)))
               (not (= L2_3_2 (select aux!7_n query!0_0_n)))
               (not (= L2_1_2 (select aux!8_n query!0_4_n)))
               (not (= L2_1_1 (select aux!6_n query!0_4_n)))
               (not (= L2_3_1 (select aux!5_n query!0_2_n)))
               (not (= query!0_3_n (select aux!2_n query!0_2_n)))
               (not (= query!0_5_n (select aux!1_n query!0_4_n)))
               (not (= L2_1_0 (select aux!4_n query!0_0_n)))
               (not (= L2_3_0 (select aux!3_n query!0_0_n)))
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!3 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n))))
      (a!4 (= (<= query!0_1_n query!0_0_n)
              (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!5 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!17 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!18 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!19 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!21 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!22 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!23 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!24 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!25 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
               (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!26 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!27 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!28 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!34 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!35 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!36 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!37 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!38 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!61 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!64 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!65 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!67 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!68 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!74 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!75 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!84 (hypothesis (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!86 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0))))
(let ((a!2 (or a!1
               (not (= (select aux!2_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))))
      (a!6 (monotonicity (rewrite a!4)
                         (= (not (<= query!0_1_n query!0_0_n)) a!5)))
      (a!7 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                a!5))
      (a!13 (def-axiom (or a!1
                           (= (select aux!3_n query!0_0_n)
                              (select aux!2_n query!0_0_n)))))
      (a!15 (def-axiom (or a!1 (= L2_3_0 (select aux!3_n query!0_0_n)))))
      (a!20 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!18
                a!19
                (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!29 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!23
                a!26
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!39 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!35
                a!37
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!42 (or (not query!0_dummy)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!35
                a!37
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |query!0#level_8!1203|))
      (a!66 (or a!18
                a!64
                a!65
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!69 (or a!23
                a!68
                a!65
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!76 (or a!35
                a!75
                a!65
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!79 (or (not query!0_dummy)
                a!35
                a!75
                a!65
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                |query!0#level_8!1203|))
      (a!91 (def-axiom (or a!1 (= L2_1_0 (select aux!4_n query!0_0_n)))))
      (a!93 (def-axiom (or a!1
                           (= (select aux!4_n query!0_0_n)
                              (select aux!1_n query!0_0_n))))))
(let ((a!8 (monotonicity (monotonicity a!6 (= a!3 a!7))
                         (= (or (not query!0_dummy) a!3)
                            (or (not query!0_dummy) a!7))))
      (a!10 (monotonicity (rewrite (= a!7 (not a!1)))
                          (= (or (not query!0_dummy) a!7)
                             (or (not query!0_dummy) (not a!1)))))
      (a!30 (monotonicity (monotonicity (monotonicity (monotonicity a!21 a!22)
                                                      (= a!18 a!23))
                                        (monotonicity (monotonicity a!24 a!25)
                                                      (= a!19 a!26))
                                        (monotonicity a!27 a!28)
                                        (= a!20 a!29))
                          (= (=> query!0_dummy a!20) (=> query!0_dummy a!29))))
      (a!31 (rewrite (= (=> query!0_dummy a!29) (or (not query!0_dummy) a!29))))
      (a!33 (= (or (=> query!0_dummy a!20) |query!0#level_8!1203|)
               (or (or (not query!0_dummy) a!29) |query!0#level_8!1203|)))
      (a!40 (monotonicity (monotonicity (monotonicity (rewrite a!34)
                                                      (= a!23 a!35))
                                        (monotonicity (rewrite a!36)
                                                      (= a!26 a!37))
                                        (rewrite a!38)
                                        (= a!29 a!39))
                          (= (or (not query!0_dummy) a!29)
                             (or (not query!0_dummy) a!39))))
      (a!41 (= (or (or (not query!0_dummy) a!29) |query!0#level_8!1203|)
               (or (or (not query!0_dummy) a!39) |query!0#level_8!1203|)))
      (a!43 (= (or (or (not query!0_dummy) a!39) |query!0#level_8!1203|) a!42))
      (a!44 (= (or (or (not query!0_dummy) a!29) |query!0#level_8!1203|) a!42))
      (a!70 (monotonicity (monotonicity (monotonicity (monotonicity a!21 a!22)
                                                      (= a!18 a!23))
                                        (monotonicity (monotonicity a!21 a!67)
                                                      (= a!64 a!68))
                                        (= a!66 a!69))
                          (= (=> query!0_dummy a!66) (=> query!0_dummy a!69))))
      (a!71 (rewrite (= (=> query!0_dummy a!69) (or (not query!0_dummy) a!69))))
      (a!73 (= (or (=> query!0_dummy a!66) |query!0#level_8!1203|)
               (or (or (not query!0_dummy) a!69) |query!0#level_8!1203|)))
      (a!77 (monotonicity (monotonicity (monotonicity (rewrite a!34)
                                                      (= a!23 a!35))
                                        (monotonicity (rewrite a!74)
                                                      (= a!68 a!75))
                                        (= a!69 a!76))
                          (= (or (not query!0_dummy) a!69)
                             (or (not query!0_dummy) a!76))))
      (a!78 (= (or (or (not query!0_dummy) a!69) |query!0#level_8!1203|)
               (or (or (not query!0_dummy) a!76) |query!0#level_8!1203|)))
      (a!80 (= (or (or (not query!0_dummy) a!76) |query!0#level_8!1203|) a!79))
      (a!81 (= (or (or (not query!0_dummy) a!69) |query!0#level_8!1203|) a!79)))
(let ((a!9 (mp (asserted (or (not query!0_dummy) a!3))
               a!8
               (or (not query!0_dummy) a!7)))
      (a!32 (trans a!30
                   a!31
                   (= (=> query!0_dummy a!20) (or (not query!0_dummy) a!29))))
      (a!72 (trans a!70
                   a!71
                   (= (=> query!0_dummy a!66) (or (not query!0_dummy) a!69)))))
(let ((a!11 (unit-resolution (mp a!9 a!10 (or (not query!0_dummy) (not a!1)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!1)))
      (a!45 (trans (monotonicity a!32 a!33)
                   (trans (monotonicity a!40 a!41) (rewrite a!43) a!44)
                   (= (or (=> query!0_dummy a!20) |query!0#level_8!1203|) a!42)))
      (a!82 (trans (monotonicity a!72 a!73)
                   (trans (monotonicity a!77 a!78) (rewrite a!80) a!81)
                   (= (or (=> query!0_dummy a!66) |query!0#level_8!1203|) a!79))))
(let ((a!12 (unit-resolution (def-axiom a!2)
                             a!11
                             (not (= (select aux!2_n query!0_0_n)
                                     (select aux!1_n query!0_0_n)))))
      (a!14 (symm (unit-resolution a!13
                                   a!11
                                   (= (select aux!3_n query!0_0_n)
                                      (select aux!2_n query!0_0_n)))
                  (= (select aux!2_n query!0_0_n) (select aux!3_n query!0_0_n))))
      (a!16 (symm (unit-resolution a!15
                                   a!11
                                   (= L2_3_0 (select aux!3_n query!0_0_n)))
                  (= (select aux!3_n query!0_0_n) L2_3_0)))
      (a!46 (mp (asserted (or (=> query!0_dummy a!20) |query!0#level_8!1203|))
                a!45
                a!42))
      (a!47 (unit-resolution (def-axiom (or a!1 (= L2_0_0 query!0_0_n)))
                             a!11
                             (= L2_0_0 query!0_0_n)))
      (a!49 (unit-resolution (def-axiom (or a!1 (= L2_5_0 query!0_0_n)))
                             a!11
                             (= L2_5_0 query!0_0_n)))
      (a!52 (unit-resolution (def-axiom (or a!1 (= L2_2_0 query!0_0_n)))
                             a!11
                             (= L2_2_0 query!0_0_n)))
      (a!59 (unit-resolution (def-axiom (or a!1 (= L2_4_0 query!0_1_n)))
                             a!11
                             (= L2_4_0 query!0_1_n)))
      (a!83 (mp (asserted (or (=> query!0_dummy a!66) |query!0#level_8!1203|))
                a!82
                a!79)))
(let ((a!48 (th-lemma a!47 (<= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!50 (th-lemma a!49 (>= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!53 (th-lemma a!52 (>= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!54 (th-lemma a!49 (<= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!56 (th-lemma a!47 (>= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!57 (th-lemma a!52 (<= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!60 (th-lemma a!59 (>= (+ L2_4_0 (* (- 1) query!0_1_n)) 0))))
(let ((a!51 (lemma (th-lemma (hypothesis a!35) a!48 a!50 false)
                   (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!55 (lemma (th-lemma (hypothesis a!17) a!53 a!54 false)
                   (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!58 (th-lemma a!56 a!57 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!62 (th-lemma a!57
                      a!60
                      (unit-resolution (def-axiom (or a!1 a!5)) a!11 a!5)
                      a!61))
      (a!85 (th-lemma a!60
                      a!84
                      (unit-resolution (def-axiom (or a!1 a!5)) a!11 a!5)
                      a!54
                      false))
      (a!87 (lemma (th-lemma (hypothesis a!65) a!57 a!50 false)
                   (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!88 (lemma (th-lemma (hypothesis a!75) a!56 a!54 false)
                   (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0))))
(let ((a!63 (unit-resolution a!46
                             a!51
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!55
                             a!58
                             a!62
                             (asserted (not |query!0#level_8!1203|))
                             (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!89 (unit-resolution a!83
                             (lemma a!85 a!86)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!51
                             a!87
                             a!55
                             a!88
                             (asserted (not |query!0#level_8!1203|))
                             (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!90 (trans (trans a!14 a!16 (= (select aux!2_n query!0_0_n) L2_3_0))
                   (symm (th-lemma a!63 a!89 (= L2_1_0 L2_3_0))
                         (= L2_3_0 L2_1_0))
                   (= (select aux!2_n query!0_0_n) L2_1_0))))
(let ((a!92 (trans a!90
                   (unit-resolution a!91
                                    a!11
                                    (= L2_1_0 (select aux!4_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!4_n query!0_0_n)))))
(let ((a!94 (trans a!92
                   (unit-resolution a!93
                                    a!11
                                    (= (select aux!4_n query!0_0_n)
                                       (select aux!1_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))))
  (unit-resolution a!12 a!94 false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 8 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_8!1203|)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2
      |L1#level_4!141|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr0 a!3) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_5!144|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0))))
(let ((a!3 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_2_1 1)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_5!144|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!3 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 2))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!3 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 2))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!3 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 2))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (or (=> L2_tr1 a!4) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!5 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!5 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!5 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2
      |L1#level_5!144|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr0 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_6!436|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0))))
(let ((a!3 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_2_1 1)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_6!436|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!5 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!5 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!5 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2
      |L1#level_6!436|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr0 a!3) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_7!439|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0))))
(let ((a!3 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_2_1 1)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_7!439|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!4 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!5 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!4 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!5 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!4 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!5 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (or (=> L2_tr1 a!5) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      a!4
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3
               a!4)))
  (or (=> L2_tr1 a!5) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!5 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!5 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!5 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2
      |L1#level_7!439|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr0 a!3) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_8!855|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0))))
(let ((a!3 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_2_1 1)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_8!855|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2
      |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!5 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!5 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!5 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2
      |L1#level_8!855|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr0 a!3) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_9!1737|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0))))
(let ((a!3 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_2_1 1)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_9!1737|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_9!1736|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_10!2192|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2
      |L2#level_9!1736|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_10!2192|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      |L2#level_9!1736|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_10!2192|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_9!1736|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_10!2192|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_9!1736|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!5 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!5 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!5 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_10!2192|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_9!1736|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_10!2192|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_9!1736|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_10!2192|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_9!1736|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_10!2194|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_10!2192|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2
      |L1#level_9!1737|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr0 a!3) |L2#level_10!2192|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_10!2193|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0))))
(let ((a!3 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_2_1 1)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_10!2193|)))
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 10 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_10!2192|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_11!2195|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 10 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2
      |L2#level_10!2192|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               a!1
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_11!2195|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 10 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      |L2#level_10!2192|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_11!2195|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 10 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      |L2#level_10!2192|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (or (=> L2_tr1 a!3) |L2#level_11!2195|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 10 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_10!2192|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!5 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!5 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!5 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!5) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!5) |L2#level_11!2195|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 10 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_10!2192|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_11!2195|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 10 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_10!2192|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_11!2195|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 10 L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_10!2192|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_11!2647|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_11!2195|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 10 L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2
      |L1#level_10!2193|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L2_tr0 a!3) |L2#level_11!2195|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_11!2196|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0))))
(let ((a!3 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_2_1 1)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
               a!1
               a!2)))
  (or (=> L1_tr1 a!3) |L1#level_11!2196|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      a!3
      a!4
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               a!3
               a!4
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (=> L2_tr1 a!5)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               a!1
               a!2)))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3)))
  (=> L2_tr1 a!4)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!5 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!5 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!5 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!5 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!5)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!4)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0))))
  (or (= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= L1_2_n 1)
      (<= (+ L1_5_n (* (- 1) L1_2_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (=> L2_tr0 a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!3 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= L1_2_0 1)
               (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               a!1
               a!2)))
  (=> L1_tr1 a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0))))
(let ((a!3 (or (= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= L1_2_1 1)
               (<= (+ L1_5_1 (* (- 1) L1_2_1)) 0)
               a!1
               a!2)))
  (=> L1_tr1 a!3)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 9 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 9 depth: 9
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |query!0#level_6!437| () Bool
  true)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_2_2 () Int
  (- 9159))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun |query!0#level_10!2194| () Bool
  false)
(define-fun query!0_5_n () Int
  2578)
(define-fun L2_5_0 () Int
  (- 9159))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  (- 9155))
(define-fun L2_1_3 () Int
  (- 1))
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!2654))
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!2658))
(define-fun query!0_0_n () Int
  (- 9159))
(define-fun L2_3_3 () Int
  1666)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_2_3 () Int
  (- 9156))
(define-fun L2_1_2 () Int
  2578)
(define-fun |query!0#level_11!2647| () Bool
  false)
(define-fun query!0_3_n () Int
  1666)
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!2657))
(define-fun |query!0#level_9!1735| () Bool
  false)
(define-fun L2_3_1 () Int
  1666)
(define-fun L2_5_1 () Int
  (- 9159))
(define-fun query!0_2_n () Int
  (- 9156))
(define-fun L2_5_2 () Int
  (- 9159))
(define-fun |query!0#level_8!1203| () Bool
  true)
(define-fun L2_0_2 () Int
  (- 9155))
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!2656))
(define-fun |query!0#level_12!2648| () Bool
  false)
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!2652))
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  0)
(define-fun |query!0#level_4!80| () Bool
  true)
(define-fun |query!0#level_3!68| () Bool
  true)
(define-fun L2_0_3 () Int
  (- 9159))
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 9159))
(define-fun |query!0#level_7!853| () Bool
  true)
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!2653))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  true)
(define-fun query!0_4_n () Int
  (- 9155))
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  2578)
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!2655))
(define-fun L2_0_0 () Int
  (- 9159))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!2660))
(define-fun L2_4_1 () Int
  0)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!2651))
(define-fun L2_2_0 () Int
  (- 9159))
(define-fun |vsolver#0| () Bool
  true)
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!2659))
(define-fun L2_3_2 () Int
  0)
(define-fun L2_2_1 () Int
  (- 9156))
(define-fun L2_4_0 () Int
  0)
(define-fun L2_1_0 () Int
  (- 1))
(define-fun k!2655 ((x!0 Int)) Int
  (ite (= x!0 (- 9156)) 1666
  (ite (= x!0 (- 9159)) 0
    1666)))
(define-fun k!2652 ((x!0 Int)) Int
  (ite (= x!0 (- 9159)) (- 1)
  (ite (= x!0 (- 9155)) 2578
    (- 1))))
(define-fun k!2660 ((x!0 Int)) Int
  (ite (= x!0 (- 9159)) 0
    0))
(define-fun k!2657 ((x!0 Int)) Int
  (ite (= x!0 (- 9155)) 2578
    2578))
(define-fun k!2654 ((x!0 Int)) Int
  (ite (= x!0 (- 9159)) 0
    0))
(define-fun k!2651 ((x!0 Int)) Int
  (ite (= x!0 (- 9159)) (- 1)
    (- 1)))
(define-fun k!2659 ((x!0 Int)) Int
  (ite (= x!0 (- 9155)) 2578
    2578))
(define-fun k!2656 ((x!0 Int)) Int
  (ite (= x!0 (- 9156)) 1666
    1666))
(define-fun k!2653 ((x!0 Int)) Int
  (ite (= x!0 (- 9159)) (- 1)
    (- 1)))
(define-fun k!2658 ((x!0 Int)) Int
  (ite (= x!0 (- 9156)) 1666
    1666))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 8 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 8 depth: 9
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2676))
(define-fun spacer_proxy!169 () Bool
  false)
(define-fun spacer_proxy!79 () Bool
  false)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2678))
(define-fun L2_0_n () Int
  0)
(define-fun spacer_proxy!84 () Bool
  false)
(define-fun spacer_proxy!82 () Bool
  false)
(define-fun spacer_proxy!42 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!183 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!190 () Bool
  false)
(define-fun spacer_proxy!208 () Bool
  false)
(define-fun spacer_proxy!40 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun spacer_proxy!184 () Bool
  false)
(define-fun spacer_proxy!57 () Bool
  false)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun spacer_proxy!41 () Bool
  false)
(define-fun spacer_proxy!180 () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  true)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!185 () Bool
  false)
(define-fun spacer_proxy!131 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun spacer_proxy!132 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  true)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!133 () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun L2_0_0 () Int
  0)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2673))
(define-fun spacer_proxy!83 () Bool
  false)
(define-fun spacer_proxy!43 () Bool
  false)
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  0)
(define-fun L2_3_n () Int
  4386)
(define-fun spacer_proxy!45 () Bool
  false)
(define-fun spacer_proxy!58 () Bool
  false)
(define-fun L2_2_0 () Int
  0)
(define-fun spacer_proxy!80 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  4385)
(define-fun L2_tr0 () Bool
  false)
(define-fun spacer_proxy!111 () Bool
  false)
(define-fun spacer_proxy!168 () Bool
  false)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun spacer_proxy!127 () Bool
  false)
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!179 () Bool
  false)
(define-fun spacer_proxy!97 () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun spacer_proxy!128 () Bool
  false)
(define-fun L2_4_n () Int
  4)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun spacer_proxy!182 () Bool
  false)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!96 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2677))
(define-fun |L2#level_5!143| () Bool
  true)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun spacer_proxy!181 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  4385)
(define-fun spacer_proxy!130 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2675))
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2674))
(define-fun L2_3_0 () Int
  4386)
(define-fun spacer_proxy!129 () Bool
  false)
(define-fun |L2#level_12!2649| () Bool
  false)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  false)
(define-fun spacer_proxy!46 () Bool
  false)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun spacer_proxy!86 () Bool
  false)
(define-fun spacer_proxy!81 () Bool
  false)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun spacer_proxy!178 () Bool
  false)
(define-fun L2_4_0 () Int
  4)
(define-fun k!2675 ((x!0 Int)) Int
  (ite (= x!0 0) 4386
    4386))
(define-fun k!2676 ((x!0 Int)) Int
  (ite (= x!0 0) 4386
    4386))
(define-fun k!2673 ((x!0 Int)) Int
  (ite (= x!0 0) 4385
    4385))
(define-fun k!2677 ((x!0 Int)) Int
  (ite (= x!0 0) 4385
    4385))
(define-fun k!2674 ((x!0 Int)) Int
  (ite (= x!0 0) 4385
    4385))
(define-fun k!2678 ((x!0 Int)) Int
  (ite (= x!0 0) 4386
    4386))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0))))))
  (and a!1
       (not (<= L2_4_0 L2_5_0))
       a!2
       (= (+ L2_2_0 (* (- 1) L2_5_0)) 1)
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 7 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 7 depth: 9
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!201 () Bool
  false)
(define-fun L2_4_0 () Int
  4)
(define-fun spacer_proxy!118 () Bool
  false)
(define-fun spacer_proxy!126 () Bool
  false)
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2688))
(define-fun L2_1_0 () Int
  4385)
(define-fun spacer_proxy!116 () Bool
  false)
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun spacer_proxy!172 () Bool
  false)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!114 () Bool
  false)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!169 () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun L2_4_n () Int
  4)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun spacer_proxy!77 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2690))
(define-fun L2_0_n () Int
  1)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun spacer_proxy!25 () Bool
  true)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!123 () Bool
  false)
(define-fun spacer_proxy!171 () Bool
  false)
(define-fun spacer_proxy!21 () Bool
  true)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun spacer_proxy!174 () Bool
  false)
(define-fun spacer_proxy!23 () Bool
  true)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2689))
(define-fun |L2#level_5!143| () Bool
  true)
(define-fun spacer_proxy!175 () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  false)
(define-fun spacer_proxy!190 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!119 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun spacer_proxy!173 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun spacer_proxy!125 () Bool
  false)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun spacer_proxy!120 () Bool
  false)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun L2_1_n () Int
  4385)
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2686))
(define-fun spacer_proxy!78 () Bool
  false)
(define-fun spacer_proxy!24 () Bool
  true)
(define-fun spacer_proxy!124 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2687))
(define-fun L2_3_0 () Int
  4386)
(define-fun |L2#level_12!2649| () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  true)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!144 () Bool
  false)
(define-fun spacer_proxy!170 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun spacer_proxy!22 () Bool
  true)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!177 () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun spacer_proxy!195 () Bool
  false)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun L2_0_0 () Int
  1)
(define-fun spacer_proxy!121 () Bool
  false)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2685))
(define-fun spacer_proxy!73 () Bool
  false)
(define-fun L2_2_n () Int
  1)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_3_n () Int
  4386)
(define-fun L2_2_0 () Int
  1)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!122 () Bool
  false)
(define-fun L2_tr0 () Bool
  false)
(define-fun spacer_proxy!168 () Bool
  false)
(define-fun spacer_proxy!176 () Bool
  false)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2687 ((x!0 Int)) Int
  (ite (= x!0 1) 4386
    4386))
(define-fun k!2688 ((x!0 Int)) Int
  (ite (= x!0 1) 4386
    4386))
(define-fun k!2685 ((x!0 Int)) Int
  (ite (= x!0 1) 4385
    4385))
(define-fun k!2689 ((x!0 Int)) Int
  (ite (= x!0 1) 4385
    4385))
(define-fun k!2686 ((x!0 Int)) Int
  (ite (= x!0 1) 4385
    4385))
(define-fun k!2690 ((x!0 Int)) Int
  (ite (= x!0 1) 4386
    4386))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and (not (<= L2_4_n L2_5_0))
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0)))))
      (a!2 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
       (not (<= L2_4_0 L2_5_0))
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 2)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 9
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun spacer_proxy!74 () Bool
  true)
(define-fun spacer_proxy!118 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2700))
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun spacer_proxy!116 () Bool
  false)
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!114 () Bool
  false)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  false)
(define-fun spacer_proxy!164 () Bool
  false)
(define-fun L2_4_n () Int
  4)
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun spacer_proxy!166 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2702))
(define-fun L2_0_n () Int
  2)
(define-fun spacer_proxy!167 () Bool
  false)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!162 () Bool
  false)
(define-fun spacer_proxy!71 () Bool
  true)
(define-fun spacer_proxy!21 () Bool
  false)
(define-fun spacer_proxy!72 () Bool
  true)
(define-fun spacer_proxy!110 () Bool
  false)
(define-fun spacer_proxy!174 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2701))
(define-fun |L2#level_5!143| () Bool
  true)
(define-fun spacer_proxy!190 () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!75 () Bool
  true)
(define-fun spacer_proxy!165 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!163 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun spacer_proxy!125 () Bool
  false)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun L2_1_n () Int
  4385)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2698))
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2699))
(define-fun L2_3_0 () Int
  4386)
(define-fun spacer_proxy!24 () Bool
  false)
(define-fun |L2#level_12!2649| () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun spacer_proxy!195 () Bool
  false)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun L2_0_0 () Int
  2)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2697))
(define-fun spacer_proxy!73 () Bool
  true)
(define-fun L2_2_n () Int
  2)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_3_n () Int
  4386)
(define-fun L2_2_0 () Int
  2)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  4385)
(define-fun L2_tr0 () Bool
  false)
(define-fun L2_4_0 () Int
  4)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2699 ((x!0 Int)) Int
  (ite (= x!0 2) 4386
    4386))
(define-fun k!2700 ((x!0 Int)) Int
  (ite (= x!0 2) 4386
    4386))
(define-fun k!2697 ((x!0 Int)) Int
  (ite (= x!0 2) 4385
    4385))
(define-fun k!2701 ((x!0 Int)) Int
  (ite (= x!0 2) 4385
    4385))
(define-fun k!2698 ((x!0 Int)) Int
  (ite (= x!0 2) 4385
    4385))
(define-fun k!2702 ((x!0 Int)) Int
  (ite (= x!0 2) 4386
    4386))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (not (<= L2_4_n L2_5_0))
       a!1
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!2
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
Projected Implicant
(let ((a!1 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0))))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 3)
       (not (<= L2_4_0 L2_5_0))
       a!1
       a!2
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 9
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L1_ext!1380_0)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun L2_4_0 () Int
  4)
(define-fun spacer_proxy!74 () Bool
  false)
(define-fun spacer_proxy!118 () Bool
  false)
(define-fun aux!19_n () (Array Int Int)
  (_ as-array k!2712))
(define-fun spacer_proxy!117 () Bool
  false)
(define-fun spacer_proxy!116 () Bool
  false)
(define-fun |L2#level_4!81| () Bool
  true)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun spacer_proxy!114 () Bool
  false)
(define-fun |L2#level_10!2192| () Bool
  false)
(define-fun spacer_proxy!113 () Bool
  true)
(define-fun L2_4_n () Int
  4)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun spacer_proxy!76 () Bool
  false)
(define-fun spacer_proxy!30 () Bool
  false)
(define-fun spacer_proxy!31 () Bool
  false)
(define-fun |L2#level_2!63| () Bool
  true)
(define-fun aux!17_n () (Array Int Int)
  (_ as-array k!2714))
(define-fun L2_0_n () Int
  3)
(define-fun spacer_proxy!51 () Bool
  false)
(define-fun spacer_proxy!32 () Bool
  false)
(define-fun spacer_proxy!44 () Bool
  false)
(define-fun spacer_proxy!85 () Bool
  false)
(define-fun spacer_proxy!13 () Bool
  false)
(define-fun |L2#level_3!79| () Bool
  true)
(define-fun spacer_proxy!72 () Bool
  false)
(define-fun spacer_proxy!21 () Bool
  false)
(define-fun spacer_proxy!110 () Bool
  true)
(define-fun spacer_proxy!112 () Bool
  true)
(define-fun spacer_proxy!174 () Bool
  false)
(define-fun aux!21_n () (Array Int Int)
  (_ as-array k!2713))
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun spacer_proxy!190 () Bool
  false)
(define-fun L2_tr1 () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  false)
(define-fun spacer_proxy!8 () Bool
  false)
(define-fun spacer_proxy!14 () Bool
  false)
(define-fun spacer_proxy!11 () Bool
  false)
(define-fun L1_ext!1380_0 () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun spacer_proxy!125 () Bool
  false)
(define-fun spacer_proxy!48 () Bool
  false)
(define-fun L2_1_n () Int
  4385)
(define-fun |L2#level_9!1736| () Bool
  false)
(define-fun aux!16_n () (Array Int Int)
  (_ as-array k!2710))
(define-fun spacer_proxy!6 () Bool
  false)
(define-fun aux!20_n () (Array Int Int)
  (_ as-array k!2711))
(define-fun L2_3_0 () Int
  4386)
(define-fun spacer_proxy!24 () Bool
  false)
(define-fun |L2#level_12!2649| () Bool
  false)
(define-fun |L2#level_6!435| () Bool
  false)
(define-fun spacer_proxy!29 () Bool
  false)
(define-fun spacer_proxy!88 () Bool
  false)
(define-fun spacer_proxy!12 () Bool
  false)
(define-fun L2_5_n () Int
  0)
(define-fun |L2#level_7!438| () Bool
  false)
(define-fun |L2#level_8!854| () Bool
  false)
(define-fun spacer_proxy!10 () Bool
  false)
(define-fun spacer_proxy!195 () Bool
  false)
(define-fun |L2#level_11!2195| () Bool
  false)
(define-fun L2_0_0 () Int
  3)
(define-fun aux!18_n () (Array Int Int)
  (_ as-array k!2709))
(define-fun L2_3_n () Int
  4386)
(define-fun L2_2_n () Int
  3)
(define-fun spacer_proxy!1 () Bool
  false)
(define-fun L2_2_0 () Int
  3)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_1_0 () Int
  4385)
(define-fun spacer_proxy!111 () Bool
  true)
(define-fun spacer_proxy!109 () Bool
  true)
(define-fun L2_tr0 () Bool
  false)
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun k!2711 ((x!0 Int)) Int
  (ite (= x!0 3) 4386
    4386))
(define-fun k!2712 ((x!0 Int)) Int
  (ite (= x!0 3) 4386
    4386))
(define-fun k!2709 ((x!0 Int)) Int
  (ite (= x!0 3) 4385
    4385))
(define-fun k!2713 ((x!0 Int)) Int
  (ite (= x!0 3) 4385
    4385))
(define-fun k!2710 ((x!0 Int)) Int
  (ite (= x!0 3) 4385
    4385))
(define-fun k!2714 ((x!0 Int)) Int
  (ite (= x!0 3) 4386
    4386))

Transition:
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
Phi:
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and (not (<= L2_4_n L2_5_0))
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)
       (= L2_0_0 L2_0_n)
       (= L2_2_0 L2_2_n)
       (= L2_4_0 L2_4_n)
       (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
       (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
       (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
       (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
       (= L2_1_0 (select aux!21_n L2_0_n))
       (= L2_3_0 (select aux!20_n L2_2_n))
       (= L2_5_n (+ 1 L2_5_0))
       (= L2_1_n (select aux!16_n L2_0_n))
       (= L2_3_n (select aux!17_n L2_2_n))
       a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_0 (* (- 1) L2_3_0)))))
      (a!2 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 4))))
  (and (= (+ L2_2_0 (* (- 1) L2_5_0)) 4)
       (not (<= L2_4_0 L2_5_0))
       (= (+ L2_0_0 (* (- 1) L2_5_0)) 4)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 4 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 4))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 4)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 4)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 4 depth: 9
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 4))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 4)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 4)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!9 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!11 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!12 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!13 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!14 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!23 (or (not spacer_proxy!225) (>= (+ L2_2_n (* (- 1) L2_5_n)) 4)))
      (a!33 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 4)))
      (a!35 (or (not spacer_proxy!224) (<= (+ L2_2_n (* (- 1) L2_5_n)) 4)))
      (a!37 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!40 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!42 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!43 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!45 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!46 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!47 (rewrite (= (+ L1_5_0 (* (- 1) L1_2_0)) (+ (* (- 1) L1_2_0) L1_5_0))))
      (a!48 (= (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!53 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!54 (= (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!63 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!66 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!67 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!68 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!79 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!80 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!81 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!82 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!84 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!85 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!96 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!97 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!105 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!108 (or (not spacer_proxy!221) (<= (+ L2_0_n (* (- 1) L2_5_n)) 4)))
      (a!112 (or (not spacer_proxy!222) (>= (+ L2_0_n (* (- 1) L2_5_n)) 4))))
(let ((a!2 (or a!1 (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!5 (or (not L2_tr1)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
               |L2#level_4!81|))
      (a!10 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!9
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!15 (monotonicity (rewrite a!13) (= (not (<= L2_4_n L2_5_0)) a!14)))
      (a!16 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!14))
      (a!24 (unit-resolution (asserted a!23)
                             (asserted spacer_proxy!225)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 4)))
      (a!34 (unit-resolution (asserted (or (not spacer_proxy!223) a!33))
                             (asserted spacer_proxy!223)
                             a!33))
      (a!36 (unit-resolution (asserted a!35)
                             (asserted spacer_proxy!224)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 4)))
      (a!44 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_2_0 1)
                (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
                a!42
                a!43))
      (a!49 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_2_0 1)
                (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
                a!42
                a!43))
      (a!55 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                a!42
                a!43))
      (a!58 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                a!42
                a!43
                |L2#level_5!143|))
      (a!64 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!63))
      (a!69 (monotonicity (monotonicity (rewrite a!67) (= a!66 a!68))
                          (= (or (not L2_tr0) a!66) (or (not L2_tr0) a!68))))
      (a!83 (monotonicity (monotonicity (monotonicity a!80 a!81) (= a!79 a!82))
                          (= (or (not spacer_proxy!0) a!79)
                             (or (not spacer_proxy!0) a!82))))
      (a!86 (monotonicity (monotonicity (rewrite a!84) (= a!82 a!85))
                          (= (or (not spacer_proxy!0) a!82)
                             (or (not spacer_proxy!0) a!85))))
      (a!109 (unit-resolution (asserted a!108)
                              (asserted spacer_proxy!221)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 4)))
      (a!113 (unit-resolution (asserted a!112)
                              (asserted spacer_proxy!222)
                              (>= (+ L2_0_n (* (- 1) L2_5_n)) 4))))
(let ((a!3 (rewrite (= (=> L2_tr1 a!2) (or (not L2_tr1) a!2))))
      (a!4 (= (or (=> L2_tr1 a!2) |L2#level_4!81|)
              (or (or (not L2_tr1) a!2) |L2#level_4!81|)))
      (a!6 (= (or (or (not L2_tr1) a!2) |L2#level_4!81|) a!5))
      (a!17 (monotonicity (monotonicity (rewrite a!12) a!15 (= a!11 a!16))
                          (= (or (not L2_tr1) a!11) (or (not L2_tr1) a!16))))
      (a!19 (monotonicity (rewrite (= a!16 (not a!10)))
                          (= (or (not L2_tr1) a!16)
                             (or (not L2_tr1) (not a!10)))))
      (a!25 (th-lemma a!24 (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!28 (or a!10 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!50 (rewrite (= (=> L2_tr0 a!49) (or (not L2_tr0) a!49))))
      (a!52 (= (or (=> L2_tr0 a!44) |L2#level_5!143|)
               (or (or (not L2_tr0) a!49) |L2#level_5!143|)))
      (a!56 (monotonicity (monotonicity (rewrite a!53)
                                        (rewrite a!54)
                                        (= a!49 a!55))
                          (= (or (not L2_tr0) a!49) (or (not L2_tr0) a!55))))
      (a!57 (= (or (or (not L2_tr0) a!49) |L2#level_5!143|)
               (or (or (not L2_tr0) a!55) |L2#level_5!143|)))
      (a!59 (= (or (or (not L2_tr0) a!55) |L2#level_5!143|) a!58))
      (a!60 (= (or (or (not L2_tr0) a!49) |L2#level_5!143|) a!58))
      (a!65 (def-axiom (or a!64 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!70 (mp (asserted (or (not L2_tr0) a!66)) a!69 (or (not L2_tr0) a!68)))
      (a!71 (monotonicity (rewrite (= a!68 (not a!64)))
                          (= (or (not L2_tr0) a!68)
                             (or (not L2_tr0) (not a!64)))))
      (a!73 (def-axiom (or a!64
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!76 (def-axiom (or a!64 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!87 (trans a!83
                   a!86
                   (= (or (not spacer_proxy!0) a!79)
                      (or (not spacer_proxy!0) a!85))))
      (a!89 (def-axiom (or a!64 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!90 (def-axiom (or a!64
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!93 (def-axiom (or a!64 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!103 (or a!64 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!110 (th-lemma a!109 a!24 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!114 (th-lemma a!113 a!36 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
(let ((a!7 (trans (monotonicity a!3 a!4)
                  (rewrite a!6)
                  (= (or (=> L2_tr1 a!2) |L2#level_4!81|) a!5)))
      (a!18 (mp (asserted (or (not L2_tr1) a!11)) a!17 (or (not L2_tr1) a!16)))
      (a!26 (th-lemma a!25 (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!51 (trans (monotonicity (monotonicity (monotonicity a!45 a!46)
                                               (monotonicity a!47 a!48)
                                               (= a!44 a!49))
                                 (= (=> L2_tr0 a!44) (=> L2_tr0 a!49)))
                   a!50
                   (= (=> L2_tr0 a!44) (or (not L2_tr0) a!49))))
      (a!72 (unit-resolution (mp a!70 a!71 (or (not L2_tr0) (not a!64)))
                             (hypothesis L2_tr0)
                             (not a!64)))
      (a!88 (mp (asserted (or (not spacer_proxy!0) a!79))
                a!87
                (or (not spacer_proxy!0) a!85))))
(let ((a!8 (mp (asserted (or (=> L2_tr1 a!2) |L2#level_4!81|)) a!7 a!5))
      (a!20 (unit-resolution (mp a!18 a!19 (or (not L2_tr1) (not a!10)))
                             (hypothesis L2_tr1)
                             (not a!10)))
      (a!27 (th-lemma a!26 (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!61 (trans (monotonicity a!51 a!52)
                   (trans (monotonicity a!56 a!57) (rewrite a!59) a!60)
                   (= (or (=> L2_tr0 a!44) |L2#level_5!143|) a!58)))
      (a!74 (symm (unit-resolution a!73
                                   a!72
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!77 (symm (unit-resolution a!76
                                   a!72
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!91 (symm (unit-resolution a!90
                                   a!72
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!94 (symm (unit-resolution a!93
                                   a!72
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!99 (unit-resolution (def-axiom (or a!64 (= L2_5_n 0)))
                             a!72
                             (= L2_5_n 0)))
      (a!100 (unit-resolution (def-axiom (or a!64 (= L1_2_0 L2_2_n)))
                              a!72
                              (= L1_2_0 L2_2_n)))
      (a!104 (unit-resolution (def-axiom a!103)
                              a!72
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!106 (unit-resolution (def-axiom (or a!64 (= L1_0_0 L2_0_n)))
                              a!72
                              (= L1_0_0 L2_0_n))))
(let ((a!21 (unit-resolution (def-axiom (or a!10 (= L2_2_0 L2_2_n)))
                             a!20
                             (= L2_2_0 L2_2_n)))
      (a!29 (unit-resolution (def-axiom a!28)
                             a!20
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!38 (unit-resolution (def-axiom (or a!10 (= L2_4_0 L2_4_n)))
                             a!20
                             (= L2_4_0 L2_4_n)))
      (a!62 (mp (asserted (or (=> L2_tr0 a!44) |L2#level_5!143|)) a!61 a!58))
      (a!75 (trans (unit-resolution a!65
                                    a!72
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!74
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!92 (trans (unit-resolution a!89
                                    a!72
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!91
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!101 (th-lemma (symm a!100 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!102 (th-lemma (symm a!100 (= L2_2_n L1_2_0))
                       (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!107 (th-lemma (symm a!106 (= L2_0_n L1_0_0))
                       (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!115 (th-lemma (symm a!106 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!22 (th-lemma a!21 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!30 (th-lemma a!29 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!32 (th-lemma a!21 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!39 (th-lemma a!38 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!78 (th-lemma (trans a!75 a!77 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!95 (th-lemma (trans a!92 a!94 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!111 (th-lemma a!107 a!110 a!101 (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!116 (th-lemma a!102 a!114 a!115 (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!31 (th-lemma a!22 a!27 a!30 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!98 (th-lemma (th-lemma a!78
                                (unit-resolution a!88
                                                 (asserted spacer_proxy!0)
                                                 a!85)
                                a!95
                                a!96)
                      a!97)))
(let ((a!41 (lemma (unit-resolution a!8
                                    a!31
                                    (th-lemma a!32
                                              (th-lemma a!34 a!36 a!37)
                                              a!39
                                              a!40)
                                    (asserted (not |L2#level_4!81|))
                                    (hypothesis L2_tr1)
                                    false)
                   (not L2_tr1)))
      (a!117 (unit-resolution a!62
                              a!98
                              (th-lemma (th-lemma a!99 (>= L2_5_n 0))
                                        a!26
                                        a!101
                                        (not (<= L1_2_0 1)))
                              (asserted (not |L2#level_5!143|))
                              (hypothesis L2_tr0)
                              (th-lemma a!102
                                        (th-lemma a!34 a!36 a!37)
                                        a!104
                                        a!105)
                              a!111
                              a!116
                              false)))
  (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                   a!41
                   (lemma a!117 (not L2_tr0))
                   (asserted (not L2_ext0_n))
                   false))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 5 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_4!81|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2)
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2)
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2)
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_5!142|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_5!143|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 5 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 5 depth: 9
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 3)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!5 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!6 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!7 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!8 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!9 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!10 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!16 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!17 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!18 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!19 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!20 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!29 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!31 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!32 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!33 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!34 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!40 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!41 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!43 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!44 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!45 (rewrite (= (+ L1_5_0 (* (- 1) L1_2_0)) (+ (* (- 1) L1_2_0) L1_5_0))))
      (a!46 (= (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
               (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)))
      (a!51 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!52 (= (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
               (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!61 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!64 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!65 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!66 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!77 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!78 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!79 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!80 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!82 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!83 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!94 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!95 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!98 (or (not spacer_proxy!113) (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!104 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 3)))
      (a!106 (or (not spacer_proxy!112) (<= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!108 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!111 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!114 (or (not spacer_proxy!109) (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!118 (or (not spacer_proxy!110) (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!147 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!154 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!157 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!11 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!6
                a!8
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!21 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!19
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!24 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!19
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_5!143|))
      (a!30 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!29
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!35 (monotonicity (rewrite a!33) (= (not (<= L2_4_n L2_5_0)) a!34)))
      (a!36 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!34))
      (a!42 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_2_0 1)
                (<= (+ L1_5_0 (* (- 1) L1_2_0)) 0)
                a!40
                a!41))
      (a!47 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_2_0 1)
                (<= (+ (* (- 1) L1_2_0) L1_5_0) 0)
                a!40
                a!41))
      (a!53 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                a!40
                a!41))
      (a!56 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_2_0 1)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                a!40
                a!41
                |L2#level_5!143|))
      (a!62 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!61))
      (a!67 (monotonicity (monotonicity (rewrite a!65) (= a!64 a!66))
                          (= (or (not L2_tr0) a!64) (or (not L2_tr0) a!66))))
      (a!81 (monotonicity (monotonicity (monotonicity a!78 a!79) (= a!77 a!80))
                          (= (or (not spacer_proxy!0) a!77)
                             (or (not spacer_proxy!0) a!80))))
      (a!84 (monotonicity (monotonicity (rewrite a!82) (= a!80 a!83))
                          (= (or (not spacer_proxy!0) a!80)
                             (or (not spacer_proxy!0) a!83))))
      (a!99 (unit-resolution (asserted a!98)
                             (asserted spacer_proxy!113)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!105 (unit-resolution (asserted (or (not spacer_proxy!111) a!104))
                              (asserted spacer_proxy!111)
                              a!104))
      (a!107 (unit-resolution (asserted a!106)
                              (asserted spacer_proxy!112)
                              (<= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!115 (unit-resolution (asserted a!114)
                              (asserted spacer_proxy!109)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!119 (unit-resolution (asserted a!118)
                              (asserted spacer_proxy!110)
                              (>= (+ L2_0_n (* (- 1) L2_5_n)) 3))))
(let ((a!12 (monotonicity (monotonicity (monotonicity (monotonicity a!4 a!5)
                                                      (= a!1 a!6))
                                        (monotonicity (monotonicity a!4 a!7)
                                                      (= a!2 a!8))
                                        (monotonicity a!9 a!10)
                                        (= a!3 a!11))
                          (= (=> L2_tr1 a!3) (=> L2_tr1 a!11))))
      (a!13 (rewrite (= (=> L2_tr1 a!11) (or (not L2_tr1) a!11))))
      (a!15 (= (or (=> L2_tr1 a!3) |L2#level_5!143|)
               (or (or (not L2_tr1) a!11) |L2#level_5!143|)))
      (a!22 (monotonicity (monotonicity (monotonicity (rewrite a!16)
                                                      (= a!6 a!17))
                                        (monotonicity (rewrite a!18)
                                                      (= a!8 a!19))
                                        (rewrite a!20)
                                        (= a!11 a!21))
                          (= (or (not L2_tr1) a!11) (or (not L2_tr1) a!21))))
      (a!23 (= (or (or (not L2_tr1) a!11) |L2#level_5!143|)
               (or (or (not L2_tr1) a!21) |L2#level_5!143|)))
      (a!25 (= (or (or (not L2_tr1) a!21) |L2#level_5!143|) a!24))
      (a!26 (= (or (or (not L2_tr1) a!11) |L2#level_5!143|) a!24))
      (a!37 (monotonicity (monotonicity (rewrite a!32) a!35 (= a!31 a!36))
                          (= (or (not L2_tr1) a!31) (or (not L2_tr1) a!36))))
      (a!39 (monotonicity (rewrite (= a!36 (not a!30)))
                          (= (or (not L2_tr1) a!36)
                             (or (not L2_tr1) (not a!30)))))
      (a!48 (rewrite (= (=> L2_tr0 a!47) (or (not L2_tr0) a!47))))
      (a!50 (= (or (=> L2_tr0 a!42) |L2#level_5!143|)
               (or (or (not L2_tr0) a!47) |L2#level_5!143|)))
      (a!54 (monotonicity (monotonicity (rewrite a!51)
                                        (rewrite a!52)
                                        (= a!47 a!53))
                          (= (or (not L2_tr0) a!47) (or (not L2_tr0) a!53))))
      (a!55 (= (or (or (not L2_tr0) a!47) |L2#level_5!143|)
               (or (or (not L2_tr0) a!53) |L2#level_5!143|)))
      (a!57 (= (or (or (not L2_tr0) a!53) |L2#level_5!143|) a!56))
      (a!58 (= (or (or (not L2_tr0) a!47) |L2#level_5!143|) a!56))
      (a!63 (def-axiom (or a!62 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!68 (mp (asserted (or (not L2_tr0) a!64)) a!67 (or (not L2_tr0) a!66)))
      (a!69 (monotonicity (rewrite (= a!66 (not a!62)))
                          (= (or (not L2_tr0) a!66)
                             (or (not L2_tr0) (not a!62)))))
      (a!71 (def-axiom (or a!62
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!74 (def-axiom (or a!62 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!85 (trans a!81
                   a!84
                   (= (or (not spacer_proxy!0) a!77)
                      (or (not spacer_proxy!0) a!83))))
      (a!87 (def-axiom (or a!62 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!88 (def-axiom (or a!62
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!91 (def-axiom (or a!62 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!100 (th-lemma a!99 (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!109 (or a!62 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!116 (th-lemma a!115 a!99 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!120 (th-lemma a!107 a!119 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!131 (def-axiom (or a!30 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!132 (def-axiom (or a!30
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!134 (def-axiom (or a!30
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!136 (def-axiom (or a!30 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!139 (def-axiom (or a!30 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!140 (def-axiom (or a!30
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!142 (def-axiom (or a!30
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!144 (def-axiom (or a!30 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!151 (or a!30 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!14 (trans a!12 a!13 (= (=> L2_tr1 a!3) (or (not L2_tr1) a!11))))
      (a!38 (mp (asserted (or (not L2_tr1) a!31)) a!37 (or (not L2_tr1) a!36)))
      (a!49 (trans (monotonicity (monotonicity (monotonicity a!43 a!44)
                                               (monotonicity a!45 a!46)
                                               (= a!42 a!47))
                                 (= (=> L2_tr0 a!42) (=> L2_tr0 a!47)))
                   a!48
                   (= (=> L2_tr0 a!42) (or (not L2_tr0) a!47))))
      (a!70 (unit-resolution (mp a!68 a!69 (or (not L2_tr0) (not a!62)))
                             (hypothesis L2_tr0)
                             (not a!62)))
      (a!86 (mp (asserted (or (not spacer_proxy!0) a!77))
                a!85
                (or (not spacer_proxy!0) a!83))))
(let ((a!27 (trans (monotonicity a!14 a!15)
                   (trans (monotonicity a!22 a!23) (rewrite a!25) a!26)
                   (= (or (=> L2_tr1 a!3) |L2#level_5!143|) a!24)))
      (a!59 (trans (monotonicity a!49 a!50)
                   (trans (monotonicity a!54 a!55) (rewrite a!57) a!58)
                   (= (or (=> L2_tr0 a!42) |L2#level_5!143|) a!56)))
      (a!72 (symm (unit-resolution a!71
                                   a!70
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!75 (symm (unit-resolution a!74
                                   a!70
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!89 (symm (unit-resolution a!88
                                   a!70
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!92 (symm (unit-resolution a!91
                                   a!70
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!97 (unit-resolution (def-axiom (or a!62 (= L2_5_n 0)))
                             a!70
                             (= L2_5_n 0)))
      (a!101 (unit-resolution (def-axiom (or a!62 (= L1_2_0 L2_2_n)))
                              a!70
                              (= L1_2_0 L2_2_n)))
      (a!110 (unit-resolution (def-axiom a!109)
                              a!70
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!112 (unit-resolution (def-axiom (or a!62 (= L1_0_0 L2_0_n)))
                              a!70
                              (= L1_0_0 L2_0_n))))
(let ((a!28 (mp (asserted (or (=> L2_tr1 a!3) |L2#level_5!143|)) a!27 a!24))
      (a!60 (mp (asserted (or (=> L2_tr0 a!42) |L2#level_5!143|)) a!59 a!56))
      (a!73 (trans (unit-resolution a!63
                                    a!70
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!72
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!90 (trans (unit-resolution a!87
                                    a!70
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!89
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!102 (th-lemma (symm a!101 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!103 (th-lemma (symm a!101 (= L2_2_n L1_2_0))
                       (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!113 (th-lemma (symm a!112 (= L2_0_n L1_0_0))
                       (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!121 (th-lemma (symm a!112 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!76 (th-lemma (trans a!73 a!75 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!93 (th-lemma (trans a!90 a!92 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!117 (th-lemma a!113 a!116 a!102 (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!122 (th-lemma a!103 a!120 a!121 (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!96 (th-lemma (th-lemma a!76
                                (unit-resolution a!86
                                                 (asserted spacer_proxy!0)
                                                 a!83)
                                a!93
                                a!94)
                      a!95)))
(let ((a!123 (unit-resolution a!60
                              a!96
                              (th-lemma (th-lemma a!97 (>= L2_5_n 0))
                                        a!100
                                        a!102
                                        (not (<= L1_2_0 1)))
                              (asserted (not |L2#level_5!143|))
                              (hypothesis L2_tr0)
                              (th-lemma a!103
                                        (th-lemma a!105 a!107 a!108)
                                        a!110
                                        a!111)
                              a!117
                              a!122
                              false)))
(let ((a!124 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!123 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!125 (unit-resolution (mp a!38 a!39 (or (not L2_tr1) (not a!30)))
                              a!124
                              (not a!30))))
(let ((a!126 (unit-resolution (def-axiom (or a!30 (= L2_0_0 L2_0_n)))
                              a!125
                              (= L2_0_0 L2_0_n)))
      (a!128 (unit-resolution (def-axiom (or a!30 (= L2_2_0 L2_2_n)))
                              a!125
                              (= L2_2_0 L2_2_n)))
      (a!133 (trans (unit-resolution a!131
                                     a!125
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!132
                                     a!125
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!137 (symm (unit-resolution a!136
                                    a!125
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!141 (trans (unit-resolution a!139
                                     a!125
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!140
                                     a!125
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!145 (symm (unit-resolution a!144
                                    a!125
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!152 (unit-resolution (def-axiom a!151)
                              a!125
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!155 (unit-resolution (def-axiom (or a!30 (= L2_4_0 L2_4_n)))
                              a!125
                              (= L2_4_0 L2_4_n))))
(let ((a!127 (th-lemma a!126 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!129 (th-lemma a!128 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!135 (trans a!133
                    (unit-resolution a!134
                                     a!125
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!143 (trans a!141
                    (unit-resolution a!142
                                     a!125
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!148 (th-lemma a!126 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!149 (th-lemma a!128 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!153 (th-lemma a!152 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!156 (th-lemma a!155 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!130 (th-lemma a!127 a!120 a!129 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!138 (th-lemma (trans a!135 a!137 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!146 (th-lemma (trans a!143 a!145 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!150 (th-lemma a!148 a!116 a!149 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
  (unit-resolution a!28
                   a!130
                   (th-lemma a!138
                             (unit-resolution a!86
                                              (asserted spacer_proxy!0)
                                              a!83)
                             a!146
                             a!147)
                   (asserted (not |L2#level_5!143|))
                   a!124
                   a!150
                   (th-lemma a!149 a!100 a!153 a!154)
                   (th-lemma a!129 (th-lemma a!105 a!107 a!108) a!156 a!157)
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 2)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 5 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 6 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 6 depth: 9
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2))))
  (and a!1
       (= (+ L2_0_n (* (- 1) L2_5_n)) 2)
       (= (+ L2_2_n (* (- 1) L2_5_n)) 2)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!5 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!6 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!7 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!8 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!9 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!10 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!11 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!17 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!18 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!19 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!20 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!21 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!30 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!32 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!33 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!34 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!35 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!41 (or (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)))
      (a!42 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!43 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!44 (or (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)))
      (a!48 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!49 (or (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)))
      (a!52 (or (not L2_tr0)
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)
                (<= L1_2_0 1)
                (not (>= L1_0_0 2))
                (not (<= L1_0_0 2))
                (>= L1_2_0 3)
                |L2#level_6!435|))
      (a!57 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!59 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!60 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!61 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!67 (or (not spacer_proxy!73) (>= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!72 (or (not spacer_proxy!74) (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!74 (or (not spacer_proxy!72) (<= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!76 (or (not spacer_proxy!75) (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!81 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
      (a!83 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!86 (not (>= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!87 (hypothesis (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!88 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!98 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!99 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!100 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
                (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!101 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!103 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
                (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!104 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!115 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!116 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!143 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!154 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!12 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!7
                a!9
                a!3
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!22 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!18
                a!20
                a!3
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!25 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!18
                a!20
                a!3
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_6!435|))
      (a!31 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!30
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!36 (monotonicity (rewrite a!34) (= (not (<= L2_4_n L2_5_0)) a!35)))
      (a!37 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!35))
      (a!45 (rewrite (= (=> L2_tr0 a!44) (or (not L2_tr0) a!44))))
      (a!47 (= (or (=> L2_tr0 a!41) |L2#level_6!435|)
               (or (or (not L2_tr0) a!44) |L2#level_6!435|)))
      (a!50 (monotonicity (monotonicity (rewrite a!48) (= a!44 a!49))
                          (= (or (not L2_tr0) a!44) (or (not L2_tr0) a!49))))
      (a!51 (= (or (or (not L2_tr0) a!44) |L2#level_6!435|)
               (or (or (not L2_tr0) a!49) |L2#level_6!435|)))
      (a!53 (= (or (or (not L2_tr0) a!49) |L2#level_6!435|) a!52))
      (a!54 (= (or (or (not L2_tr0) a!44) |L2#level_6!435|) a!52))
      (a!58 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!57))
      (a!62 (monotonicity (monotonicity (rewrite a!60) (= a!59 a!61))
                          (= (or (not L2_tr0) a!59) (or (not L2_tr0) a!61))))
      (a!68 (unit-resolution (asserted a!67)
                             (asserted spacer_proxy!73)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!73 (unit-resolution (asserted a!72)
                             (asserted spacer_proxy!74)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!75 (unit-resolution (asserted a!74)
                             (asserted spacer_proxy!72)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 2)))
      (a!77 (unit-resolution (asserted a!76)
                             (asserted spacer_proxy!75)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!82 (unit-resolution (asserted (or (not spacer_proxy!71) a!81))
                             (asserted spacer_proxy!71)
                             a!81))
      (a!102 (monotonicity (monotonicity (monotonicity a!99 a!100)
                                         (= a!98 a!101))
                           (= (or (not spacer_proxy!0) a!98)
                              (or (not spacer_proxy!0) a!101))))
      (a!105 (monotonicity (monotonicity (rewrite a!103) (= a!101 a!104))
                           (= (or (not spacer_proxy!0) a!101)
                              (or (not spacer_proxy!0) a!104)))))
(let ((a!13 (monotonicity (monotonicity (monotonicity (monotonicity a!5 a!6)
                                                      (= a!1 a!7))
                                        (monotonicity (monotonicity a!5 a!8)
                                                      (= a!2 a!9))
                                        (monotonicity a!10 a!11)
                                        (= a!4 a!12))
                          (= (=> L2_tr1 a!4) (=> L2_tr1 a!12))))
      (a!14 (rewrite (= (=> L2_tr1 a!12) (or (not L2_tr1) a!12))))
      (a!16 (= (or (=> L2_tr1 a!4) |L2#level_6!435|)
               (or (or (not L2_tr1) a!12) |L2#level_6!435|)))
      (a!23 (monotonicity (monotonicity (monotonicity (rewrite a!17)
                                                      (= a!7 a!18))
                                        (monotonicity (rewrite a!19)
                                                      (= a!9 a!20))
                                        (rewrite a!21)
                                        (= a!12 a!22))
                          (= (or (not L2_tr1) a!12) (or (not L2_tr1) a!22))))
      (a!24 (= (or (or (not L2_tr1) a!12) |L2#level_6!435|)
               (or (or (not L2_tr1) a!22) |L2#level_6!435|)))
      (a!26 (= (or (or (not L2_tr1) a!22) |L2#level_6!435|) a!25))
      (a!27 (= (or (or (not L2_tr1) a!12) |L2#level_6!435|) a!25))
      (a!38 (monotonicity (monotonicity (rewrite a!33) a!36 (= a!32 a!37))
                          (= (or (not L2_tr1) a!32) (or (not L2_tr1) a!37))))
      (a!40 (monotonicity (rewrite (= a!37 (not a!31)))
                          (= (or (not L2_tr1) a!37)
                             (or (not L2_tr1) (not a!31)))))
      (a!46 (trans (monotonicity (monotonicity (monotonicity a!42 a!43)
                                               (= a!41 a!44))
                                 (= (=> L2_tr0 a!41) (=> L2_tr0 a!44)))
                   a!45
                   (= (=> L2_tr0 a!41) (or (not L2_tr0) a!44))))
      (a!63 (mp (asserted (or (not L2_tr0) a!59)) a!62 (or (not L2_tr0) a!61)))
      (a!64 (monotonicity (rewrite (= a!61 (not a!58)))
                          (= (or (not L2_tr0) a!61)
                             (or (not L2_tr0) (not a!58)))))
      (a!78 (th-lemma a!75 a!77 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!84 (or a!58 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!91 (def-axiom (or a!58 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!92 (def-axiom (or a!58
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!95 (def-axiom (or a!58 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!106 (trans a!102
                    a!105
                    (= (or (not spacer_proxy!0) a!98)
                       (or (not spacer_proxy!0) a!104))))
      (a!108 (def-axiom (or a!58 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!109 (def-axiom (or a!58
                            (= (select aux!14_n L2_2_n)
                               (select aux!13_n L2_2_n)))))
      (a!112 (def-axiom (or a!58 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!123 (th-lemma a!73 a!68 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!127 (def-axiom (or a!31 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!128 (def-axiom (or a!31
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!130 (def-axiom (or a!31
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!132 (def-axiom (or a!31 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!135 (def-axiom (or a!31 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!136 (def-axiom (or a!31
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!138 (def-axiom (or a!31
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!140 (def-axiom (or a!31 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!147 (th-lemma a!77 (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!148 (or a!31 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!15 (trans a!13 a!14 (= (=> L2_tr1 a!4) (or (not L2_tr1) a!12))))
      (a!39 (mp (asserted (or (not L2_tr1) a!32)) a!38 (or (not L2_tr1) a!37)))
      (a!55 (trans (monotonicity a!46 a!47)
                   (trans (monotonicity a!50 a!51) (rewrite a!53) a!54)
                   (= (or (=> L2_tr0 a!41) |L2#level_6!435|) a!52)))
      (a!65 (unit-resolution (mp a!63 a!64 (or (not L2_tr0) (not a!58)))
                             (hypothesis L2_tr0)
                             (not a!58)))
      (a!89 (th-lemma (lemma (th-lemma a!87 a!68 false) a!88)
                      a!78
                      (>= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!107 (mp (asserted (or (not spacer_proxy!0) a!98))
                 a!106
                 (or (not spacer_proxy!0) a!104))))
(let ((a!28 (trans (monotonicity a!15 a!16)
                   (trans (monotonicity a!23 a!24) (rewrite a!26) a!27)
                   (= (or (=> L2_tr1 a!4) |L2#level_6!435|) a!25)))
      (a!56 (mp (asserted (or (=> L2_tr0 a!41) |L2#level_6!435|)) a!55 a!52))
      (a!66 (unit-resolution (def-axiom (or a!58 (= L2_5_n 0)))
                             a!65
                             (= L2_5_n 0)))
      (a!69 (unit-resolution (def-axiom (or a!58 (= L1_0_0 L2_0_n)))
                             a!65
                             (= L1_0_0 L2_0_n)))
      (a!79 (unit-resolution (def-axiom (or a!58 (= L1_2_0 L2_2_n)))
                             a!65
                             (= L1_2_0 L2_2_n)))
      (a!85 (unit-resolution (def-axiom a!84)
                             a!65
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!93 (symm (unit-resolution a!92
                                   a!65
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!96 (symm (unit-resolution a!95
                                   a!65
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!110 (symm (unit-resolution a!109
                                    a!65
                                    (= (select aux!14_n L2_2_n)
                                       (select aux!13_n L2_2_n)))
                   (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!113 (symm (unit-resolution a!112
                                    a!65
                                    (= L1_3_0 (select aux!14_n L2_2_n)))
                   (= (select aux!14_n L2_2_n) L1_3_0))))
(let ((a!29 (mp (asserted (or (=> L2_tr1 a!4) |L2#level_6!435|)) a!28 a!25))
      (a!70 (th-lemma (symm a!69 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!71 (th-lemma (symm a!69 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!80 (th-lemma (symm a!79 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!90 (th-lemma (symm a!79 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!94 (trans (unit-resolution a!91
                                    a!65
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!93
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!111 (trans (unit-resolution a!108
                                     a!65
                                     (= L2_3_n (select aux!13_n L2_2_n)))
                    a!110
                    (= L2_3_n (select aux!14_n L2_2_n)))))
(let ((a!97 (th-lemma (trans a!94 a!96 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!114 (th-lemma (trans a!111 a!113 (= L2_3_n L1_3_0))
                       (<= (+ L2_3_n (* (- 1) L1_3_0)) 0))))
(let ((a!117 (th-lemma (th-lemma a!97
                                 (unit-resolution a!107
                                                  (asserted spacer_proxy!0)
                                                  a!104)
                                 a!114
                                 a!115)
                       a!116)))
(let ((a!118 (unit-resolution a!56
                              (th-lemma (th-lemma a!66 (>= L2_5_n 0))
                                        a!68
                                        a!70
                                        (>= L1_0_0 2))
                              (th-lemma a!71
                                        a!73
                                        a!78
                                        (th-lemma a!66 (<= L2_5_n 0))
                                        (<= L1_0_0 2))
                              (asserted (not |L2#level_6!435|))
                              (hypothesis L2_tr0)
                              (th-lemma a!80
                                        (th-lemma a!82 a!73 a!83)
                                        a!85
                                        a!86)
                              (th-lemma (th-lemma a!66 (>= L2_5_n 0))
                                        a!89
                                        a!90
                                        (not (<= L1_2_0 1)))
                              a!117
                              (th-lemma a!80
                                        a!73
                                        (th-lemma a!66 (<= L2_5_n 0))
                                        (not (>= L1_2_0 3)))
                              false)))
(let ((a!119 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!118 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!120 (unit-resolution (mp a!39 a!40 (or (not L2_tr1) (not a!31)))
                              a!119
                              (not a!31))))
(let ((a!121 (unit-resolution (def-axiom (or a!31 (= L2_0_0 L2_0_n)))
                              a!120
                              (= L2_0_0 L2_0_n)))
      (a!124 (unit-resolution (def-axiom (or a!31 (= L2_2_0 L2_2_n)))
                              a!120
                              (= L2_2_0 L2_2_n)))
      (a!129 (trans (unit-resolution a!127
                                     a!120
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!128
                                     a!120
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!133 (symm (unit-resolution a!132
                                    a!120
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!137 (trans (unit-resolution a!135
                                     a!120
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!136
                                     a!120
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!141 (symm (unit-resolution a!140
                                    a!120
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!149 (unit-resolution (def-axiom a!148)
                              a!120
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!152 (unit-resolution (def-axiom (or a!31 (= L2_4_0 L2_4_n)))
                              a!120
                              (= L2_4_0 L2_4_n))))
(let ((a!122 (th-lemma a!121 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!125 (th-lemma a!124 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!131 (trans a!129
                    (unit-resolution a!130
                                     a!120
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!139 (trans a!137
                    (unit-resolution a!138
                                     a!120
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!144 (th-lemma a!121 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!145 (th-lemma a!124 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!150 (th-lemma a!149 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!153 (th-lemma a!152 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!126 (th-lemma a!122 a!123 a!125 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!134 (th-lemma (trans a!131 a!133 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!142 (th-lemma (trans a!139 a!141 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!146 (th-lemma a!144 a!78 a!145 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!151 (th-lemma a!145 a!147 a!150 (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
  (unit-resolution a!29
                   a!126
                   (th-lemma a!134
                             (unit-resolution a!107
                                              (asserted spacer_proxy!0)
                                              a!104)
                             a!142
                             a!143)
                   (asserted (not |L2#level_6!435|))
                   a!119
                   a!146
                   a!151
                   (th-lemma a!153 (th-lemma a!82 a!73 a!83) a!125 a!154)
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(>= (+ L2_0_n (* (- 1) L2_5_n)) 2)
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_6!435|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!3 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!3 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!3 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_7!853|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_7!438|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 7 depth: 0
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 7 depth: 9
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))))
  (and a!1
       a!2
       (= (+ L2_2_n (* (- 1) L2_5_n)) 1)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2)))
      (a!5 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!6 (= (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!7 (not (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!8 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!9 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2)
              (>= (+ (* (- 1) L2_5_0) L2_0_0) 2)))
      (a!10 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 2)))
      (a!11 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!12 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!18 (= (<= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!19 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!20 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 2)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) (- 2))))
      (a!21 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) (- 2))))
      (a!22 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!31 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!33 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!34 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!35 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!36 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!42 (not (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0)))
      (a!44 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!45 (= (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!49 (= (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!56 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!59 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!60 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!61 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!72 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!73 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!74 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!75 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!77 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!78 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!89 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!90 (not (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!94 (or (not spacer_proxy!24) (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!96 (or (not spacer_proxy!22) (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!99 (or (not spacer_proxy!21) (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!103 (or (not spacer_proxy!25) (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!111 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)))
      (a!115 (hypothesis (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!116 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!143 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!151 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!152 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!13 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!7
                a!2
                a!10
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!23 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!2
                a!21
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!26 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!19
                a!2
                a!21
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_7!438|))
      (a!32 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!31
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!37 (monotonicity (rewrite a!35) (= (not (<= L2_4_n L2_5_0)) a!36)))
      (a!38 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!36))
      (a!43 (or a!42
                (= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!46 (or a!42
                (= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!50 (or a!42
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!52 (or (not L2_tr0)
                a!42
                (= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_0_0 0)
                (not (<= L1_0_0 1))
                (<= L1_4_0 1)
                (<= L1_2_0 0)
                (not (<= L1_2_0 1))))
      (a!57 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!56))
      (a!62 (monotonicity (monotonicity (rewrite a!60) (= a!59 a!61))
                          (= (or (not L2_tr0) a!59) (or (not L2_tr0) a!61))))
      (a!76 (monotonicity (monotonicity (monotonicity a!73 a!74) (= a!72 a!75))
                          (= (or (not spacer_proxy!0) a!72)
                             (or (not spacer_proxy!0) a!75))))
      (a!79 (monotonicity (monotonicity (rewrite a!77) (= a!75 a!78))
                          (= (or (not spacer_proxy!0) a!75)
                             (or (not spacer_proxy!0) a!78))))
      (a!95 (unit-resolution (asserted a!94)
                             (asserted spacer_proxy!24)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!97 (unit-resolution (asserted a!96)
                             (asserted spacer_proxy!22)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!100 (unit-resolution (asserted a!99)
                              (asserted spacer_proxy!21)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!104 (unit-resolution (asserted a!103)
                              (asserted spacer_proxy!25)
                              (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!112 (unit-resolution (asserted (or (not spacer_proxy!23) a!111))
                              (asserted spacer_proxy!23)
                              a!111)))
(let ((a!14 (monotonicity (monotonicity (monotonicity (monotonicity a!5 a!6)
                                                      (= a!1 a!7))
                                        (monotonicity (monotonicity a!8 a!9)
                                                      (= a!3 a!10))
                                        (monotonicity a!11 a!12)
                                        (= a!4 a!13))
                          (= (=> L2_tr1 a!4) (=> L2_tr1 a!13))))
      (a!15 (rewrite (= (=> L2_tr1 a!13) (or (not L2_tr1) a!13))))
      (a!17 (= (or (=> L2_tr1 a!4) |L2#level_7!438|)
               (or (or (not L2_tr1) a!13) |L2#level_7!438|)))
      (a!24 (monotonicity (monotonicity (monotonicity (rewrite a!18)
                                                      (= a!7 a!19))
                                        (monotonicity (rewrite a!20)
                                                      (= a!10 a!21))
                                        (rewrite a!22)
                                        (= a!13 a!23))
                          (= (or (not L2_tr1) a!13) (or (not L2_tr1) a!23))))
      (a!25 (= (or (or (not L2_tr1) a!13) |L2#level_7!438|)
               (or (or (not L2_tr1) a!23) |L2#level_7!438|)))
      (a!27 (= (or (or (not L2_tr1) a!23) |L2#level_7!438|) a!26))
      (a!28 (= (or (or (not L2_tr1) a!13) |L2#level_7!438|) a!26))
      (a!39 (monotonicity (monotonicity (rewrite a!34) a!37 (= a!33 a!38))
                          (= (or (not L2_tr1) a!33) (or (not L2_tr1) a!38))))
      (a!41 (monotonicity (rewrite (= a!38 (not a!32)))
                          (= (or (not L2_tr1) a!38)
                             (or (not L2_tr1) (not a!32)))))
      (a!47 (rewrite (= (=> L2_tr0 a!46) (or (not L2_tr0) a!46))))
      (a!51 (monotonicity (monotonicity (rewrite a!49) (= a!46 a!50))
                          (= (or (not L2_tr0) a!46) (or (not L2_tr0) a!50))))
      (a!53 (rewrite (= (or (not L2_tr0) a!50) a!52)))
      (a!58 (def-axiom (or a!57 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!63 (mp (asserted (or (not L2_tr0) a!59)) a!62 (or (not L2_tr0) a!61)))
      (a!64 (monotonicity (rewrite (= a!61 (not a!57)))
                          (= (or (not L2_tr0) a!61)
                             (or (not L2_tr0) (not a!57)))))
      (a!66 (def-axiom (or a!57
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!69 (def-axiom (or a!57 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!80 (trans a!76
                   a!79
                   (= (or (not spacer_proxy!0) a!72)
                      (or (not spacer_proxy!0) a!78))))
      (a!82 (def-axiom (or a!57 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!83 (def-axiom (or a!57
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!86 (def-axiom (or a!57 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!98 (th-lemma a!95 a!97 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!107 (or a!57 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!123 (th-lemma a!100 a!104 (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!127 (def-axiom (or a!32 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!128 (def-axiom (or a!32
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!130 (def-axiom (or a!32
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!132 (def-axiom (or a!32 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!135 (def-axiom (or a!32 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!136 (def-axiom (or a!32
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!138 (def-axiom (or a!32
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!140 (def-axiom (or a!32 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!145 (or a!32 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!16 (trans a!14 a!15 (= (=> L2_tr1 a!4) (or (not L2_tr1) a!13))))
      (a!40 (mp (asserted (or (not L2_tr1) a!33)) a!39 (or (not L2_tr1) a!38)))
      (a!48 (trans (monotonicity (monotonicity (monotonicity a!44 a!45)
                                               (= a!43 a!46))
                                 (= (=> L2_tr0 a!43) (=> L2_tr0 a!46)))
                   a!47
                   (= (=> L2_tr0 a!43) (or (not L2_tr0) a!46))))
      (a!54 (trans a!51 a!53 (= (or (not L2_tr0) a!46) a!52)))
      (a!65 (unit-resolution (mp a!63 a!64 (or (not L2_tr0) (not a!57)))
                             (hypothesis L2_tr0)
                             (not a!57)))
      (a!81 (mp (asserted (or (not spacer_proxy!0) a!72))
                a!80
                (or (not spacer_proxy!0) a!78))))
(let ((a!29 (trans (monotonicity a!16 a!17)
                   (trans (monotonicity a!24 a!25) (rewrite a!27) a!28)
                   (= (or (=> L2_tr1 a!4) |L2#level_7!438|) a!26)))
      (a!55 (mp (asserted (=> L2_tr0 a!43))
                (trans a!48 a!54 (= (=> L2_tr0 a!43) a!52))
                a!52))
      (a!67 (symm (unit-resolution a!66
                                   a!65
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!70 (symm (unit-resolution a!69
                                   a!65
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!84 (symm (unit-resolution a!83
                                   a!65
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!87 (symm (unit-resolution a!86
                                   a!65
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!92 (unit-resolution (def-axiom (or a!57 (= L1_2_0 L2_2_n)))
                             a!65
                             (= L1_2_0 L2_2_n)))
      (a!101 (unit-resolution (def-axiom (or a!57 (= L2_5_n 0)))
                              a!65
                              (= L2_5_n 0)))
      (a!105 (unit-resolution (def-axiom (or a!57 (= L1_4_0 L2_4_n)))
                              a!65
                              (= L1_4_0 L2_4_n)))
      (a!108 (unit-resolution (def-axiom a!107)
                              a!65
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!113 (unit-resolution (def-axiom (or a!57 (= L1_0_0 L2_0_n)))
                              a!65
                              (= L1_0_0 L2_0_n))))
(let ((a!30 (mp (asserted (or (=> L2_tr1 a!4) |L2#level_7!438|)) a!29 a!26))
      (a!68 (trans (unit-resolution a!58
                                    a!65
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!67
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!85 (trans (unit-resolution a!82
                                    a!65
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!84
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!93 (th-lemma (symm a!92 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!102 (th-lemma (symm a!92 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!106 (th-lemma (symm a!105 (= L2_4_n L1_4_0))
                       (>= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!110 (th-lemma (symm a!105 (= L2_4_n L1_4_0))
                       (<= (+ L2_4_n (* (- 1) L1_4_0)) 0)))
      (a!114 (th-lemma (symm a!113 (= L2_0_n L1_0_0))
                       (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!117 (th-lemma (symm a!113 (= L2_0_n L1_0_0))
                       (>= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!71 (th-lemma (trans a!68 a!70 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!88 (th-lemma (trans a!85 a!87 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!109 (th-lemma a!106 a!108 (<= (+ L1_4_0 (* (- 1) L1_5_0)) 0))))
(let ((a!91 (th-lemma (th-lemma a!71
                                (unit-resolution a!81
                                                 (asserted spacer_proxy!0)
                                                 a!78)
                                a!88
                                a!89)
                      a!90)))
(let ((a!118 (unit-resolution a!55
                              a!91
                              (th-lemma a!93
                                        a!98
                                        a!100
                                        (th-lemma a!101 (<= L2_5_n 0))
                                        (<= L1_2_0 1))
                              (hypothesis L2_tr0)
                              (th-lemma a!102
                                        a!104
                                        (th-lemma a!101 (>= L2_5_n 0))
                                        (not (<= L1_2_0 0)))
                              a!109
                              (th-lemma a!110
                                        (th-lemma a!101 (>= L2_5_n 0))
                                        a!112
                                        (not (<= L1_4_0 1)))
                              (th-lemma a!114
                                        (lemma (th-lemma a!115 a!97 false)
                                               a!116)
                                        (th-lemma a!101 (>= L2_5_n 0))
                                        (not (<= L1_0_0 0)))
                              (th-lemma a!117
                                        a!100
                                        (th-lemma a!101 (<= L2_5_n 0))
                                        (<= L1_0_0 1))
                              false)))
(let ((a!119 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!118 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!120 (unit-resolution (mp a!40 a!41 (or (not L2_tr1) (not a!32)))
                              a!119
                              (not a!32))))
(let ((a!121 (unit-resolution (def-axiom (or a!32 (= L2_0_0 L2_0_n)))
                              a!120
                              (= L2_0_0 L2_0_n)))
      (a!124 (unit-resolution (def-axiom (or a!32 (= L2_2_0 L2_2_n)))
                              a!120
                              (= L2_2_0 L2_2_n)))
      (a!129 (trans (unit-resolution a!127
                                     a!120
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!128
                                     a!120
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!133 (symm (unit-resolution a!132
                                    a!120
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!137 (trans (unit-resolution a!135
                                     a!120
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!136
                                     a!120
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!141 (symm (unit-resolution a!140
                                    a!120
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!146 (unit-resolution (def-axiom a!145)
                              a!120
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!149 (unit-resolution (def-axiom (or a!32 (= L2_4_0 L2_4_n)))
                              a!120
                              (= L2_4_0 L2_4_n))))
(let ((a!122 (th-lemma a!121 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!125 (th-lemma a!124 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!131 (trans a!129
                    (unit-resolution a!130
                                     a!120
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!139 (trans a!137
                    (unit-resolution a!138
                                     a!120
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!144 (th-lemma a!124 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!147 (th-lemma a!146 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!150 (th-lemma a!149 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0)))
      (a!153 (th-lemma a!121 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!154 (th-lemma a!146 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1)))))
(let ((a!126 (th-lemma a!122 a!123 a!125 (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!134 (th-lemma (trans a!131 a!133 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!142 (th-lemma (trans a!139 a!141 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!148 (th-lemma a!144 a!95 a!147 (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!155 (th-lemma a!153
                       (lemma (th-lemma a!115 a!97 false) a!116)
                       a!154
                       (<= (+ L2_5_0 (* (- 1) L2_0_0)) (- 2)))))
  (unit-resolution a!30
                   a!126
                   (th-lemma a!134
                             (unit-resolution a!81
                                              (asserted spacer_proxy!0)
                                              a!78)
                             a!142
                             a!143)
                   a!119
                   (asserted (not |L2#level_7!438|))
                   a!148
                   (th-lemma a!150 (th-lemma a!95 a!112 a!151) a!144 a!152)
                   a!155
                   false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 1))
(>= (+ L2_2_n (* (- 1) L2_5_n)) 1)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(<= (+ L2_2_n (* (- 1) L2_5_n)) 1)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 9 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 7 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 7 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_7!438|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!1
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!1
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!1
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_8!1203|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_8!854|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 8 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 8 depth: 9
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not L1_ext!1380_0)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!5 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
              (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!6 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)))
      (a!7 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!8 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!9 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!10 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!11 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!17 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 1)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!18 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1))))
      (a!19 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!20 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!21 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!30 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!32 (hypothesis (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!33 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!36 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!37 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!38 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!39 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!45 (or (not (= L1_0_0 0))
                (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!46 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!47 (= (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!48 (or (not (= L1_0_0 0))
                (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!51 (= (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!52 (or (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!54 (or (not L2_tr0)
                (not (= L1_0_0 0))
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (<= L1_5_0 0)
                (not (= L1_2_0 0))))
      (a!58 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!60 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!61 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!62 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!68 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!79 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!80 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!81 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!82 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!84 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!85 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!96 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!99 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!106 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!108 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!119 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!136 (not (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!147 (not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
      (a!148 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!12 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!6
                a!9
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!22 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!18
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!25 (or (not L2_tr1)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
                a!18
                a!20
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |L2#level_8!854|))
      (a!31 (unit-resolution (asserted a!30)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!34 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!33
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!40 (monotonicity (rewrite a!38) (= (not (<= L2_4_n L2_5_0)) a!39)))
      (a!41 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!39))
      (a!49 (rewrite (= (=> L2_tr0 a!48) (or (not L2_tr0) a!48))))
      (a!53 (monotonicity (monotonicity (rewrite a!51) (= a!48 a!52))
                          (= (or (not L2_tr0) a!48) (or (not L2_tr0) a!52))))
      (a!55 (rewrite (= (or (not L2_tr0) a!52) a!54)))
      (a!59 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!58))
      (a!63 (monotonicity (monotonicity (rewrite a!61) (= a!60 a!62))
                          (= (or (not L2_tr0) a!60) (or (not L2_tr0) a!62))))
      (a!69 (unit-resolution (asserted (or (not spacer_proxy!3) a!68))
                             (asserted spacer_proxy!3)
                             a!68))
      (a!83 (monotonicity (monotonicity (monotonicity a!80 a!81) (= a!79 a!82))
                          (= (or (not spacer_proxy!0) a!79)
                             (or (not spacer_proxy!0) a!82))))
      (a!86 (monotonicity (monotonicity (rewrite a!84) (= a!82 a!85))
                          (= (or (not spacer_proxy!0) a!82)
                             (or (not spacer_proxy!0) a!85))))
      (a!100 (unit-resolution (asserted a!99)
                              (asserted spacer_proxy!1)
                              (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!107 (unit-resolution (asserted a!106)
                              (asserted spacer_proxy!5)
                              (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!109 (unit-resolution (asserted a!108)
                              (asserted spacer_proxy!4)
                              (<= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
(let ((a!13 (monotonicity (monotonicity (monotonicity (monotonicity a!4 a!5)
                                                      (= a!1 a!6))
                                        (monotonicity (monotonicity a!7 a!8)
                                                      (= a!2 a!9))
                                        (monotonicity a!10 a!11)
                                        (= a!3 a!12))
                          (= (=> L2_tr1 a!3) (=> L2_tr1 a!12))))
      (a!14 (rewrite (= (=> L2_tr1 a!12) (or (not L2_tr1) a!12))))
      (a!16 (= (or (=> L2_tr1 a!3) |L2#level_8!854|)
               (or (or (not L2_tr1) a!12) |L2#level_8!854|)))
      (a!23 (monotonicity (monotonicity (monotonicity (rewrite a!17)
                                                      (= a!6 a!18))
                                        (monotonicity (rewrite a!19)
                                                      (= a!9 a!20))
                                        (rewrite a!21)
                                        (= a!12 a!22))
                          (= (or (not L2_tr1) a!12) (or (not L2_tr1) a!22))))
      (a!24 (= (or (or (not L2_tr1) a!12) |L2#level_8!854|)
               (or (or (not L2_tr1) a!22) |L2#level_8!854|)))
      (a!26 (= (or (or (not L2_tr1) a!22) |L2#level_8!854|) a!25))
      (a!27 (= (or (or (not L2_tr1) a!12) |L2#level_8!854|) a!25))
      (a!35 (or a!34 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!42 (monotonicity (monotonicity (rewrite a!37) a!40 (= a!36 a!41))
                          (= (or (not L2_tr1) a!36) (or (not L2_tr1) a!41))))
      (a!44 (monotonicity (rewrite (= a!41 (not a!34)))
                          (= (or (not L2_tr1) a!41)
                             (or (not L2_tr1) (not a!34)))))
      (a!50 (trans (monotonicity (monotonicity (monotonicity a!46 a!47)
                                               (= a!45 a!48))
                                 (= (=> L2_tr0 a!45) (=> L2_tr0 a!48)))
                   a!49
                   (= (=> L2_tr0 a!45) (or (not L2_tr0) a!48))))
      (a!56 (trans a!53 a!55 (= (or (not L2_tr0) a!48) a!54)))
      (a!64 (mp (asserted (or (not L2_tr0) a!60)) a!63 (or (not L2_tr0) a!62)))
      (a!65 (monotonicity (rewrite (= a!62 (not a!59)))
                          (= (or (not L2_tr0) a!62)
                             (or (not L2_tr0) (not a!59)))))
      (a!70 (or a!59 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!72 (def-axiom (or a!59 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!73 (def-axiom (or a!59
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!76 (def-axiom (or a!59 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!87 (trans a!83
                   a!86
                   (= (or (not spacer_proxy!0) a!79)
                      (or (not spacer_proxy!0) a!85))))
      (a!89 (def-axiom (or a!59 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!90 (def-axiom (or a!59
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!93 (def-axiom (or a!59 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!97 (unit-resolution (def-axiom (or a!59 (= L2_5_n 0)))
                             (hypothesis (not a!59))
                             (= L2_5_n 0)))
      (a!98 (unit-resolution (def-axiom (or a!59 (= L1_2_0 L2_2_n)))
                             (hypothesis (not a!59))
                             (= L1_2_0 L2_2_n)))
      (a!120 (def-axiom (or a!34 (= L2_1_0 (select aux!21_n L2_0_n)))))
      (a!121 (def-axiom (or a!34
                            (= (select aux!21_n L2_0_n)
                               (select aux!18_n L2_0_n)))))
      (a!123 (def-axiom (or a!34
                            (= (select aux!18_n L2_0_n)
                               (select aux!16_n L2_0_n)))))
      (a!125 (def-axiom (or a!34 (= L2_1_n (select aux!16_n L2_0_n)))))
      (a!128 (def-axiom (or a!34 (= L2_3_0 (select aux!20_n L2_2_n)))))
      (a!129 (def-axiom (or a!34
                            (= (select aux!20_n L2_2_n)
                               (select aux!19_n L2_2_n)))))
      (a!131 (def-axiom (or a!34
                            (= (select aux!19_n L2_2_n)
                               (select aux!17_n L2_2_n)))))
      (a!133 (def-axiom (or a!34 (= L2_3_n (select aux!17_n L2_2_n)))))
      (a!139 (th-lemma a!100 a!107 (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
(let ((a!15 (trans a!13 a!14 (= (=> L2_tr1 a!3) (or (not L2_tr1) a!12))))
      (a!43 (mp (asserted (or (not L2_tr1) a!36)) a!42 (or (not L2_tr1) a!41)))
      (a!57 (mp (asserted (=> L2_tr0 a!45))
                (trans a!50 a!56 (= (=> L2_tr0 a!45) a!54))
                a!54))
      (a!66 (unit-resolution (mp a!64 a!65 (or (not L2_tr0) (not a!59)))
                             (hypothesis L2_tr0)
                             (not a!59)))
      (a!88 (mp (asserted (or (not spacer_proxy!0) a!79))
                a!87
                (or (not spacer_proxy!0) a!85)))
      (a!101 (monotonicity (trans a!98
                                  (th-lemma a!31 a!100 (= L2_2_n L2_5_n))
                                  (= L1_2_0 L2_5_n))
                           (= (= L1_2_0 0) (= L2_5_n 0)))))
(let ((a!28 (trans (monotonicity a!15 a!16)
                   (trans (monotonicity a!23 a!24) (rewrite a!26) a!27)
                   (= (or (=> L2_tr1 a!3) |L2#level_8!854|) a!25)))
      (a!67 (unit-resolution (def-axiom (or a!59 (= L2_5_n 0)))
                             a!66
                             (= L2_5_n 0)))
      (a!71 (unit-resolution (def-axiom a!70)
                             a!66
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!74 (symm (unit-resolution a!73
                                   a!66
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!77 (symm (unit-resolution a!76
                                   a!66
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!91 (symm (unit-resolution a!90
                                   a!66
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!94 (symm (unit-resolution a!93
                                   a!66
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!102 (mp a!97 (symm a!101 (= (= L2_5_n 0) (= L1_2_0 0))) (= L1_2_0 0)))
      (a!105 (unit-resolution (def-axiom (or a!59 (= L1_0_0 L2_0_n)))
                              a!66
                              (= L1_0_0 L2_0_n))))
(let ((a!29 (mp (asserted (or (=> L2_tr1 a!3) |L2#level_8!854|)) a!28 a!25))
      (a!75 (trans (unit-resolution a!72
                                    a!66
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!74
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!92 (trans (unit-resolution a!89
                                    a!66
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!91
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!103 (unit-resolution (hypothesis (not (= L1_2_0 0))) a!102 false))
      (a!110 (monotonicity (trans a!105
                                  (th-lemma a!107 a!109 (= L2_0_n L2_5_n))
                                  (= L1_0_0 L2_5_n))
                           (= (= L1_0_0 0) (= L2_5_n 0)))))
(let ((a!78 (th-lemma (trans a!75 a!77 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!95 (th-lemma (trans a!92 a!94 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!104 (unit-resolution (lemma a!103 (or a!59 (= L1_2_0 0)))
                              a!66
                              (= L1_2_0 0)))
      (a!111 (mp a!67 (symm a!110 (= (= L2_5_n 0) (= L1_0_0 0))) (= L1_0_0 0))))
(let ((a!112 (unit-resolution a!57
                              (th-lemma (th-lemma a!67 (>= L2_5_n 0))
                                        a!69
                                        a!71
                                        (not (<= L1_5_0 0)))
                              (th-lemma a!78
                                        (unit-resolution a!88
                                                         (asserted spacer_proxy!0)
                                                         a!85)
                                        a!95
                                        a!96)
                              (hypothesis L2_tr0)
                              a!104
                              a!111
                              false)))
(let ((a!113 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                              (lemma a!112 (not L2_tr0))
                              (asserted (not L2_ext0_n))
                              L2_tr1)))
(let ((a!114 (unit-resolution (mp a!43 a!44 (or (not L2_tr1) (not a!34)))
                              a!113
                              (not a!34))))
(let ((a!115 (unit-resolution (def-axiom a!35)
                              a!114
                              (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!117 (unit-resolution (def-axiom (or a!34 (= L2_2_0 L2_2_n)))
                              a!114
                              (= L2_2_0 L2_2_n)))
      (a!122 (trans (unit-resolution a!120
                                     a!114
                                     (= L2_1_0 (select aux!21_n L2_0_n)))
                    (unit-resolution a!121
                                     a!114
                                     (= (select aux!21_n L2_0_n)
                                        (select aux!18_n L2_0_n)))
                    (= L2_1_0 (select aux!18_n L2_0_n))))
      (a!126 (symm (unit-resolution a!125
                                    a!114
                                    (= L2_1_n (select aux!16_n L2_0_n)))
                   (= (select aux!16_n L2_0_n) L2_1_n)))
      (a!130 (trans (unit-resolution a!128
                                     a!114
                                     (= L2_3_0 (select aux!20_n L2_2_n)))
                    (unit-resolution a!129
                                     a!114
                                     (= (select aux!20_n L2_2_n)
                                        (select aux!19_n L2_2_n)))
                    (= L2_3_0 (select aux!19_n L2_2_n))))
      (a!134 (symm (unit-resolution a!133
                                    a!114
                                    (= L2_3_n (select aux!17_n L2_2_n)))
                   (= (select aux!17_n L2_2_n) L2_3_n)))
      (a!137 (unit-resolution (def-axiom (or a!34 (= L2_0_0 L2_0_n)))
                              a!114
                              (= L2_0_0 L2_0_n)))
      (a!145 (unit-resolution (def-axiom (or a!34 (= L2_4_0 L2_4_n)))
                              a!114
                              (= L2_4_0 L2_4_n))))
(let ((a!116 (th-lemma a!115 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!118 (th-lemma a!117 (>= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!124 (trans a!122
                    (unit-resolution a!123
                                     a!114
                                     (= (select aux!18_n L2_0_n)
                                        (select aux!16_n L2_0_n)))
                    (= L2_1_0 (select aux!16_n L2_0_n))))
      (a!132 (trans a!130
                    (unit-resolution a!131
                                     a!114
                                     (= (select aux!19_n L2_2_n)
                                        (select aux!17_n L2_2_n)))
                    (= L2_3_0 (select aux!17_n L2_2_n))))
      (a!138 (th-lemma a!137 (>= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!140 (th-lemma a!117 (<= (+ L2_2_0 (* (- 1) L2_2_n)) 0)))
      (a!142 (th-lemma a!137 (<= (+ L2_0_0 (* (- 1) L2_0_n)) 0)))
      (a!143 (th-lemma a!115 (>= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!146 (th-lemma a!145 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!127 (th-lemma (trans a!124 a!126 (= L2_1_0 L2_1_n))
                       (<= (+ L2_1_0 (* (- 1) L2_1_n)) 0)))
      (a!135 (th-lemma (trans a!132 a!134 (= L2_3_0 L2_3_n))
                       (>= (+ L2_3_0 (* (- 1) L2_3_n)) 0)))
      (a!141 (th-lemma a!138 a!139 a!140 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!144 (th-lemma a!142 a!109 a!143 (>= (+ L2_5_0 (* (- 1) L2_0_0)) (- 1)))))
  (unit-resolution a!29
                   (lemma (th-lemma a!31 a!32 a!116 a!118 false) a!119)
                   (th-lemma a!127
                             (unit-resolution a!88
                                              (asserted spacer_proxy!0)
                                              a!85)
                             a!135
                             a!136)
                   a!113
                   a!141
                   a!144
                   (th-lemma a!146 (th-lemma a!100 a!69 a!147) a!140 a!148)
                   (asserted (not |L2#level_8!854|))
                   false))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(= L2_0_n L2_5_n)
(= L2_2_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(= L2_0_n L2_5_n)
(= L2_2_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_2_n (* (- 1) L2_5_n)) (- 1)))
(= L2_0_n L2_5_n)
(= L2_2_n L2_5_n)
(not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
(not (>= (+ L2_2_n (* (- 1) L2_4_n)) 0))
(<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
(>= (+ L2_0_n (* (- 1) L2_2_n)) 0)
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (not (>= L2_2_n L2_5_n))
      (not (<= L2_0_n L2_5_n))
      a!1
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 8 L2 (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 8 L2 (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_8!854|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_9!1735|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_9!1736|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 9 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 9 depth: 9
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not (= L2_0_0 query!0_0_n))
               (not (= L2_2_0 query!0_0_n))
               (not (= L2_4_0 query!0_1_n))
               (not (= L2_5_0 query!0_0_n))
               (not (= L2_0_1 query!0_4_n))
               (not (= L2_2_1 query!0_2_n))
               (not (= L2_4_1 query!0_1_n))
               (not (= L2_5_1 query!0_0_n))
               (not (= L2_0_2 query!0_4_n))
               (not (= L2_2_2 query!0_0_n))
               (not (= L2_4_2 query!0_1_n))
               (not (= L2_5_2 query!0_0_n))
               (not (= L2_0_3 query!0_0_n))
               (not (= L2_2_3 query!0_2_n))
               (not (= L2_4_3 query!0_1_n))
               (not (= L2_5_3 query!0_0_n))
               (not (= (select aux!10_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!4_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= (select aux!7_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (not (= (select aux!9_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!6_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!5_n query!0_2_n)
                       (select aux!2_n query!0_2_n)))
               (not (= (select aux!8_n query!0_4_n)
                       (select aux!1_n query!0_4_n)))
               (not (= (select aux!3_n query!0_0_n)
                       (select aux!2_n query!0_0_n)))
               (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
               (not (= L2_1_3 (select aux!10_n query!0_0_n)))
               (not (= L2_3_3 (select aux!9_n query!0_2_n)))
               (not (= L2_3_2 (select aux!7_n query!0_0_n)))
               (not (= L2_1_2 (select aux!8_n query!0_4_n)))
               (not (= L2_1_1 (select aux!6_n query!0_4_n)))
               (not (= L2_3_1 (select aux!5_n query!0_2_n)))
               (not (= query!0_3_n (select aux!2_n query!0_2_n)))
               (not (= query!0_5_n (select aux!1_n query!0_4_n)))
               (not (= L2_1_0 (select aux!4_n query!0_0_n)))
               (not (= L2_3_0 (select aux!3_n query!0_0_n)))
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!3 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n))))
      (a!4 (= (<= query!0_1_n query!0_0_n)
              (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!5 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!17 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!18 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!19 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!21 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!22 (= (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!23 (not (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!24 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!25 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
               (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!26 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!27 (rewrite (= (+ L2_2_0 (* (- 1) L2_4_0)) (+ (* (- 1) L2_4_0) L2_2_0))))
      (a!28 (= (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!34 (= (<= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!35 (not (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!36 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!37 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!38 (= (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)
               (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!61 (not (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!64 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!65 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!67 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!68 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!74 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!75 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!84 (hypothesis (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!86 (not (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0))))
(let ((a!2 (or a!1
               (not (= (select aux!2_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))))
      (a!6 (monotonicity (rewrite a!4)
                         (= (not (<= query!0_1_n query!0_0_n)) a!5)))
      (a!7 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                a!5))
      (a!13 (def-axiom (or a!1
                           (= (select aux!3_n query!0_0_n)
                              (select aux!2_n query!0_0_n)))))
      (a!15 (def-axiom (or a!1 (= L2_3_0 (select aux!3_n query!0_0_n)))))
      (a!20 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!18
                a!19
                (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)))
      (a!29 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!23
                a!26
                (>= (+ (* (- 1) L2_4_0) L2_2_0) 0)))
      (a!39 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!35
                a!37
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)))
      (a!42 (or (not query!0_dummy)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                a!35
                a!37
                (<= (+ L2_4_0 (* (- 1) L2_2_0)) 0)
                |query!0#level_9!1735|))
      (a!66 (or a!18
                a!64
                a!65
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!69 (or a!23
                a!68
                a!65
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!76 (or a!35
                a!75
                a!65
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!79 (or (not query!0_dummy)
                a!35
                a!75
                a!65
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                |query!0#level_9!1735|))
      (a!91 (def-axiom (or a!1 (= L2_1_0 (select aux!4_n query!0_0_n)))))
      (a!93 (def-axiom (or a!1
                           (= (select aux!4_n query!0_0_n)
                              (select aux!1_n query!0_0_n))))))
(let ((a!8 (monotonicity (monotonicity a!6 (= a!3 a!7))
                         (= (or (not query!0_dummy) a!3)
                            (or (not query!0_dummy) a!7))))
      (a!10 (monotonicity (rewrite (= a!7 (not a!1)))
                          (= (or (not query!0_dummy) a!7)
                             (or (not query!0_dummy) (not a!1)))))
      (a!30 (monotonicity (monotonicity (monotonicity (monotonicity a!21 a!22)
                                                      (= a!18 a!23))
                                        (monotonicity (monotonicity a!24 a!25)
                                                      (= a!19 a!26))
                                        (monotonicity a!27 a!28)
                                        (= a!20 a!29))
                          (= (=> query!0_dummy a!20) (=> query!0_dummy a!29))))
      (a!31 (rewrite (= (=> query!0_dummy a!29) (or (not query!0_dummy) a!29))))
      (a!33 (= (or (=> query!0_dummy a!20) |query!0#level_9!1735|)
               (or (or (not query!0_dummy) a!29) |query!0#level_9!1735|)))
      (a!40 (monotonicity (monotonicity (monotonicity (rewrite a!34)
                                                      (= a!23 a!35))
                                        (monotonicity (rewrite a!36)
                                                      (= a!26 a!37))
                                        (rewrite a!38)
                                        (= a!29 a!39))
                          (= (or (not query!0_dummy) a!29)
                             (or (not query!0_dummy) a!39))))
      (a!41 (= (or (or (not query!0_dummy) a!29) |query!0#level_9!1735|)
               (or (or (not query!0_dummy) a!39) |query!0#level_9!1735|)))
      (a!43 (= (or (or (not query!0_dummy) a!39) |query!0#level_9!1735|) a!42))
      (a!44 (= (or (or (not query!0_dummy) a!29) |query!0#level_9!1735|) a!42))
      (a!70 (monotonicity (monotonicity (monotonicity (monotonicity a!21 a!22)
                                                      (= a!18 a!23))
                                        (monotonicity (monotonicity a!21 a!67)
                                                      (= a!64 a!68))
                                        (= a!66 a!69))
                          (= (=> query!0_dummy a!66) (=> query!0_dummy a!69))))
      (a!71 (rewrite (= (=> query!0_dummy a!69) (or (not query!0_dummy) a!69))))
      (a!73 (= (or (=> query!0_dummy a!66) |query!0#level_9!1735|)
               (or (or (not query!0_dummy) a!69) |query!0#level_9!1735|)))
      (a!77 (monotonicity (monotonicity (monotonicity (rewrite a!34)
                                                      (= a!23 a!35))
                                        (monotonicity (rewrite a!74)
                                                      (= a!68 a!75))
                                        (= a!69 a!76))
                          (= (or (not query!0_dummy) a!69)
                             (or (not query!0_dummy) a!76))))
      (a!78 (= (or (or (not query!0_dummy) a!69) |query!0#level_9!1735|)
               (or (or (not query!0_dummy) a!76) |query!0#level_9!1735|)))
      (a!80 (= (or (or (not query!0_dummy) a!76) |query!0#level_9!1735|) a!79))
      (a!81 (= (or (or (not query!0_dummy) a!69) |query!0#level_9!1735|) a!79)))
(let ((a!9 (mp (asserted (or (not query!0_dummy) a!3))
               a!8
               (or (not query!0_dummy) a!7)))
      (a!32 (trans a!30
                   a!31
                   (= (=> query!0_dummy a!20) (or (not query!0_dummy) a!29))))
      (a!72 (trans a!70
                   a!71
                   (= (=> query!0_dummy a!66) (or (not query!0_dummy) a!69)))))
(let ((a!11 (unit-resolution (mp a!9 a!10 (or (not query!0_dummy) (not a!1)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!1)))
      (a!45 (trans (monotonicity a!32 a!33)
                   (trans (monotonicity a!40 a!41) (rewrite a!43) a!44)
                   (= (or (=> query!0_dummy a!20) |query!0#level_9!1735|) a!42)))
      (a!82 (trans (monotonicity a!72 a!73)
                   (trans (monotonicity a!77 a!78) (rewrite a!80) a!81)
                   (= (or (=> query!0_dummy a!66) |query!0#level_9!1735|) a!79))))
(let ((a!12 (unit-resolution (def-axiom a!2)
                             a!11
                             (not (= (select aux!2_n query!0_0_n)
                                     (select aux!1_n query!0_0_n)))))
      (a!14 (symm (unit-resolution a!13
                                   a!11
                                   (= (select aux!3_n query!0_0_n)
                                      (select aux!2_n query!0_0_n)))
                  (= (select aux!2_n query!0_0_n) (select aux!3_n query!0_0_n))))
      (a!16 (symm (unit-resolution a!15
                                   a!11
                                   (= L2_3_0 (select aux!3_n query!0_0_n)))
                  (= (select aux!3_n query!0_0_n) L2_3_0)))
      (a!46 (mp (asserted (or (=> query!0_dummy a!20) |query!0#level_9!1735|))
                a!45
                a!42))
      (a!47 (unit-resolution (def-axiom (or a!1 (= L2_0_0 query!0_0_n)))
                             a!11
                             (= L2_0_0 query!0_0_n)))
      (a!49 (unit-resolution (def-axiom (or a!1 (= L2_5_0 query!0_0_n)))
                             a!11
                             (= L2_5_0 query!0_0_n)))
      (a!52 (unit-resolution (def-axiom (or a!1 (= L2_2_0 query!0_0_n)))
                             a!11
                             (= L2_2_0 query!0_0_n)))
      (a!59 (unit-resolution (def-axiom (or a!1 (= L2_4_0 query!0_1_n)))
                             a!11
                             (= L2_4_0 query!0_1_n)))
      (a!83 (mp (asserted (or (=> query!0_dummy a!66) |query!0#level_9!1735|))
                a!82
                a!79)))
(let ((a!48 (th-lemma a!47 (<= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!50 (th-lemma a!49 (>= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!53 (th-lemma a!52 (>= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!54 (th-lemma a!49 (<= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!56 (th-lemma a!47 (>= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!57 (th-lemma a!52 (<= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!60 (th-lemma a!59 (>= (+ L2_4_0 (* (- 1) query!0_1_n)) 0))))
(let ((a!51 (lemma (th-lemma (hypothesis a!35) a!48 a!50 false)
                   (>= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!55 (lemma (th-lemma (hypothesis a!17) a!53 a!54 false)
                   (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!58 (th-lemma a!56 a!57 (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!62 (th-lemma a!57
                      a!60
                      (unit-resolution (def-axiom (or a!1 a!5)) a!11 a!5)
                      a!61))
      (a!85 (th-lemma a!60
                      a!84
                      (unit-resolution (def-axiom (or a!1 a!5)) a!11 a!5)
                      a!54
                      false))
      (a!87 (lemma (th-lemma (hypothesis a!65) a!57 a!50 false)
                   (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!88 (lemma (th-lemma (hypothesis a!75) a!56 a!54 false)
                   (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0))))
(let ((a!63 (unit-resolution a!46
                             a!51
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!55
                             a!58
                             a!62
                             (asserted (not |query!0#level_9!1735|))
                             (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!89 (unit-resolution a!83
                             (lemma a!85 a!86)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!51
                             a!87
                             a!55
                             a!88
                             (asserted (not |query!0#level_9!1735|))
                             (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
(let ((a!90 (trans (trans a!14 a!16 (= (select aux!2_n query!0_0_n) L2_3_0))
                   (symm (th-lemma a!63 a!89 (= L2_1_0 L2_3_0))
                         (= L2_3_0 L2_1_0))
                   (= (select aux!2_n query!0_0_n) L2_1_0))))
(let ((a!92 (trans a!90
                   (unit-resolution a!91
                                    a!11
                                    (= L2_1_0 (select aux!4_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!4_n query!0_0_n)))))
(let ((a!94 (trans a!92
                   (unit-resolution a!93
                                    a!11
                                    (= (select aux!4_n query!0_0_n)
                                       (select aux!1_n query!0_0_n)))
                   (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))))
  (unit-resolution a!12 a!94 false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 9 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 9 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_9!1735|)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      a!3
      a!4
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 3)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 3))))
(let ((a!5 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 3)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 3)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 3)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 3))))
(let ((a!5 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 3)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 3)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 3)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 3))))
(let ((a!5 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 3)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 3)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 3)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 3))))
(let ((a!5 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0)
               a!3
               a!4)))
  (or (=> query!0_dummy a!5) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 3)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 3))))
(let ((a!5 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               a!3
               a!4)))
  (or (=> L2_tr1 a!5) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      |L2#level_5!143|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2)
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2)
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2)
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (or (=> query!0_dummy a!3) |query!0#level_6!437|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (or (=> L2_tr1 a!3) |L2#level_6!435|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 2)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!3 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 2))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!3 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 2))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!3 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 2))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 2))))
  (=> L2_tr1 a!4)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 3)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 3)))
      (a!4 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 3))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 3)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 3))))
(let ((a!5 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 3)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 3)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 3)))
      (a!4 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 3))))
(let ((a!5 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0)
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 3)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 3)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 3)))
      (a!4 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 3))))
(let ((a!5 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0)
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 3)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 3)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 3)))
      (a!4 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 3))))
(let ((a!5 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0)
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 3)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 3)))
      (a!4 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 3))))
(let ((a!5 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0)
               a!3
               a!4)))
  (=> L2_tr1 a!5)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2)
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2)
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2)
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!4)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2)))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 1)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1))))
(let ((a!3 (or (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 1)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1))))
(let ((a!3 (or (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 1)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1))))
(let ((a!3 (or (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 1)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1))))
(let ((a!3 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 1)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!2)))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 2)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 2))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 2)))
      (a!3 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 2))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 2)))
      (a!3 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 2))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 2)))
      (a!3 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 2))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 2)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 2))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!4)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               a!2)))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2)))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2)))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!4 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!5 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!4 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!5 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!4 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!5 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!5 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               a!4)))
  (=> L2_tr1 a!5)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (<= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (<= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (<= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (<= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (<= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3)))
  (=> L2_tr1 a!4)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!4 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0))))
  (or a!1
      a!2
      (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
      (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!3
      a!4))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!4 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0)
               (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!4 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0)
               (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!4 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
               (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!3
               a!4)))
  (=> query!0_dummy a!5)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!4 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0))))
(let ((a!5 (or a!1
               a!2
               (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!3
               a!4)))
  (=> L2_tr1 a!5)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 1)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)
      a!1
      a!2
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 1)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!3 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               (<= (+ L2_2_1 (* (- 1) L2_5_1)) 0)
               a!1
               a!2
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 1)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!3 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               (<= (+ L2_2_2 (* (- 1) L2_5_2)) 0)
               a!1
               a!2
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 1)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!3 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               (<= (+ L2_2_3 (* (- 1) L2_5_3)) 0)
               a!1
               a!2
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 1)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!3 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               (<= (+ L2_2_0 (* (- 1) L2_5_0)) 0)
               a!1
               a!2
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0))))
  (or (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      a!1
      a!2
      a!3
      (>= (+ L2_2_n (* (- 1) L2_4_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (<= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!3 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0))))
(let ((a!4 (or (>= (+ L2_1_1 (* (- 1) L2_3_1)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_1 (* (- 1) L2_4_1)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (<= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!3 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0))))
(let ((a!4 (or (>= (+ L2_1_2 (* (- 1) L2_3_2)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_2 (* (- 1) L2_4_2)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (<= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!3 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0))))
(let ((a!4 (or (>= (+ L2_1_3 (* (- 1) L2_3_3)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_3 (* (- 1) L2_4_3)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_2_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (<= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!3 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0))))
(let ((a!4 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
               a!1
               a!2
               a!3
               (>= (+ L2_2_0 (* (- 1) L2_4_0)) 0))))
  (=> L2_tr1 a!4)))
------------------------------------------------
-------- [spacer] to_model ../src/muz/spacer/spacer_manager.cpp:109 ---------
(define-fun L2 ((x!0 Int) (x!1 Int) (x!2 Int) (x!3 Int) (x!4 Int) (x!5 Int)) Bool
  (let ((a!1 (not (<= (+ x!0 (* (- 1) x!2)) 0)))
        (a!2 (not (>= (+ x!0 (* (- 1) x!2)) 0)))
        (a!3 (not (>= (+ x!2 (* (- 1) x!5)) 2)))
        (a!5 (not (>= (+ x!0 (* (- 1) x!5)) 0)))
        (a!6 (not (<= (+ x!2 (* (- 1) x!5)) 0)))
        (a!8 (not (<= (+ x!0 (* (- 1) x!5)) 1)))
        (a!10 (not (>= (+ x!2 (* (- 1) x!5)) 0)))
        (a!11 (not (<= (+ x!0 (* (- 1) x!5)) 0)))
        (a!14 (not (<= (+ x!2 (* (- 1) x!5)) 1))))
  (let ((a!4 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                 (>= (+ x!1 (* (- 1) x!3)) 0)
                 a!1
                 a!2
                 a!3))
        (a!7 (or a!1
                 a!5
                 a!6
                 (<= (+ x!4 (* (- 1) x!5)) 0)
                 (<= (+ x!1 (* (- 1) x!3)) 0)))
        (a!9 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                 (>= (+ x!1 (* (- 1) x!3)) 0)
                 (<= (+ x!2 (* (- 1) x!5)) 0)
                 a!8
                 a!2))
        (a!12 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                  (>= (+ x!1 (* (- 1) x!3)) 0)
                  a!10
                  a!11
                  a!2))
        (a!13 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                  (<= (+ x!1 (* (- 1) x!3)) 0)
                  a!1
                  a!2
                  a!3))
        (a!15 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                  (<= (+ x!1 (* (- 1) x!3)) 0)
                  (<= (+ x!0 (* (- 1) x!5)) 0)
                  a!14
                  (<= (+ x!2 (* (- 1) x!5)) 0)
                  a!8)))
    (and a!4 a!7 a!9 a!12 a!13 a!15))))
(define-fun L1 ((x!0 Int) (x!1 Int) (x!2 Int) (x!3 Int) (x!4 Int) (x!5 Int)) Bool
  (let ((a!1 (not (>= (+ x!0 (* (- 1) x!2)) 0)))
        (a!2 (not (<= (+ x!0 (* (- 1) x!2)) 0)))
        (a!4 (or (= (+ x!3 (* (- 1) x!1)) 0)
                 (not (<= x!0 0))
                 (not (<= x!2 0))
                 (not (>= x!2 0))
                 (not (>= x!0 0))
                 (<= x!5 0)))
        (a!5 (or (>= (+ x!2 (* (- 1) x!5)) 0)
                 (= (+ x!3 (* (- 1) x!1)) 0)
                 (not (<= x!2 1))
                 (<= x!0 0)
                 (<= x!2 0)
                 (not (<= x!0 1)))))
  (let ((a!3 (or a!1
                 (= (+ x!3 (* (- 1) x!1)) 0)
                 (<= x!2 1)
                 (<= (+ x!5 (* (- 1) x!2)) 0)
                 a!2)))
    (and a!3 a!4 a!5))))
------------------------------------------------
-------- [spacer] to_model ../src/muz/spacer/spacer_manager.cpp:109 ---------
(define-fun L2 ((x!0 Int) (x!1 Int) (x!2 Int) (x!3 Int) (x!4 Int) (x!5 Int)) Bool
  (let ((a!1 (not (<= (+ x!0 (* (- 1) x!2)) 0)))
        (a!2 (not (>= (+ x!0 (* (- 1) x!2)) 0)))
        (a!3 (not (>= (+ x!2 (* (- 1) x!5)) 2)))
        (a!5 (not (>= (+ x!0 (* (- 1) x!5)) 0)))
        (a!6 (not (<= (+ x!2 (* (- 1) x!5)) 0)))
        (a!8 (not (<= (+ x!0 (* (- 1) x!5)) 1)))
        (a!10 (not (>= (+ x!2 (* (- 1) x!5)) 0)))
        (a!11 (not (<= (+ x!0 (* (- 1) x!5)) 0)))
        (a!14 (not (<= (+ x!2 (* (- 1) x!5)) 1))))
  (let ((a!4 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                 (>= (+ x!1 (* (- 1) x!3)) 0)
                 a!1
                 a!2
                 a!3))
        (a!7 (or a!1
                 a!5
                 a!6
                 (<= (+ x!4 (* (- 1) x!5)) 0)
                 (<= (+ x!1 (* (- 1) x!3)) 0)))
        (a!9 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                 (>= (+ x!1 (* (- 1) x!3)) 0)
                 (<= (+ x!2 (* (- 1) x!5)) 0)
                 a!8
                 a!2))
        (a!12 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                  (>= (+ x!1 (* (- 1) x!3)) 0)
                  a!10
                  a!11
                  a!2))
        (a!13 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                  (<= (+ x!1 (* (- 1) x!3)) 0)
                  a!1
                  a!2
                  a!3))
        (a!15 (or (>= (+ x!2 (* (- 1) x!4)) 0)
                  (<= (+ x!1 (* (- 1) x!3)) 0)
                  (<= (+ x!0 (* (- 1) x!5)) 0)
                  a!14
                  (<= (+ x!2 (* (- 1) x!5)) 0)
                  a!8)))
    (and a!4 a!7 a!9 a!12 a!13 a!15))))
(define-fun L1 ((x!0 Int) (x!1 Int) (x!2 Int) (x!3 Int) (x!4 Int) (x!5 Int)) Bool
  (let ((a!1 (not (>= (+ x!0 (* (- 1) x!2)) 0)))
        (a!2 (not (<= (+ x!0 (* (- 1) x!2)) 0)))
        (a!4 (or (= (+ x!3 (* (- 1) x!1)) 0)
                 (not (<= x!0 0))
                 (not (<= x!2 0))
                 (not (>= x!2 0))
                 (not (>= x!0 0))
                 (<= x!5 0)))
        (a!5 (or (>= (+ x!2 (* (- 1) x!5)) 0)
                 (= (+ x!3 (* (- 1) x!1)) 0)
                 (not (<= x!2 1))
                 (<= x!0 0)
                 (<= x!2 0)
                 (not (<= x!0 1)))))
  (let ((a!3 (or a!1
                 (= (+ x!3 (* (- 1) x!1)) 0)
                 (<= x!2 1)
                 (<= (+ x!5 (* (- 1) x!2)) 0)
                 a!2)))
    (and a!3 a!4 a!5))))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2130 ---------
PT: query!0
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2130 ---------
PT: L2
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2130 ---------
PT: L1
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2176 ---------
Validation Succeeded
------------------------------------------------
-------- [spacer] reset ../src/muz/spacer/spacer_context.cpp:1871 ---------

------------------------------------------------
