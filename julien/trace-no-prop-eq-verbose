-------- [spacer] reset ../src/muz/spacer/spacer_context.cpp:1871 ---------

------------------------------------------------
-------- [spacer] query ../src/muz/spacer/spacer_dl_interface.cpp:103 ---------
query: (and (query!0 (:var 5) (:var 4) (:var 3) (:var 2) (:var 1) (:var 0)))
rules:
; rule count: 13
; predicate count: 11
; output: query!0
<null>:
assign_15_1_75(#4,#6,#5,#7,#1,#0) :- 
 L1(#4,#8,#5,#9,#1,#0),
 (<= (:var 1) (:var 0)),
 (= (:var 6) (select (:var 3) (:var 4))),
 (= (:var 7) (select (:var 2) (:var 5))),
 (= (:var 8) (select (:var 3) (:var 4))),
 (= (:var 9) (select (:var 2) (:var 5))).
<null>:
start(#4,#6,#5,#7,#1,#0) :- 
 (= (:var 6) (select (:var 3) (:var 4))),
 (= (:var 7) (select (:var 2) (:var 5))).
<null>:
L1(#4,#6,#5,#7,#2,0) :- 
 assign_9_1_35(#4,#8,#5,#9,#2,#3),
 (= (:var 6) (select (:var 0) (:var 4))),
 (= (:var 7) (select (:var 1) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 4))),
 (= (:var 9) (select (:var 1) (:var 5))).
<null>:
L1(#5,#7,#6,#8,#2,#4) :- 
 assign_12_5_66(#5,#9,#6,#10,#2,#3),
 (= (:var 4) (+ 1 (:var 3))),
 (= (:var 7) (select (:var 0) (:var 5))),
 (= (:var 8) (select (:var 1) (:var 6))),
 (= (:var 9) (select (:var 0) (:var 5))),
 (= (:var 10) (select (:var 1) (:var 6))).
<null>:
assert_17_5_101(#4,#6,#5,#7,#1,#0) :- 
 L2(#4,#8,#5,#9,#1,#0),
 (not (<= (:var 1) (:var 0))),
 (= (:var 6) (select (:var 3) (:var 4))),
 (= (:var 7) (select (:var 2) (:var 5))),
 (= (:var 8) (select (:var 3) (:var 4))),
 (= (:var 9) (select (:var 2) (:var 5))).
<null>:
assign_12_5_66(#5,#7,#6,#8,#2,#3) :- 
 arrayassign_11_5_57(#5,#9,#3,#10,#2,#3),
 arrayassign_11_5_57(#5,#11,#6,#12,#2,#3),
 (= (:var 7) (select (:var 4) (:var 5))),
 (= (:var 8) (select (:var 1) (:var 6))),
 (= (:var 9) (select (:var 0) (:var 5))),
 (= (:var 10) (select (:var 1) (:var 3))),
 (= (:var 11) (select (:var 0) (:var 5))),
 (= (:var 12) (select (:var 1) (:var 6))),
 (= (:var 4) (store (:var 0) (:var 3) (select (:var 1) (:var 3)))).
<null>:
assign_18_5_110(#4,#6,#5,#7,#2,#3) :- 
 assert_17_5_101(#4,#8,#5,#9,#2,#3),
 (= (:var 6) (select (:var 0) (:var 4))),
 (= (:var 7) (select (:var 1) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 4))),
 (= (:var 9) (select (:var 1) (:var 5))).
<null>:
query!0(#3,#2,#4,#6,#5,#7) :- 
 assert_17_5_101(#3,#8,#3,#9,#2,#3),
 assert_17_5_101(#5,#10,#4,#11,#2,#3),
 assert_17_5_101(#5,#12,#3,#13,#2,#3),
 assert_17_5_101(#3,#14,#4,#15,#2,#3),
 (= (:var 6) (select (:var 1) (:var 4))),
 (= (:var 7) (select (:var 0) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 3))),
 (= (:var 9) (select (:var 1) (:var 3))),
 (= (:var 10) (select (:var 0) (:var 5))),
 (= (:var 11) (select (:var 1) (:var 4))),
 (= (:var 12) (select (:var 0) (:var 5))),
 (= (:var 13) (select (:var 1) (:var 3))),
 (= (:var 14) (select (:var 0) (:var 3))),
 (= (:var 15) (select (:var 1) (:var 4))),
 (not (= (select (:var 1) (:var 3)) (select (:var 0) (:var 3)))).
<null>:
L2(#4,#6,#5,#7,#2,0) :- 
 assign_15_1_75(#4,#8,#5,#9,#2,#3),
 (= (:var 6) (select (:var 0) (:var 4))),
 (= (:var 7) (select (:var 1) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 4))),
 (= (:var 9) (select (:var 1) (:var 5))).
<null>:
L2(#5,#7,#6,#8,#2,#4) :- 
 assign_18_5_110(#5,#9,#6,#10,#2,#3),
 (= (:var 4) (+ 1 (:var 3))),
 (= (:var 7) (select (:var 0) (:var 5))),
 (= (:var 8) (select (:var 1) (:var 6))),
 (= (:var 9) (select (:var 0) (:var 5))),
 (= (:var 10) (select (:var 1) (:var 6))).
<null>:
assign_9_1_35(#4,#6,#5,#7,#2,#3) :- 
 start(#4,#8,#5,#9,#2,#3),
 (= (:var 6) (select (:var 0) (:var 4))),
 (= (:var 7) (select (:var 1) (:var 5))),
 (= (:var 8) (select (:var 0) (:var 4))),
 (= (:var 9) (select (:var 1) (:var 5))).
<null>:
query!0(#5,#4,#3,#2,#1,#0) :- 
 query!0(#5,#4,#3,#2,#1,#0).
<null>:
arrayassign_11_5_57(#4,#6,#5,#7,#1,#0) :- 
 L1(#4,#8,#5,#9,#1,#0),
 (not (<= (:var 1) (:var 0))),
 (= (:var 6) (select (:var 3) (:var 4))),
 (= (:var 7) (select (:var 2) (:var 5))),
 (= (:var 8) (select (:var 3) (:var 4))),
 (= (:var 9) (select (:var 2) (:var 5))).
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1891 ---------
(declare-fun query!0 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1891 ---------
(declare-fun L2 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1891 ---------
(declare-fun L1 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1921 ---------
(declare-fun query!0 (Int Int Int Int Int Int) Bool) (declare-fun L2 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1921 ---------
(declare-fun L2 (Int Int Int Int Int Int) Bool) (declare-fun L2 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1921 ---------
(declare-fun L2 (Int Int Int Int Int Int) Bool) (declare-fun L1 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1921 ---------
(declare-fun L1 (Int Int Int Int Int Int) Bool) (declare-fun L1 (Int Int Int Int Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
query!0
aux!1_n aux!2_n query!0_3_n query!0_5_n aux!3_n aux!4_n L2_1_0 L2_3_0 aux!5_n aux!6_n L2_1_1 L2_3_1 aux!7_n aux!8_n query!0_4_n L2_1_2 L2_3_2 query!0_1_n aux!9_n aux!10_n query!0_0_n query!0_2_n L2_1_3 L2_3_3 
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n)))))
  (and (or (not query!0_dummy) a!1) (or query!0_dummy query!0_ext0_n)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not query!0_dummy) |query!0#level_0!11|)
------------------------------------------------
-------- [spacer] initialize ../src/muz/spacer/spacer_context.cpp:944 ---------
Initial state: (not query!0_dummy)
Transition:    (let ((a!1 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n)))))
  (and (or (not query!0_dummy) a!1) (or query!0_dummy query!0_ext0_n)))
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1932 ---------
rules
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
transition
(let ((a!1 (and (= L2_0_0 query!0_0_n)
                (= L2_2_0 query!0_0_n)
                (= L2_4_0 query!0_1_n)
                (= L2_5_0 query!0_0_n)
                (= L2_0_1 query!0_4_n)
                (= L2_2_1 query!0_2_n)
                (= L2_4_1 query!0_1_n)
                (= L2_5_1 query!0_0_n)
                (= L2_0_2 query!0_4_n)
                (= L2_2_2 query!0_0_n)
                (= L2_4_2 query!0_1_n)
                (= L2_5_2 query!0_0_n)
                (= L2_0_3 query!0_0_n)
                (= L2_2_3 query!0_2_n)
                (= L2_4_3 query!0_1_n)
                (= L2_5_3 query!0_0_n)
                (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (= L2_1_3 (select aux!10_n query!0_0_n))
                (= L2_3_3 (select aux!9_n query!0_2_n))
                (= L2_3_2 (select aux!7_n query!0_0_n))
                (= L2_1_2 (select aux!8_n query!0_4_n))
                (= L2_1_1 (select aux!6_n query!0_4_n))
                (= L2_3_1 (select aux!5_n query!0_2_n))
                (= query!0_3_n (select aux!2_n query!0_2_n))
                (= query!0_5_n (select aux!1_n query!0_4_n))
                (= L2_1_0 (select aux!4_n query!0_0_n))
                (= L2_3_0 (select aux!3_n query!0_0_n))
                (not (<= query!0_1_n query!0_0_n)))))
  (and (or (not query!0_dummy) a!1) (or query!0_dummy query!0_ext0_n)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
L2
aux!12_n aux!13_n L2_1_n L2_3_n L1_5_0 L2_4_n aux!14_n aux!15_n L2_0_n L2_2_n L1_1_0 L1_3_0 
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(and (= L2_0_0 L2_0_n)
     (= L2_2_0 L2_2_n)
     (= L2_4_0 L2_4_n)
     (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
     (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
     (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
     (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
     (= L2_1_0 (select aux!21_n L2_0_n))
     (= L2_3_0 (select aux!20_n L2_2_n))
     (= L2_5_n (+ 1 L2_5_0))
     (= L2_1_n (select aux!16_n L2_0_n))
     (= L2_3_n (select aux!17_n L2_2_n))
     (not (<= L2_4_n L2_5_0)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
L2
aux!16_n aux!17_n L2_5_n L2_1_n L2_3_n aux!18_n aux!19_n L2_5_0 L2_4_n aux!20_n aux!21_n L2_0_n L2_2_n L2_1_0 L2_3_0 
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not L2_tr0)
               (and (= L2_5_n 0)
                    (= L1_0_0 L2_0_n)
                    (= L1_2_0 L2_2_n)
                    (= L1_4_0 L2_4_n)
                    (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                    (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                    (= L1_1_0 (select aux!15_n L2_0_n))
                    (= L1_3_0 (select aux!14_n L2_2_n))
                    (= L2_1_n (select aux!12_n L2_0_n))
                    (= L2_3_n (select aux!13_n L2_2_n))
                    (<= L2_4_n L1_5_0))))
      (a!2 (or (not L2_tr1)
               (and (= L2_0_0 L2_0_n)
                    (= L2_2_0 L2_2_n)
                    (= L2_4_0 L2_4_n)
                    (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                    (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                    (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                    (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                    (= L2_1_0 (select aux!21_n L2_0_n))
                    (= L2_3_0 (select aux!20_n L2_2_n))
                    (= L2_5_n (+ 1 L2_5_0))
                    (= L2_1_n (select aux!16_n L2_0_n))
                    (= L2_3_n (select aux!17_n L2_2_n))
                    (not (<= L2_4_n L2_5_0))))))
  (and a!1 a!2 (or L2_ext0_n L2_tr0 L2_tr1)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (and (not L2_tr0) (not L2_tr1)) |L2#level_0!22|)
------------------------------------------------
-------- [spacer] initialize ../src/muz/spacer/spacer_context.cpp:944 ---------
Initial state: (and (not L2_tr0) (not L2_tr1))
Transition:    (let ((a!1 (or (not L2_tr0)
               (and (= L2_5_n 0)
                    (= L1_0_0 L2_0_n)
                    (= L1_2_0 L2_2_n)
                    (= L1_4_0 L2_4_n)
                    (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                    (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                    (= L1_1_0 (select aux!15_n L2_0_n))
                    (= L1_3_0 (select aux!14_n L2_2_n))
                    (= L2_1_n (select aux!12_n L2_0_n))
                    (= L2_3_n (select aux!13_n L2_2_n))
                    (<= L2_4_n L1_5_0))))
      (a!2 (or (not L2_tr1)
               (and (= L2_0_0 L2_0_n)
                    (= L2_2_0 L2_2_n)
                    (= L2_4_0 L2_4_n)
                    (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                    (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                    (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                    (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                    (= L2_1_0 (select aux!21_n L2_0_n))
                    (= L2_3_0 (select aux!20_n L2_2_n))
                    (= L2_5_n (+ 1 L2_5_0))
                    (= L2_1_n (select aux!16_n L2_0_n))
                    (= L2_3_n (select aux!17_n L2_2_n))
                    (not (<= L2_4_n L2_5_0))))))
  (and a!1 a!2 (or L2_ext0_n L2_tr0 L2_tr1)))
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1932 ---------
rules
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
transition
(let ((a!1 (or (not L2_tr0)
               (and (= L2_5_n 0)
                    (= L1_0_0 L2_0_n)
                    (= L1_2_0 L2_2_n)
                    (= L1_4_0 L2_4_n)
                    (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                    (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                    (= L1_1_0 (select aux!15_n L2_0_n))
                    (= L1_3_0 (select aux!14_n L2_2_n))
                    (= L2_1_n (select aux!12_n L2_0_n))
                    (= L2_3_n (select aux!13_n L2_2_n))
                    (<= L2_4_n L1_5_0))))
      (a!2 (or (not L2_tr1)
               (and (= L2_0_0 L2_0_n)
                    (= L2_2_0 L2_2_n)
                    (= L2_4_0 L2_4_n)
                    (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                    (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                    (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                    (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                    (= L2_1_0 (select aux!21_n L2_0_n))
                    (= L2_3_0 (select aux!20_n L2_2_n))
                    (= L2_5_n (+ 1 L2_5_0))
                    (= L2_1_n (select aux!16_n L2_0_n))
                    (= L2_3_n (select aux!17_n L2_2_n))
                    (not (<= L2_4_n L2_5_0))))))
  (and a!1 a!2 (or L2_ext0_n L2_tr0 L2_tr1)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(and (= L1_5_n 0)
     (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
     (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
     (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
     (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
     (= L1_1_n (select aux!23_n L1_0_n))
     (= L1_3_n (select aux!24_n L1_2_n)))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
L1
aux!23_n aux!24_n L1_1_n L1_3_n aux!25_n aux!26_n L1_4_n aux!27_n aux!28_n L1_0_n L1_2_n 
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1077 ---------
(let ((a!1 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
  (and (= L1_0_0 L1_0_n)
       (= L1_4_0 L1_4_n)
       (= L1_5_0 L1_2_0)
       (= L1_0_1 L1_0_n)
       (= L1_2_1 L1_2_n)
       (= L1_4_1 L1_4_n)
       (= L1_5_1 L1_2_0)
       a!1
       (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
       (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
       (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
       (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
       (= L1_3_1 (select aux!35_n L1_2_n))
       (= L1_1_1 (select aux!36_n L1_0_n))
       (= L1_3_0 (select aux!33_n L1_2_0))
       (= L1_5_n (+ 1 L1_2_0))
       (= L1_1_n (select aux!29_n L1_0_n))
       (= L1_1_0 (select aux!34_n L1_0_n))
       (= L1_3_n (select aux!30_n L1_2_n))
       (not (<= L1_4_n L1_2_0))))
------------------------------------------------
-------- [spacer] init_rule ../src/muz/spacer/spacer_context.cpp:1096 ---------
L1
aux!29_n aux!30_n L1_5_n L1_1_n L1_3_n aux!31_n aux!32_n aux!33_n aux!34_n L1_1_0 L1_3_0 L1_2_0 L1_4_n aux!35_n aux!36_n L1_0_n L1_2_n L1_1_1 L1_3_1 
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (not L1_tr0)
               (and (= L1_5_n 0)
                    (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                    (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                    (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                    (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                    (= L1_1_n (select aux!23_n L1_0_n))
                    (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!2 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
(let ((a!3 (or (not L1_tr1)
               (and (= L1_0_0 L1_0_n)
                    (= L1_4_0 L1_4_n)
                    (= L1_5_0 L1_2_0)
                    (= L1_0_1 L1_0_n)
                    (= L1_2_1 L1_2_n)
                    (= L1_4_1 L1_4_n)
                    (= L1_5_1 L1_2_0)
                    a!2
                    (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                    (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                    (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                    (= L1_3_1 (select aux!35_n L1_2_n))
                    (= L1_1_1 (select aux!36_n L1_0_n))
                    (= L1_3_0 (select aux!33_n L1_2_0))
                    (= L1_5_n (+ 1 L1_2_0))
                    (= L1_1_n (select aux!29_n L1_0_n))
                    (= L1_1_0 (select aux!34_n L1_0_n))
                    (= L1_3_n (select aux!30_n L1_2_n))
                    (not (<= L1_4_n L1_2_0))))))
  (and a!1 a!3 (or L1_ext0_n L1_tr0 L1_tr1))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (not L1_tr1) |L1#level_0!37|)
------------------------------------------------
-------- [spacer] initialize ../src/muz/spacer/spacer_context.cpp:944 ---------
Initial state: (not L1_tr1)
Transition:    (let ((a!1 (or (not L1_tr0)
               (and (= L1_5_n 0)
                    (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                    (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                    (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                    (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                    (= L1_1_n (select aux!23_n L1_0_n))
                    (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!2 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
(let ((a!3 (or (not L1_tr1)
               (and (= L1_0_0 L1_0_n)
                    (= L1_4_0 L1_4_n)
                    (= L1_5_0 L1_2_0)
                    (= L1_0_1 L1_0_n)
                    (= L1_2_1 L1_2_n)
                    (= L1_4_1 L1_4_n)
                    (= L1_5_1 L1_2_0)
                    a!2
                    (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                    (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                    (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                    (= L1_3_1 (select aux!35_n L1_2_n))
                    (= L1_1_1 (select aux!36_n L1_0_n))
                    (= L1_3_0 (select aux!33_n L1_2_0))
                    (= L1_5_n (+ 1 L1_2_0))
                    (= L1_1_n (select aux!29_n L1_0_n))
                    (= L1_1_0 (select aux!34_n L1_0_n))
                    (= L1_3_n (select aux!30_n L1_2_n))
                    (not (<= L1_4_n L1_2_0))))))
  (and a!1 a!3 (or L1_ext0_n L1_tr0 L1_tr1))))
------------------------------------------------
-------- [spacer] init_rules ../src/muz/spacer/spacer_context.cpp:1932 ---------
rules
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
transition
(let ((a!1 (or (not L1_tr0)
               (and (= L1_5_n 0)
                    (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                    (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                    (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                    (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                    (= L1_1_n (select aux!23_n L1_0_n))
                    (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!2 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
              (select aux!29_n L1_0_n))))
(let ((a!3 (or (not L1_tr1)
               (and (= L1_0_0 L1_0_n)
                    (= L1_4_0 L1_4_n)
                    (= L1_5_0 L1_2_0)
                    (= L1_0_1 L1_0_n)
                    (= L1_2_1 L1_2_n)
                    (= L1_4_1 L1_4_n)
                    (= L1_5_1 L1_2_0)
                    a!2
                    (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                    (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                    (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                    (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                    (= L1_3_1 (select aux!35_n L1_2_n))
                    (= L1_1_1 (select aux!36_n L1_0_n))
                    (= L1_3_0 (select aux!33_n L1_2_0))
                    (= L1_5_n (+ 1 L1_2_0))
                    (= L1_1_n (select aux!29_n L1_0_n))
                    (= L1_1_0 (select aux!34_n L1_0_n))
                    (= L1_3_n (select aux!30_n L1_2_n))
                    (not (<= L1_4_n L1_2_0))))))
  (and a!1 a!3 (or L1_ext0_n L1_tr0 L1_tr1))))
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:504 ---------
add_reach_fact: L1 INIT (and (= L1_5_n 0)
     (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
     (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
     (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
     (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
     (= L1_1_n (select aux!23_n L1_0_n))
     (= L1_3_n (select aux!24_n L1_2_n)))
------------------------------------------------
-------- [spacer] add_reach_fact ../src/muz/spacer/spacer_context.cpp:540 ---------
updating reach ctx: (or (and (= L1_5_n 0)
         (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
         (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
         (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
         (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
         (= L1_1_n (select aux!23_n L1_0_n))
         (= L1_3_n (select aux!24_n L1_2_n)))
    |L1#reach_case_0_n|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (and (= L1_5_0 0)
                    (= (select aux!26_0 L1_2_0) (select aux!24_0 L1_2_0))
                    (= (select aux!28_0 L1_0_0) (select aux!25_0 L1_0_0))
                    (= (select aux!27_0 L1_2_0) (select aux!26_0 L1_2_0))
                    (= (select aux!25_0 L1_0_0) (select aux!23_0 L1_0_0))
                    (= L1_1_0 (select aux!23_0 L1_0_0))
                    (= L1_3_0 (select aux!24_0 L1_2_0)))
               |L1#reach_case_0_0|)))
  (=> L2_tr0 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (and (= L1_5_0 0)
                    (= (select aux!26_0 L1_2_0) (select aux!24_0 L1_2_0))
                    (= (select aux!28_0 L1_0_0) (select aux!25_0 L1_0_0))
                    (= (select aux!27_0 L1_2_0) (select aux!26_0 L1_2_0))
                    (= (select aux!25_0 L1_0_0) (select aux!23_0 L1_0_0))
                    (= L1_1_0 (select aux!23_0 L1_0_0))
                    (= L1_3_0 (select aux!24_0 L1_2_0)))
               |L1#reach_case_0_0|)))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (or (and (= L1_5_1 0)
                    (= (select aux!26_1 L1_2_1) (select aux!24_1 L1_2_1))
                    (= (select aux!28_1 L1_0_1) (select aux!25_1 L1_0_1))
                    (= (select aux!27_1 L1_2_1) (select aux!26_1 L1_2_1))
                    (= (select aux!25_1 L1_0_1) (select aux!23_1 L1_0_1))
                    (= L1_1_1 (select aux!23_1 L1_0_1))
                    (= L1_3_1 (select aux!24_1 L1_2_1)))
               |L1#reach_case_0_1|)))
  (=> L1_tr1 a!1))
------------------------------------------------
-------- [spacer] reset ../src/muz/spacer/spacer_context.cpp:1871 ---------

------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 0 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 0 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(unit-resolution (asserted (or (not query!0_dummy) |query!0#level_0!11|))
                 (unit-resolution (asserted (or query!0_dummy query!0_ext0_n))
                                  (asserted (not query!0_ext0_n))
                                  query!0_dummy)
                 (asserted (not |query!0#level_0!11|))
                 false)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 0 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 0 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_0!11|)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 1 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 1 depth: 1
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!41))
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_3_2 () Int
  7)
(define-fun L2_1_0 () Int
  4)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  false)
(define-fun query!0_5_n () Int
  6)
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  7)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  false)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun L2_0_1 () Int
  2)
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!42))
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!43))
(define-fun L2_1_3 () Int
  4)
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!47))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun query!0_4_n () Int
  2)
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  6)
(define-fun query!0_0_n () Int
  (- 1))
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!44))
(define-fun L2_3_3 () Int
  5)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_0_0 () Int
  (- 1))
(define-fun L2_2_3 () Int
  3)
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!49))
(define-fun L2_4_1 () Int
  0)
(define-fun L2_1_2 () Int
  6)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!40))
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!46))
(define-fun query!0_3_n () Int
  5)
(define-fun L2_3_1 () Int
  5)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  3)
(define-fun L2_2_0 () Int
  (- 1))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_0_2 () Int
  2)
(define-fun L2_2_1 () Int
  3)
(define-fun L2_4_0 () Int
  0)
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!45))
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!48))
(define-fun k!47 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!44 ((x!0 Int)) Int
  (ite (= x!0 3) 5
  (ite (= x!0 (- 1)) 7
    5)))
(define-fun k!41 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
  (ite (= x!0 2) 6
    4)))
(define-fun k!49 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!46 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!43 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!40 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!48 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!45 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!42 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 0 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 0 depth: 1
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (asserted (or (and (not L2_tr0) (not L2_tr1)) |L2#level_0!22|)))
      (a!2 (rewrite (= (and (not L2_tr0) (not L2_tr1)) (not (or L2_tr0 L2_tr1)))))
      (a!3 (= (or (and (not L2_tr0) (not L2_tr1)) |L2#level_0!22|)
              (or (not (or L2_tr0 L2_tr1)) |L2#level_0!22|))))
(let ((a!4 (mp a!1
               (monotonicity a!2 a!3)
               (or (not (or L2_tr0 L2_tr1)) |L2#level_0!22|))))
(let ((a!5 (unit-resolution (def-axiom (or (or L2_tr0 L2_tr1) (not L2_tr1)))
                            (unit-resolution a!4
                                             (asserted (not |L2#level_0!22|))
                                             (not (or L2_tr0 L2_tr1)))
                            (not L2_tr1)))
      (a!6 (unit-resolution (def-axiom (or (or L2_tr0 L2_tr1) (not L2_tr0)))
                            (unit-resolution a!4
                                             (asserted (not |L2#level_0!22|))
                                             (not (or L2_tr0 L2_tr1)))
                            (not L2_tr0))))
  (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                   a!5
                   a!6
                   (asserted (not L2_ext0_n))
                   false))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 0 L2 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 0 L2 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |L2#level_0!22|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> L2_tr1 false) |L2#level_1!62|)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 1 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 1 depth: 1
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (monotonicity (rewrite (= (=> query!0_dummy false)
                                     (not query!0_dummy)))
                         (= (or (=> query!0_dummy false) |query!0#level_1!38|)
                            (or (not query!0_dummy) |query!0#level_1!38|)))))
(let ((a!2 (mp (asserted (or (=> query!0_dummy false) |query!0#level_1!38|))
               a!1
               (or (not query!0_dummy) |query!0#level_1!38|))))
  (unit-resolution a!2
                   (unit-resolution (asserted (or query!0_dummy query!0_ext0_n))
                                    (asserted (not query!0_ext0_n))
                                    query!0_dummy)
                   (asserted (not |query!0#level_1!38|))
                   false)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_1!38|)
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 2 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 2 depth: 2
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!83))
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_3_2 () Int
  7)
(define-fun L2_1_0 () Int
  4)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  6)
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  7)
(define-fun |query!0#level_4!80| () Bool
  false)
(define-fun |query!0#level_3!68| () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  false)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun L2_0_1 () Int
  2)
(define-fun query!0_1_n () Int
  0)
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!84))
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!85))
(define-fun L2_1_3 () Int
  4)
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!89))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun query!0_4_n () Int
  2)
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  6)
(define-fun query!0_0_n () Int
  (- 1))
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!86))
(define-fun L2_3_3 () Int
  5)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_0_0 () Int
  (- 1))
(define-fun L2_2_3 () Int
  3)
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!91))
(define-fun L2_4_1 () Int
  0)
(define-fun L2_1_2 () Int
  6)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!82))
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!88))
(define-fun query!0_3_n () Int
  5)
(define-fun L2_3_1 () Int
  5)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  3)
(define-fun L2_2_0 () Int
  (- 1))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_0_2 () Int
  2)
(define-fun L2_2_1 () Int
  3)
(define-fun L2_4_0 () Int
  0)
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!87))
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!90))
(define-fun k!87 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!84 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!89 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!86 ((x!0 Int)) Int
  (ite (= x!0 3) 5
  (ite (= x!0 (- 1)) 7
    5)))
(define-fun k!83 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
  (ite (= x!0 2) 6
    4)))
(define-fun k!91 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!88 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!85 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!82 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!90 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 1 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 1 depth: 2
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  false)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun L1_0_0 () Int
  0)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  0)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  0)
(define-fun L2_4_n () Int
  1)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!104))
(define-fun L1_5_0 () Int
  1)
(define-fun L1_1_0 () Int
  0)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!107))
(define-fun |L2#level_2!63| () Bool
  false)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!106))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  1)
(define-fun L2_0_n () Int
  0)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!105))
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun L2_3_n () Int
  1)
(define-fun |vsolver#0| () Bool
  true)
(define-fun L1_4_0 () Int
  1)
(define-fun L2_tr0 () Bool
  true)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun k!107 ((x!0 Int)) Int
  (ite (= x!0 0) 1
    1))
(define-fun k!104 ((x!0 Int)) Int
  (ite (= x!0 0) 0
    0))
(define-fun k!105 ((x!0 Int)) Int
  (ite (= x!0 0) 0
    0))
(define-fun k!106 ((x!0 Int)) Int
  (ite (= x!0 0) 1
    1))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (<= L2_4_n L1_5_0)
       a!1
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (not (<= L1_4_0 0)) (<= L1_4_0 L1_5_0) a!1 (= L1_2_0 0) (= L1_0_0 0)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 0 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (not (<= L1_4_n 0))
       a!1
       (= L1_2_n 0)
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_0_n 0)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 0 depth: 2
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (not (<= L1_4_n 0))
       a!1
       (= L1_2_n 0)
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_0_n 0)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (asserted (or (not spacer_proxy!5) (not (<= L1_4_n 0)))))
      (a!2 (or (not spacer_proxy!6) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!4 (or (not (= L1_5_n 0))
               (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
               (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
               (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
               (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
               (not (= L1_1_n (select aux!23_n L1_0_n)))
               (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!5 (and (= L1_5_n 0)
                (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                (= L1_1_n (select aux!23_n L1_0_n))
                (= L1_3_n (select aux!24_n L1_2_n))))
      (a!8 (unit-resolution (asserted (or (not L1_tr1) |L1#level_0!37|))
                            (asserted (not |L1#level_0!37|))
                            (not L1_tr1))))
(let ((a!3 (unit-resolution (asserted a!2)
                            (asserted spacer_proxy!6)
                            (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!6 (monotonicity (rewrite (= a!5 (not a!4)))
                         (= (or (not L1_tr0) a!5) (or (not L1_tr0) (not a!4))))))
(let ((a!7 (mp (asserted (or (not L1_tr0) a!5)) a!6 (or (not L1_tr0) (not a!4)))))
(let ((a!9 (unit-resolution a!7
                            (unit-resolution (asserted (or L1_ext0_n
                                                           L1_tr0
                                                           L1_tr1))
                                             (asserted (not L1_ext0_n))
                                             a!8
                                             L1_tr0)
                            (not a!4))))
(let ((a!10 (unit-resolution (def-axiom (or a!4 (= L1_5_n 0))) a!9 (= L1_5_n 0))))
  (th-lemma (unit-resolution a!1 (asserted spacer_proxy!5) (not (<= L1_4_n 0)))
            a!3
            (th-lemma a!10 (<= L1_5_n 0))
            false))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= L1_5_n 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (<= L1_5_n 0)
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 0 L1 (<= L1_5_n 0)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 0 L1 (<= L1_5_n 0)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (<= L1_5_n 0) |L1#level_0!37|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> L2_tr0 (<= L1_5_0 0)) |L2#level_1!62|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> L1_tr1 (<= L1_5_0 0)) |L1#level_1!112|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (=> L1_tr1 (<= L1_5_1 0)) |L1#level_1!112|)
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 1 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 1 depth: 2
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!3 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= L2_4_n L1_5_0)))
      (a!4 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!5 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!9 (monotonicity (rewrite (= (=> L2_tr1 false) (not L2_tr1)))
                         (= (or (=> L2_tr1 false) |L2#level_1!62|)
                            (or (not L2_tr1) |L2#level_1!62|))))
      (a!16 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!18 (asserted (or (=> L2_tr0 (<= L1_5_0 0)) |L2#level_1!62|)))
      (a!19 (rewrite (= (=> L2_tr0 (<= L1_5_0 0))
                        (or (not L2_tr0) (<= L1_5_0 0)))))
      (a!20 (= (or (=> L2_tr0 (<= L1_5_0 0)) |L2#level_1!62|)
               (or (or (not L2_tr0) (<= L1_5_0 0)) |L2#level_1!62|)))
      (a!21 (= (or (or (not L2_tr0) (<= L1_5_0 0)) |L2#level_1!62|)
               (or (not L2_tr0) (<= L1_5_0 0) |L2#level_1!62|)))
      (a!22 (= (or (=> L2_tr0 (<= L1_5_0 0)) |L2#level_1!62|)
               (or (not L2_tr0) (<= L1_5_0 0) |L2#level_1!62|))))
(let ((a!2 (or (not (= L2_5_n 0))
               (not (= L1_0_0 L2_0_n))
               (not (= L1_2_0 L2_2_n))
               (not (= L1_4_0 L2_4_n))
               (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
               (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
               (not (= L1_1_0 (select aux!15_n L2_0_n)))
               (not (= L1_3_0 (select aux!14_n L2_2_n)))
               (not (= L2_1_n (select aux!12_n L2_0_n)))
               (not (= L2_3_n (select aux!13_n L2_2_n)))
               a!1))
      (a!6 (monotonicity (monotonicity (rewrite a!4) (= a!3 a!5))
                         (= (or (not L2_tr0) a!3) (or (not L2_tr0) a!5))))
      (a!10 (mp (asserted (or (=> L2_tr1 false) |L2#level_1!62|))
                a!9
                (or (not L2_tr1) |L2#level_1!62|)))
      (a!17 (unit-resolution (asserted (or (not spacer_proxy!3) a!16))
                             (asserted spacer_proxy!3)
                             a!16)))
(let ((a!7 (mp (asserted (or (not L2_tr0) a!3)) a!6 (or (not L2_tr0) a!5)))
      (a!8 (monotonicity (rewrite (= a!5 (not a!2)))
                         (= (or (not L2_tr0) a!5) (or (not L2_tr0) (not a!2)))))
      (a!11 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (unit-resolution a!10
                                              (asserted (not |L2#level_1!62|))
                                              (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0))
      (a!14 (or a!2 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!12 (unit-resolution (mp a!7 a!8 (or (not L2_tr0) (not a!2)))
                             a!11
                             (not a!2)))
      (a!23 (unit-resolution (mp a!18
                                 (trans (monotonicity a!19 a!20)
                                        (rewrite a!21)
                                        a!22)
                                 (or (not L2_tr0) (<= L1_5_0 0) |L2#level_1!62|))
                             a!11
                             (asserted (not |L2#level_1!62|))
                             (<= L1_5_0 0))))
(let ((a!13 (unit-resolution (def-axiom (or a!2 (= L2_5_n 0)))
                             a!12
                             (= L2_5_n 0)))
      (a!15 (unit-resolution (def-axiom a!14)
                             a!12
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!24 (lemma (th-lemma a!15 (hypothesis (>= L2_5_n 0)) a!17 a!23 false)
                   (not (>= L2_5_n 0)))))
  (th-lemma a!13 a!24 false)))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 L2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 L2 (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or (<= (+ L2_4_n (* (- 1) L2_5_n)) 0) |L2#level_1!62|)
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0))))
  (or a!1 |query!0#level_2!39|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_1 (* (- 1) L2_5_1)) 0))))
  (or a!1 |query!0#level_2!39|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_2 (* (- 1) L2_5_2)) 0))))
  (or a!1 |query!0#level_2!39|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> query!0_dummy (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0))))
  (or a!1 |query!0#level_2!39|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0))))
  (or a!1 |L2#level_2!63|))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 2 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 2 depth: 2
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (=> query!0_dummy (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (rewrite (= (+ L2_4_3 (* (- 1) L2_5_3)) (+ (* (- 1) L2_5_3) L2_4_3))))
      (a!3 (= (<= (+ L2_4_3 (* (- 1) L2_5_3)) 0)
              (<= (+ (* (- 1) L2_5_3) L2_4_3) 0)))
      (a!4 (=> query!0_dummy (<= (+ (* (- 1) L2_5_3) L2_4_3) 0)))
      (a!5 (or (not query!0_dummy) (<= (+ (* (- 1) L2_5_3) L2_4_3) 0)))
      (a!7 (= (<= (+ (* (- 1) L2_5_3) L2_4_3) 0)
              (>= (+ L2_5_3 (* (- 1) L2_4_3)) 0)))
      (a!8 (or (not query!0_dummy) (>= (+ L2_5_3 (* (- 1) L2_4_3)) 0)))
      (a!9 (or (not query!0_dummy)
               (>= (+ L2_5_3 (* (- 1) L2_4_3)) 0)
               |query!0#level_2!39|))
      (a!13 (or (not (= L2_0_0 query!0_0_n))
                (not (= L2_2_0 query!0_0_n))
                (not (= L2_4_0 query!0_1_n))
                (not (= L2_5_0 query!0_0_n))
                (not (= L2_0_1 query!0_4_n))
                (not (= L2_2_1 query!0_2_n))
                (not (= L2_4_1 query!0_1_n))
                (not (= L2_5_1 query!0_0_n))
                (not (= L2_0_2 query!0_4_n))
                (not (= L2_2_2 query!0_0_n))
                (not (= L2_4_2 query!0_1_n))
                (not (= L2_5_2 query!0_0_n))
                (not (= L2_0_3 query!0_0_n))
                (not (= L2_2_3 query!0_2_n))
                (not (= L2_4_3 query!0_1_n))
                (not (= L2_5_3 query!0_0_n))
                (not (= (select aux!10_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (not (= (select aux!4_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (not (= (select aux!7_n query!0_0_n)
                        (select aux!2_n query!0_0_n)))
                (not (= (select aux!9_n query!0_2_n)
                        (select aux!2_n query!0_2_n)))
                (not (= (select aux!6_n query!0_4_n)
                        (select aux!1_n query!0_4_n)))
                (not (= (select aux!5_n query!0_2_n)
                        (select aux!2_n query!0_2_n)))
                (not (= (select aux!8_n query!0_4_n)
                        (select aux!1_n query!0_4_n)))
                (not (= (select aux!3_n query!0_0_n)
                        (select aux!2_n query!0_0_n)))
                (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
                (not (= L2_1_3 (select aux!10_n query!0_0_n)))
                (not (= L2_3_3 (select aux!9_n query!0_2_n)))
                (not (= L2_3_2 (select aux!7_n query!0_0_n)))
                (not (= L2_1_2 (select aux!8_n query!0_4_n)))
                (not (= L2_1_1 (select aux!6_n query!0_4_n)))
                (not (= L2_3_1 (select aux!5_n query!0_2_n)))
                (not (= query!0_3_n (select aux!2_n query!0_2_n)))
                (not (= query!0_5_n (select aux!1_n query!0_4_n)))
                (not (= L2_1_0 (select aux!4_n query!0_0_n)))
                (not (= L2_3_0 (select aux!3_n query!0_0_n)))
                (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!14 (and (= L2_0_0 query!0_0_n)
                 (= L2_2_0 query!0_0_n)
                 (= L2_4_0 query!0_1_n)
                 (= L2_5_0 query!0_0_n)
                 (= L2_0_1 query!0_4_n)
                 (= L2_2_1 query!0_2_n)
                 (= L2_4_1 query!0_1_n)
                 (= L2_5_1 query!0_0_n)
                 (= L2_0_2 query!0_4_n)
                 (= L2_2_2 query!0_0_n)
                 (= L2_4_2 query!0_1_n)
                 (= L2_5_2 query!0_0_n)
                 (= L2_0_3 query!0_0_n)
                 (= L2_2_3 query!0_2_n)
                 (= L2_4_3 query!0_1_n)
                 (= L2_5_3 query!0_0_n)
                 (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (not (= (select aux!2_n query!0_0_n)
                         (select aux!1_n query!0_0_n)))
                 (= L2_1_3 (select aux!10_n query!0_0_n))
                 (= L2_3_3 (select aux!9_n query!0_2_n))
                 (= L2_3_2 (select aux!7_n query!0_0_n))
                 (= L2_1_2 (select aux!8_n query!0_4_n))
                 (= L2_1_1 (select aux!6_n query!0_4_n))
                 (= L2_3_1 (select aux!5_n query!0_2_n))
                 (= query!0_3_n (select aux!2_n query!0_2_n))
                 (= query!0_5_n (select aux!1_n query!0_4_n))
                 (= L2_1_0 (select aux!4_n query!0_0_n))
                 (= L2_3_0 (select aux!3_n query!0_0_n))
                 (not (<= query!0_1_n query!0_0_n))))
      (a!15 (= (<= query!0_1_n query!0_0_n)
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!16 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0))))
(let ((a!6 (monotonicity (trans (monotonicity (monotonicity a!2 a!3)
                                              (= a!1 a!4))
                                (rewrite (= a!4 a!5))
                                (= a!1 a!5))
                         (= (or a!1 |query!0#level_2!39|)
                            (or a!5 |query!0#level_2!39|))))
      (a!10 (trans (monotonicity (monotonicity (rewrite a!7) (= a!5 a!8))
                                 (= (or a!5 |query!0#level_2!39|)
                                    (or a!8 |query!0#level_2!39|)))
                   (rewrite (= (or a!8 |query!0#level_2!39|) a!9))
                   (= (or a!5 |query!0#level_2!39|) a!9)))
      (a!17 (monotonicity (rewrite a!15)
                          (= (not (<= query!0_1_n query!0_0_n)) a!16)))
      (a!18 (and (= L2_0_0 query!0_0_n)
                 (= L2_2_0 query!0_0_n)
                 (= L2_4_0 query!0_1_n)
                 (= L2_5_0 query!0_0_n)
                 (= L2_0_1 query!0_4_n)
                 (= L2_2_1 query!0_2_n)
                 (= L2_4_1 query!0_1_n)
                 (= L2_5_1 query!0_0_n)
                 (= L2_0_2 query!0_4_n)
                 (= L2_2_2 query!0_0_n)
                 (= L2_4_2 query!0_1_n)
                 (= L2_5_2 query!0_0_n)
                 (= L2_0_3 query!0_0_n)
                 (= L2_2_3 query!0_2_n)
                 (= L2_4_3 query!0_1_n)
                 (= L2_5_3 query!0_0_n)
                 (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (not (= (select aux!2_n query!0_0_n)
                         (select aux!1_n query!0_0_n)))
                 (= L2_1_3 (select aux!10_n query!0_0_n))
                 (= L2_3_3 (select aux!9_n query!0_2_n))
                 (= L2_3_2 (select aux!7_n query!0_0_n))
                 (= L2_1_2 (select aux!8_n query!0_4_n))
                 (= L2_1_1 (select aux!6_n query!0_4_n))
                 (= L2_3_1 (select aux!5_n query!0_2_n))
                 (= query!0_3_n (select aux!2_n query!0_2_n))
                 (= query!0_5_n (select aux!1_n query!0_4_n))
                 (= L2_1_0 (select aux!4_n query!0_0_n))
                 (= L2_3_0 (select aux!3_n query!0_0_n))
                 a!16)))
(let ((a!11 (mp (asserted (or a!1 |query!0#level_2!39|))
                (trans a!6 a!10 (= (or a!1 |query!0#level_2!39|) a!9))
                a!9))
      (a!19 (monotonicity (monotonicity a!17 (= a!14 a!18))
                          (= (or (not query!0_dummy) a!14)
                             (or (not query!0_dummy) a!18))))
      (a!21 (monotonicity (rewrite (= a!18 (not a!13)))
                          (= (or (not query!0_dummy) a!18)
                             (or (not query!0_dummy) (not a!13))))))
(let ((a!12 (unit-resolution a!11
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (asserted (not |query!0#level_2!39|))
                             (>= (+ L2_5_3 (* (- 1) L2_4_3)) 0)))
      (a!20 (mp (asserted (or (not query!0_dummy) a!14))
                a!19
                (or (not query!0_dummy) a!18))))
(let ((a!22 (unit-resolution (mp a!20 a!21 (or (not query!0_dummy) (not a!13)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!13))))
(let ((a!23 (unit-resolution (def-axiom (or a!13 (= L2_5_3 query!0_0_n)))
                             a!22
                             (= L2_5_3 query!0_0_n)))
      (a!25 (unit-resolution (def-axiom (or a!13 (= L2_4_3 query!0_1_n)))
                             a!22
                             (= L2_4_3 query!0_1_n))))
(let ((a!24 (th-lemma a!23 (<= (+ L2_5_3 (* (- 1) query!0_0_n)) 0)))
      (a!26 (th-lemma (symm a!25 (= query!0_1_n L2_4_3))
                      (<= (+ query!0_1_n (* (- 1) L2_4_3)) 0))))
  (th-lemma a!12
            a!24
            (unit-resolution (def-axiom (or a!13 a!16)) a!22 a!16)
            a!26
            false))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_2!39|)
------------------------------------------------
-------- [spacer] propagate ../src/muz/spacer/spacer_context.cpp:3168 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 3 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!146))
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_3_2 () Int
  7)
(define-fun L2_1_0 () Int
  4)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  6)
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  7)
(define-fun |query!0#level_4!80| () Bool
  false)
(define-fun |query!0#level_3!68| () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  2)
(define-fun query!0_1_n () Int
  0)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!147))
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!148))
(define-fun L2_1_3 () Int
  4)
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!152))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  false)
(define-fun query!0_4_n () Int
  2)
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  6)
(define-fun query!0_0_n () Int
  (- 1))
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!149))
(define-fun L2_3_3 () Int
  5)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_0_0 () Int
  (- 1))
(define-fun L2_2_3 () Int
  3)
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!154))
(define-fun L2_4_1 () Int
  0)
(define-fun L2_1_2 () Int
  6)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!145))
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!151))
(define-fun query!0_3_n () Int
  5)
(define-fun L2_3_1 () Int
  5)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  3)
(define-fun L2_2_0 () Int
  (- 1))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_0_2 () Int
  2)
(define-fun L2_2_1 () Int
  3)
(define-fun L2_4_0 () Int
  0)
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!150))
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!153))
(define-fun k!151 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!148 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))
(define-fun k!145 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!153 ((x!0 Int)) Int
  (ite (= x!0 2) 6
    6))
(define-fun k!150 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!147 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
    4))
(define-fun k!152 ((x!0 Int)) Int
  (ite (= x!0 3) 5
    5))
(define-fun k!149 ((x!0 Int)) Int
  (ite (= x!0 3) 5
  (ite (= x!0 (- 1)) 7
    5)))
(define-fun k!146 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 4
  (ite (= x!0 2) 6
    4)))
(define-fun k!154 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 7
    7))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!1_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L2_1_3 (* (- 1) L2_3_2))))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_2_3 L2_5_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 3
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun L1_0_0 () Int
  0)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun L2_1_n () Int
  0)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  0)
(define-fun L2_4_n () Int
  1)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!167))
(define-fun L1_5_0 () Int
  1)
(define-fun L1_1_0 () Int
  0)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!170))
(define-fun |L2#level_2!63| () Bool
  false)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!169))
(define-fun L2_5_n () Int
  0)
(define-fun L1_3_0 () Int
  1)
(define-fun L2_0_n () Int
  0)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!168))
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun L2_3_n () Int
  1)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L1_4_0 () Int
  1)
(define-fun L2_tr0 () Bool
  true)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun k!167 ((x!0 Int)) Int
  (ite (= x!0 0) 0
    0))
(define-fun k!168 ((x!0 Int)) Int
  (ite (= x!0 0) 0
    0))
(define-fun k!169 ((x!0 Int)) Int
  (ite (= x!0 0) 1
    1))
(define-fun k!170 ((x!0 Int)) Int
  (ite (= x!0 0) 1
    1))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (<= L2_4_n L1_5_0)
       a!1
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L1_3_0) L1_1_0)))))
  (and (not (<= L1_4_0 0)) (<= L1_4_0 L1_5_0) a!1 (= L1_2_0 0) (= L1_0_0 0)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (not (<= L1_4_n 0))
       a!1
       (= L1_2_n 0)
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_0_n 0)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 3
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))))
  (and (not (<= L1_4_n 0))
       a!1
       (= L1_2_n 0)
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_0_n 0)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not |L1#reach_case_0_1|)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!4 (symm (hypothesis (= (select aux!32_n L1_2_n)
                                (select aux!30_n L1_2_n)))
                 (= (select aux!30_n L1_2_n) (select aux!32_n L1_2_n))))
      (a!6 (monotonicity (symm (hypothesis (= L1_2_0 L1_2_n)) (= L1_2_n L1_2_0))
                         (= (select aux!32_n L1_2_n) (select aux!32_n L1_2_0))))
      (a!7 (ite (= L1_0_n L1_2_0)
                (select aux!32_n L1_2_0)
                (select aux!31_n L1_0_n)))
      (a!10 (symm (hypothesis (= L1_1_n (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) L1_1_n)))
      (a!13 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!16 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               (select aux!29_n L1_0_n)))
      (a!20 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!21 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!22 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!28 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!29 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!32 (asserted (or (not spacer_proxy!5) (not (<= L1_4_n 0)))))
      (a!33 (or (not spacer_proxy!6) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!43 (hypothesis (>= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!44 (hypothesis (<= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!46 (not (>= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!47 (not (<= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!48 (unit-resolution (asserted (or (not spacer_proxy!0) (<= L1_0_n 0)))
                             (asserted spacer_proxy!0)
                             (<= L1_0_n 0)))
      (a!49 (hypothesis (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!51 (not (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!57 (unit-resolution (asserted (or (not spacer_proxy!1) (>= L1_0_n 0)))
                             (asserted spacer_proxy!1)
                             (>= L1_0_n 0)))
      (a!58 (hypothesis (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!59 (not (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!62 (asserted (or (=> L1_tr1 (<= L1_5_0 0)) |L1#level_1!112|)))
      (a!63 (rewrite (= (=> L1_tr1 (<= L1_5_0 0))
                        (or (not L1_tr1) (<= L1_5_0 0)))))
      (a!64 (= (or (=> L1_tr1 (<= L1_5_0 0)) |L1#level_1!112|)
               (or (or (not L1_tr1) (<= L1_5_0 0)) |L1#level_1!112|)))
      (a!65 (= (or (or (not L1_tr1) (<= L1_5_0 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_0 0) |L1#level_1!112|)))
      (a!66 (= (or (=> L1_tr1 (<= L1_5_0 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_0 0) |L1#level_1!112|)))
      (a!74 (unit-resolution (asserted (or (not spacer_proxy!4) (>= L1_2_n 0)))
                             (asserted spacer_proxy!4)
                             (>= L1_2_n 0)))
      (a!75 (not (<= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!78 (unit-resolution (asserted (or (not spacer_proxy!3) (<= L1_2_n 0)))
                             (asserted spacer_proxy!3)
                             (<= L1_2_n 0)))
      (a!79 (not (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0))))
(let ((a!2 (unit-resolution (asserted (or (not spacer_proxy!2) a!1))
                            (asserted spacer_proxy!2)
                            a!1))
      (a!5 (trans (hypothesis (= L1_3_n (select aux!30_n L1_2_n)))
                  a!4
                  (= L1_3_n (select aux!32_n L1_2_n))))
      (a!11 (or (not (= L1_2_0 L1_2_n))
                (not (= L1_1_n (select aux!29_n L1_0_n)))
                (not (= L1_3_n (select aux!30_n L1_2_n)))
                (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
                (not (= (select aux!32_n L1_2_0) a!7))
                (not (= a!7 (select aux!29_n L1_0_n)))))
      (a!14 (or (not (= L1_0_0 L1_0_n))
                (not (= L1_4_0 L1_4_n))
                (not (= L1_5_0 L1_2_0))
                (not (= L1_0_1 L1_0_n))
                (not (= L1_2_1 L1_2_n))
                (not (= L1_4_1 L1_4_n))
                (not (= L1_5_1 L1_2_0))
                (not (= a!7 (select aux!29_n L1_0_n)))
                (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
                (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
                (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
                (not (= L1_3_1 (select aux!35_n L1_2_n)))
                (not (= L1_1_1 (select aux!36_n L1_0_n)))
                (not (= L1_3_0 (select aux!33_n L1_2_0)))
                a!13
                (not (= L1_1_n (select aux!29_n L1_0_n)))
                (not (= L1_1_0 (select aux!34_n L1_0_n)))
                (not (= L1_3_n (select aux!30_n L1_2_n)))
                (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!17 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 a!16
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= L1_5_n (+ 1 L1_2_0))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 (not (<= L1_4_n L1_2_0))))
      (a!18 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               a!7))
      (a!23 (monotonicity (rewrite a!21) (= (not (<= L1_4_n L1_2_0)) a!22)))
      (a!24 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!7 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!22))
      (a!30 (monotonicity (rewrite (= a!28 (not a!29)))
                          (= (or (not L1_tr0) a!28)
                             (or (not L1_tr0) (not a!29)))))
      (a!34 (unit-resolution (asserted a!33)
                             (asserted spacer_proxy!6)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!42 (def-axiom (or (not (= L1_0_n L1_2_0))
                           (= (select aux!32_n L1_2_0) a!7))))
      (a!45 (unit-resolution (hypothesis (not (= L1_0_n L1_2_0)))
                             (symm (th-lemma a!43 a!44 (= L1_2_0 L1_0_n))
                                   (= L1_0_n L1_2_0))
                             false))
      (a!52 (or (>= (+ L1_2_0 (* (- 1) L1_0_n)) 0) a!51))
      (a!60 (or (<= (+ L1_2_0 (* (- 1) L1_0_n)) 0) (not (<= L1_5_0 0)) a!59))
      (a!76 (or (<= (+ L1_2_0 (* (- 1) L1_2_n)) 0) a!47))
      (a!80 (or (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0) a!46)))
(let ((a!3 (lemma (th-lemma a!2 (hypothesis (= L1_3_n L1_1_n)) false)
                  (not (= L1_3_n L1_1_n))))
      (a!8 (trans (trans a!5 a!6 (= L1_3_n (select aux!32_n L1_2_0)))
                  (hypothesis (= (select aux!32_n L1_2_0) a!7))
                  (= L1_3_n a!7)))
      (a!15 (def-axiom (or a!14 (= L1_1_n (select aux!29_n L1_0_n)))))
      (a!19 (monotonicity (rewrite a!18)
                          (= a!16 (= a!7 (select aux!29_n L1_0_n)))))
      (a!27 (monotonicity (rewrite (= a!24 (not a!14)))
                          (= (or (not L1_tr1) a!24)
                             (or (not L1_tr1) (not a!14)))))
      (a!31 (mp (asserted (or (not L1_tr0) a!28))
                a!30
                (or (not L1_tr0) (not a!29))))
      (a!35 (th-lemma (unit-resolution a!32
                                       (asserted spacer_proxy!5)
                                       (not (<= L1_4_n 0)))
                      a!34
                      (hypothesis (<= L1_5_n 0))
                      false))
      (a!40 (def-axiom (or a!14 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!41 (def-axiom (or a!14
                           (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))))
      (a!50 (th-lemma a!48
                      a!49
                      (unit-resolution a!32
                                       (asserted spacer_proxy!5)
                                       (not (<= L1_4_n 0)))
                      a!34
                      (hypothesis a!46)
                      false))
      (a!53 (or a!14 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!61 (lemma (th-lemma (hypothesis (<= L1_5_0 0))
                             a!57
                             (hypothesis a!47)
                             a!58
                             false)
                   a!60))
      (a!72 (def-axiom (or a!14 (= a!7 (select aux!29_n L1_0_n))))))
(let ((a!9 (trans a!8
                  (hypothesis (= a!7 (select aux!29_n L1_0_n)))
                  (= L1_3_n (select aux!29_n L1_0_n))))
      (a!25 (monotonicity (monotonicity a!19 (rewrite a!20) a!23 (= a!17 a!24))
                          (= (or (not L1_tr1) a!17) (or (not L1_tr1) a!24))))
      (a!36 (th-lemma (hypothesis (= L1_5_n 0))
                      (lemma a!35 (not (<= L1_5_n 0)))
                      false)))
(let ((a!12 (lemma (unit-resolution a!3
                                    (trans a!9 a!10 (= L1_3_n L1_1_n))
                                    false)
                   a!11))
      (a!26 (mp (asserted (or (not L1_tr1) a!17)) a!25 (or (not L1_tr1) a!24)))
      (a!37 (unit-resolution (def-axiom (or a!29 (= L1_5_n 0)))
                             (lemma a!36 (not (= L1_5_n 0)))
                             a!29)))
(let ((a!38 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             (unit-resolution a!31 a!37 (not L1_tr0))
                             (asserted (not L1_ext0_n))
                             L1_tr1)))
(let ((a!39 (unit-resolution (mp a!26 a!27 (or (not L1_tr1) (not a!14)))
                             a!38
                             (not a!14)))
      (a!67 (unit-resolution (mp a!62
                                 (trans (monotonicity a!63 a!64)
                                        (rewrite a!65)
                                        a!66)
                                 (or (not L1_tr1)
                                     (<= L1_5_0 0)
                                     |L1#level_1!112|))
                             a!38
                             (asserted (not |L1#level_1!112|))
                             (<= L1_5_0 0))))
(let ((a!54 (unit-resolution (def-axiom a!53)
                             a!39
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!68 (unit-resolution (def-axiom (or a!14 (= L1_5_0 L1_2_0)))
                             a!39
                             (= L1_5_0 L1_2_0))))
(let ((a!55 (th-lemma a!54 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!69 (th-lemma (symm a!68 (= L1_2_0 L1_5_0))
                      (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0))))
(let ((a!56 (unit-resolution (lemma a!50 a!52)
                             a!55
                             (>= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!70 (unit-resolution a!61 a!67 a!69 (<= (+ L1_2_0 (* (- 1) L1_0_n)) 0))))
(let ((a!71 (unit-resolution (lemma a!45 (or (= L1_0_n L1_2_0) a!46 a!47))
                             a!56
                             a!70
                             (= L1_0_n L1_2_0)))
      (a!77 (unit-resolution (lemma (th-lemma a!74
                                              a!48
                                              a!44
                                              (hypothesis a!75)
                                              false)
                                    a!76)
                             a!70
                             (<= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!81 (unit-resolution (lemma (th-lemma a!78
                                              a!57
                                              a!43
                                              (hypothesis a!79)
                                              false)
                                    a!80)
                             a!56
                             (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0))))
(let ((a!73 (unit-resolution a!12
                             (unit-resolution a!15
                                              a!39
                                              (= L1_1_n
                                                 (select aux!29_n L1_0_n)))
                             (unit-resolution a!40
                                              a!39
                                              (= L1_3_n
                                                 (select aux!30_n L1_2_n)))
                             (unit-resolution a!41
                                              a!39
                                              (= (select aux!32_n L1_2_n)
                                                 (select aux!30_n L1_2_n)))
                             (unit-resolution a!42
                                              a!71
                                              (= (select aux!32_n L1_2_0) a!7))
                             (unit-resolution a!72
                                              a!39
                                              (= a!7 (select aux!29_n L1_0_n)))
                             (not (= L1_2_0 L1_2_n)))))
  (th-lemma a!73 a!77 a!81 false)))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(not (<= L1_5_n 0))
(not (<= (+ L1_5_n (* (- 1) L1_0_n)) 0))
(not (<= (+ L1_0_n (* (- 1) L1_2_n)) (- 1)))
(not (<= L1_0_n (- 1)))
(not (<= (+ L1_2_n (* (- 1) L1_0_n)) (- 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(not (<= L1_5_n 0))
(not (<= (+ L1_5_n (* (- 1) L1_0_n)) 0))
(not (<= (+ L1_0_n (* (- 1) L1_2_n)) (- 1)))
(not (<= L1_0_n (- 1)))
(not (<= (+ L1_2_n (* (- 1) L1_0_n)) (- 1)))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L1_3_n (* (- 1) L1_1_n)) 0))
(not (<= L1_5_n 0))
(not (<= (+ L1_5_n (* (- 1) L1_0_n)) 0))
(not (<= (+ L1_0_n (* (- 1) L1_2_n)) (- 1)))
(not (<= L1_0_n (- 1)))
(not (<= (+ L1_2_n (* (- 1) L1_0_n)) (- 1)))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
    (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
    (<= (+ L1_0_n (* (- 1) L1_2_n)) (- 1))
    (<= (+ L1_2_n (* (- 1) L1_0_n)) (- 1))
    (<= L1_0_n (- 1)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      |L1#level_1!112|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0)))))
  (or (=> L2_tr0 a!3) |L2#level_2!63|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0)))))
  (or (=> L1_tr1 a!3) |L1#level_2!113|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_2_1 (* (- 1) L1_0_1)) 0))))
(let ((a!3 (or (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= (+ L1_5_1 (* (- 1) L1_0_1)) 0)
               a!1
               a!2
               (not (>= L1_0_1 0)))))
  (or (=> L1_tr1 a!3) |L1#level_2!113|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 3
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!3 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!4 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0)))
      (a!6 (rewrite (= (+ L1_3_0 (* (- 1) L1_1_0)) (+ (* (- 1) L1_1_0) L1_3_0))))
      (a!7 (= (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
              (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)))
      (a!8 (rewrite (= (+ L1_5_0 (* (- 1) L1_0_0)) (+ (* (- 1) L1_0_0) L1_5_0))))
      (a!9 (= (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
              (<= (+ (* (- 1) L1_0_0) L1_5_0) 0)))
      (a!10 (rewrite (= (+ L1_2_0 (* (- 1) L1_0_0)) (+ (* (- 1) L1_0_0) L1_2_0))))
      (a!11 (= (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0)
               (>= (+ (* (- 1) L1_0_0) L1_2_0) 0)))
      (a!12 (not (>= (+ (* (- 1) L1_0_0) L1_2_0) 0)))
      (a!18 (= (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
               (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!19 (= (<= (+ (* (- 1) L1_0_0) L1_5_0) 0)
               (>= (+ L1_0_0 (* (- 1) L1_5_0)) 0)))
      (a!20 (= (>= (+ (* (- 1) L1_0_0) L1_2_0) 0)
               (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!21 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!30 (hypothesis (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!31 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!34 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= L2_4_n L1_5_0)))
      (a!35 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!36 (and (= L2_5_n 0)
                 (= L1_0_0 L2_0_n)
                 (= L1_2_0 L2_2_n)
                 (= L1_4_0 L2_4_n)
                 (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                 (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                 (= L1_1_0 (select aux!15_n L2_0_n))
                 (= L1_3_0 (select aux!14_n L2_2_n))
                 (= L2_1_n (select aux!12_n L2_0_n))
                 (= L2_3_n (select aux!13_n L2_2_n))
                 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!40 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!42 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!43 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!44 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0) |L2#level_2!63|))
      (a!47 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!50 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!51 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!52 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!53 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!72 (not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)))
      (a!73 (rewrite (= (+ L2_3_n (* (- 1) L2_1_n)) (+ (* (- 1) L2_1_n) L2_3_n))))
      (a!74 (= (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
               (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!75 (not (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)))
      (a!77 (= (<= (+ (* (- 1) L2_1_n) L2_3_n) 0)
               (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!78 (not (>= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!89 (not (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!91 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!95 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!101 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!2 (unit-resolution (asserted a!1)
                            (asserted spacer_proxy!4)
                            (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!5 (or (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!3
               a!4
               (not (>= L1_0_0 0))))
      (a!13 (or (<= (+ (* (- 1) L1_1_0) L1_3_0) 0)
                (<= (+ (* (- 1) L1_0_0) L1_5_0) 0)
                a!3
                a!12
                (not (>= L1_0_0 0))))
      (a!22 (or (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_0_0 (* (- 1) L1_5_0)) 0)
                a!3
                a!21
                (not (>= L1_0_0 0))))
      (a!25 (or (not L2_tr0)
                (>= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                (>= (+ L1_0_0 (* (- 1) L1_5_0)) 0)
                a!3
                a!21
                (not (>= L1_0_0 0))
                |L2#level_2!63|))
      (a!32 (or (not (= L2_5_n 0))
                (not (= L1_0_0 L2_0_n))
                (not (= L1_2_0 L2_2_n))
                (not (= L1_4_0 L2_4_n))
                (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
                (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
                (not (= L1_1_0 (select aux!15_n L2_0_n)))
                (not (= L1_3_0 (select aux!14_n L2_2_n)))
                (not (= L2_1_n (select aux!12_n L2_0_n)))
                (not (= L2_3_n (select aux!13_n L2_2_n)))
                a!31))
      (a!37 (monotonicity (monotonicity (rewrite a!35) (= a!34 a!36))
                          (= (or (not L2_tr0) a!34) (or (not L2_tr0) a!36))))
      (a!41 (unit-resolution (asserted (or (not spacer_proxy!3) a!40))
                             (asserted spacer_proxy!3)
                             a!40))
      (a!45 (trans (monotonicity (rewrite (= a!42 a!43))
                                 (= (or a!42 |L2#level_2!63|)
                                    (or a!43 |L2#level_2!63|)))
                   (rewrite (= (or a!43 |L2#level_2!63|) a!44))
                   (= (or a!42 |L2#level_2!63|) a!44)))
      (a!48 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!47
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!54 (monotonicity (rewrite a!52) (= (not (<= L2_4_n L2_5_0)) a!53)))
      (a!55 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!53))
      (a!76 (monotonicity (monotonicity (monotonicity a!73 a!74) (= a!72 a!75))
                          (= (or (not spacer_proxy!0) a!72)
                             (or (not spacer_proxy!0) a!75))))
      (a!79 (monotonicity (monotonicity (rewrite a!77) (= a!75 a!78))
                          (= (or (not spacer_proxy!0) a!75)
                             (or (not spacer_proxy!0) a!78))))
      (a!92 (unit-resolution (asserted a!91)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!96 (unit-resolution (asserted a!95)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!102 (unit-resolution (asserted a!101)
                              (asserted spacer_proxy!2)
                              (>= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!14 (monotonicity (monotonicity (monotonicity a!6 a!7)
                                        (monotonicity a!8 a!9)
                                        (monotonicity (monotonicity a!10 a!11)
                                                      (= a!4 a!12))
                                        (= a!5 a!13))
                          (= (=> L2_tr0 a!5) (=> L2_tr0 a!13))))
      (a!15 (rewrite (= (=> L2_tr0 a!13) (or (not L2_tr0) a!13))))
      (a!17 (= (or (=> L2_tr0 a!5) |L2#level_2!63|)
               (or (or (not L2_tr0) a!13) |L2#level_2!63|)))
      (a!23 (monotonicity (monotonicity (rewrite a!18)
                                        (rewrite a!19)
                                        (monotonicity (rewrite a!20)
                                                      (= a!12 a!21))
                                        (= a!13 a!22))
                          (= (or (not L2_tr0) a!13) (or (not L2_tr0) a!22))))
      (a!24 (= (or (or (not L2_tr0) a!13) |L2#level_2!63|)
               (or (or (not L2_tr0) a!22) |L2#level_2!63|)))
      (a!26 (= (or (or (not L2_tr0) a!22) |L2#level_2!63|) a!25))
      (a!27 (= (or (or (not L2_tr0) a!13) |L2#level_2!63|) a!25))
      (a!33 (def-axiom (or a!32 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!38 (mp (asserted (or (not L2_tr0) a!34)) a!37 (or (not L2_tr0) a!36)))
      (a!39 (monotonicity (rewrite (= a!36 (not a!32)))
                          (= (or (not L2_tr0) a!36)
                             (or (not L2_tr0) (not a!32)))))
      (a!46 (unit-resolution (mp (asserted (or a!42 |L2#level_2!63|)) a!45 a!44)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_2!63|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!49 (or a!48 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!56 (monotonicity (monotonicity (rewrite a!51) a!54 (= a!50 a!55))
                          (= (or (not L2_tr1) a!50) (or (not L2_tr1) a!55))))
      (a!58 (monotonicity (rewrite (= a!55 (not a!48)))
                          (= (or (not L2_tr1) a!55)
                             (or (not L2_tr1) (not a!48)))))
      (a!66 (def-axiom (or a!32
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!69 (def-axiom (or a!32 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!80 (trans a!76
                   a!79
                   (= (or (not spacer_proxy!0) a!72)
                      (or (not spacer_proxy!0) a!78))))
      (a!82 (def-axiom (or a!32 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!83 (def-axiom (or a!32
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!86 (def-axiom (or a!32 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!108 (or a!32 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!16 (trans a!14 a!15 (= (=> L2_tr0 a!5) (or (not L2_tr0) a!13))))
      (a!57 (mp (asserted (or (not L2_tr1) a!50)) a!56 (or (not L2_tr1) a!55)))
      (a!81 (mp (asserted (or (not spacer_proxy!0) a!72))
                a!80
                (or (not spacer_proxy!0) a!78))))
(let ((a!28 (trans (monotonicity a!16 a!17)
                   (trans (monotonicity a!23 a!24) (rewrite a!26) a!27)
                   (= (or (=> L2_tr0 a!5) |L2#level_2!63|) a!25)))
      (a!59 (unit-resolution (mp a!57 a!58 (or (not L2_tr1) (not a!48)))
                             (hypothesis L2_tr1)
                             (not a!48))))
(let ((a!29 (mp (asserted (or (=> L2_tr0 a!5) |L2#level_2!63|)) a!28 a!25))
      (a!60 (unit-resolution (def-axiom a!49)
                             a!59
                             (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!62 (unit-resolution (def-axiom (or a!48 (= L2_4_0 L2_4_n)))
                             a!59
                             (= L2_4_0 L2_4_n))))
(let ((a!61 (th-lemma a!60 (<= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!63 (th-lemma a!62 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!64 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma (th-lemma a!41 a!46 a!61 a!63 false)
                                    (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!65 (unit-resolution (mp a!38 a!39 (or (not L2_tr0) (not a!32)))
                             a!64
                             (not a!32))))
(let ((a!67 (symm (unit-resolution a!66
                                   a!65
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!70 (symm (unit-resolution a!69
                                   a!65
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!84 (symm (unit-resolution a!83
                                   a!65
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!87 (symm (unit-resolution a!86
                                   a!65
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!93 (unit-resolution (def-axiom (or a!32 (= L1_2_0 L2_2_n)))
                             a!65
                             (= L1_2_0 L2_2_n)))
      (a!97 (unit-resolution (def-axiom (or a!32 (= L1_0_0 L2_0_n)))
                             a!65
                             (= L1_0_0 L2_0_n)))
      (a!105 (unit-resolution (def-axiom (or a!32 (= L2_5_n 0)))
                              a!65
                              (= L2_5_n 0)))
      (a!109 (unit-resolution (def-axiom a!108)
                              a!65
                              (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!68 (trans (unit-resolution a!33
                                    a!65
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!67
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!85 (trans (unit-resolution a!82
                                    a!65
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!84
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!94 (th-lemma (symm a!93 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!98 (th-lemma (symm a!97 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!100 (th-lemma (symm a!93 (= L2_2_n L1_2_0))
                       (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!103 (th-lemma (symm a!97 (= L2_0_n L1_0_0))
                       (>= (+ L2_0_n (* (- 1) L1_0_0)) 0))))
(let ((a!71 (th-lemma (trans a!68 a!70 (= L2_3_n L1_3_0))
                      (<= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!88 (th-lemma (trans a!85 a!87 (= L2_1_n L1_1_0))
                      (>= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!99 (lemma (th-lemma a!92 a!94 a!96 (hypothesis a!3) a!98 false)
                   (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!104 (lemma (th-lemma a!2 a!100 a!102 (hypothesis a!21) a!103 false)
                    (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!106 (th-lemma (hypothesis (not (>= L1_0_0 0)))
                       (th-lemma a!105 (>= L2_5_n 0))
                       a!92
                       a!98
                       false)))
(let ((a!90 (lemma (th-lemma a!30
                             a!71
                             (unit-resolution a!81
                                              (asserted spacer_proxy!0)
                                              a!78)
                             a!88
                             false)
                   a!89)))
(let ((a!107 (unit-resolution a!29
                              a!90
                              (asserted (not |L2#level_2!63|))
                              a!64
                              a!99
                              a!104
                              (lemma a!106 (>= L1_0_0 0))
                              (>= (+ L1_0_0 (* (- 1) L1_5_0)) 0))))
  (th-lemma a!2 a!107 a!109 a!41 a!103 false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_4_n (* (- 1) L2_0_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_2_n (* (- 1) L2_0_n)) (- 1)))
(not (<= (+ L2_0_n (* (- 1) L2_2_n)) (- 1)))
(not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_4_n (* (- 1) L2_0_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_2_n (* (- 1) L2_0_n)) (- 1)))
(not (<= (+ L2_0_n (* (- 1) L2_2_n)) (- 1)))
(not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_4_n (* (- 1) L2_0_n)) 0))
(not (<= (+ L2_4_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_2_n (* (- 1) L2_0_n)) (- 1)))
(not (<= (+ L2_0_n (* (- 1) L2_2_n)) (- 1)))
(not (<= (+ L2_3_n (* (- 1) L2_1_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
    (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1))
    (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
    (<= (+ L2_0_n (* (- 1) L2_2_n)) (- 1))
    (<= (+ L2_2_n (* (- 1) L2_0_n)) (- 1)))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3
      |L2#level_2!63|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_0_1)) 0))))
(let ((a!4 (or (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_0_1)) 0)
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_0_2)) 0))))
(let ((a!4 (or (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_0_2)) 0)
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_0_3)) 0))))
(let ((a!4 (or (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_0_3)) 0)
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_3!79|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 3 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
query!0_dummy:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0000
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun aux!1_n () (Array Int Int)
  (_ as-array k!236))
(define-fun query!0_ext0_n () Bool
  false)
(define-fun L2_3_2 () Int
  0)
(define-fun L2_1_0 () Int
  1)
(define-fun L2_2_2 () Int
  (- 1))
(define-fun |query!0#level_1!38| () Bool
  true)
(define-fun query!0_5_n () Int
  1796)
(define-fun L2_4_3 () Int
  0)
(define-fun L2_3_0 () Int
  0)
(define-fun |query!0#level_4!80| () Bool
  false)
(define-fun |query!0#level_3!68| () Bool
  false)
(define-fun L2_5_0 () Int
  (- 1))
(define-fun |query!0#level_2!39| () Bool
  true)
(define-fun L2_0_1 () Int
  8365)
(define-fun query!0_1_n () Int
  0)
(define-fun L2_0_3 () Int
  (- 1))
(define-fun L2_5_3 () Int
  (- 1))
(define-fun aux!4_n () (Array Int Int)
  (_ as-array k!237))
(define-fun aux!7_n () (Array Int Int)
  (_ as-array k!238))
(define-fun L2_1_3 () Int
  1)
(define-fun aux!5_n () (Array Int Int)
  (_ as-array k!242))
(define-fun |query!0#level_0!11| () Bool
  true)
(define-fun |query!0#level_5!142| () Bool
  false)
(define-fun query!0_4_n () Int
  8365)
(define-fun L2_4_2 () Int
  0)
(define-fun L2_1_1 () Int
  1796)
(define-fun query!0_0_n () Int
  (- 1))
(define-fun aux!2_n () (Array Int Int)
  (_ as-array k!239))
(define-fun L2_3_3 () Int
  2282)
(define-fun query!0_dummy () Bool
  true)
(define-fun L2_0_0 () Int
  (- 1))
(define-fun L2_2_3 () Int
  (- 2))
(define-fun aux!3_n () (Array Int Int)
  (_ as-array k!244))
(define-fun L2_4_1 () Int
  0)
(define-fun L2_1_2 () Int
  1796)
(define-fun aux!10_n () (Array Int Int)
  (_ as-array k!235))
(define-fun aux!6_n () (Array Int Int)
  (_ as-array k!241))
(define-fun query!0_3_n () Int
  2282)
(define-fun L2_3_1 () Int
  2282)
(define-fun L2_5_1 () Int
  (- 1))
(define-fun query!0_2_n () Int
  (- 2))
(define-fun L2_2_0 () Int
  (- 1))
(define-fun L2_5_2 () Int
  (- 1))
(define-fun |vsolver#0| () Bool
  true)
(define-fun L2_0_2 () Int
  8365)
(define-fun L2_2_1 () Int
  (- 2))
(define-fun L2_4_0 () Int
  0)
(define-fun aux!9_n () (Array Int Int)
  (_ as-array k!240))
(define-fun aux!8_n () (Array Int Int)
  (_ as-array k!243))
(define-fun k!239 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 2282
  (ite (= x!0 (- 1)) 0
    2282)))
(define-fun k!236 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
  (ite (= x!0 8365) 1796
    1)))
(define-fun k!244 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))
(define-fun k!241 ((x!0 Int)) Int
  (ite (= x!0 8365) 1796
    1796))
(define-fun k!238 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 0
    0))
(define-fun k!235 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!243 ((x!0 Int)) Int
  (ite (= x!0 8365) 1796
    1796))
(define-fun k!240 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 2282
    2282))
(define-fun k!237 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 1
    1))
(define-fun k!242 ((x!0 Int)) Int
  (ite (= x!0 (- 2)) 2282
    2282))

Transition:
(and (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (not (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n)))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (not (<= query!0_1_n query!0_0_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(and (not (<= query!0_1_n query!0_0_n))
     (= L2_3_0 (select aux!3_n query!0_0_n))
     (= L2_0_0 query!0_0_n)
     (= L2_2_0 query!0_0_n)
     (= L2_4_0 query!0_1_n)
     (= L2_5_0 query!0_0_n)
     (= L2_0_1 query!0_4_n)
     (= L2_2_1 query!0_2_n)
     (= L2_4_1 query!0_1_n)
     (= L2_5_1 query!0_0_n)
     (= L2_0_2 query!0_4_n)
     (= L2_2_2 query!0_0_n)
     (= L2_4_2 query!0_1_n)
     (= L2_5_2 query!0_0_n)
     (= L2_0_3 query!0_0_n)
     (= L2_2_3 query!0_2_n)
     (= L2_4_3 query!0_1_n)
     (= L2_5_3 query!0_0_n)
     (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
     (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
     (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
     (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
     (< (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
     (= L2_1_3 (select aux!10_n query!0_0_n))
     (= L2_3_3 (select aux!9_n query!0_2_n))
     (= L2_3_2 (select aux!7_n query!0_0_n))
     (= L2_1_2 (select aux!8_n query!0_4_n))
     (= L2_1_1 (select aux!6_n query!0_4_n))
     (= L2_3_1 (select aux!5_n query!0_2_n))
     (= query!0_3_n (select aux!2_n query!0_2_n))
     (= query!0_5_n (select aux!1_n query!0_4_n))
     (= L2_1_0 (select aux!4_n query!0_0_n)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) L2_1_3) L2_3_2)))))
  (and (not (<= L2_0_2 L2_5_3))
       (not (<= L2_5_3 L2_2_3))
       (= (+ L2_1_0 (* (- 1) L2_1_3)) 0)
       (not (<= L2_4_3 L2_5_3))
       (= (+ L2_3_0 (* (- 1) L2_3_2)) 0)
       (= L2_0_0 L2_5_3)
       (= L2_2_0 L2_5_3)
       (= L2_4_0 L2_4_3)
       (= L2_5_0 L2_5_3)
       (= L2_0_1 L2_0_2)
       (= L2_2_1 L2_2_3)
       (= L2_4_1 L2_4_3)
       (= L2_5_1 L2_5_3)
       (= L2_2_2 L2_5_3)
       (= L2_4_2 L2_4_3)
       (= L2_5_2 L2_5_3)
       (= L2_0_3 L2_5_3)
       (= (+ (* (- 1) L2_3_1) L2_3_3) 0)
       (= (+ (* (- 1) L2_1_2) L2_1_1) 0)
       a!1))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 3
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
reach assumptions used
(not L2_tr1)
------------------------------------------------
-------- [spacer_verbose] find_rule ../src/muz/spacer/spacer_context.cpp:269 ---------
L2_tr0:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
L2_tr1:
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:829 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3315 ---------
Model:
(define-fun |L2#level_1!62| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun L1_0_0 () Int
  0)
(define-fun |L2#level_4!81| () Bool
  false)
(define-fun L2_ext0_n () Bool
  false)
(define-fun spacer_proxy!0 () Bool
  false)
(define-fun L2_1_n () Int
  5920)
(define-fun |L2#level_0!22| () Bool
  true)
(define-fun L1_2_0 () Int
  0)
(define-fun L2_4_n () Int
  1889)
(define-fun aux!15_n () (Array Int Int)
  (_ as-array k!257))
(define-fun L1_5_0 () Int
  1889)
(define-fun L1_1_0 () Int
  5920)
(define-fun |L1#reach_case_0_0| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun aux!13_n () (Array Int Int)
  (_ as-array k!260))
(define-fun |L2#level_2!63| () Bool
  false)
(define-fun spacer_proxy!9 () Bool
  false)
(define-fun aux!14_n () (Array Int Int)
  (_ as-array k!259))
(define-fun spacer_proxy!18 () Bool
  true)
(define-fun L2_5_n () Int
  0)
(define-fun L2_0_n () Int
  0)
(define-fun L1_3_0 () Int
  5919)
(define-fun |L2#level_3!79| () Bool
  false)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun aux!12_n () (Array Int Int)
  (_ as-array k!258))
(define-fun L2_2_n () Int
  0)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun L2_3_n () Int
  5919)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |L2#level_5!143| () Bool
  false)
(define-fun L1_4_0 () Int
  1889)
(define-fun L2_tr0 () Bool
  true)
(define-fun L2_tr1 () Bool
  false)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun k!259 ((x!0 Int)) Int
  (ite (= x!0 0) 5919
    5919))
(define-fun k!260 ((x!0 Int)) Int
  (ite (= x!0 0) 5919
    5919))
(define-fun k!257 ((x!0 Int)) Int
  (ite (= x!0 0) 5920
    5920))
(define-fun k!258 ((x!0 Int)) Int
  (ite (= x!0 0) 5920
    5920))

Transition:
(and (= L2_5_n 0)
     (= L1_0_0 L2_0_n)
     (= L1_2_0 L2_2_n)
     (= L1_4_0 L2_4_n)
     (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
     (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
     (= L1_1_0 (select aux!15_n L2_0_n))
     (= L1_3_0 (select aux!14_n L2_2_n))
     (= L2_1_n (select aux!12_n L2_0_n))
     (= L2_3_n (select aux!13_n L2_2_n))
     (<= L2_4_n L1_5_0))
Phi:
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] create_children ../src/muz/spacer/spacer_context.cpp:3365 ---------
Implicant
(let ((a!1 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!2 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0))))
  (and (<= L2_4_n L1_5_0)
       a!1
       (= L2_5_n 0)
       (= L1_0_0 L2_0_n)
       (= L1_2_0 L2_2_n)
       (= L1_4_0 L2_4_n)
       (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
       (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
       (= L1_1_0 (select aux!15_n L2_0_n))
       (= L1_3_0 (select aux!14_n L2_2_n))
       (= L2_1_n (select aux!12_n L2_0_n))
       (= L2_3_n (select aux!13_n L2_2_n))
       (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ L1_3_0 (* (- 1) L1_1_0))))))
  (and (not (<= L1_4_0 0)) (<= L1_4_0 L1_5_0) a!1 (= L1_2_0 0) (= L1_0_0 0)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L1 level: 1 depth: 0
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (not (<= L1_4_n 0))
       (= L1_2_n 0)
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_0_n 0)
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L1 level: 1 depth: 3
(let ((a!1 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))))
  (and (not (<= L1_4_n 0))
       (= L1_2_n 0)
       (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)
       (= L1_0_n 0)
       a!1))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not |L1#reach_case_0_1|)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (hypothesis (>= (+ L1_3_0 (* (- 1) L1_1_n)) 0)))
      (a!2 (not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
      (a!3 (rewrite (= (+ L1_1_n (* (- 1) L1_3_n)) (+ (* (- 1) L1_3_n) L1_1_n))))
      (a!4 (= (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)
              (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)))
      (a!5 (not (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)))
      (a!7 (= (<= (+ (* (- 1) L1_3_n) L1_1_n) 0)
              (>= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!8 (not (>= (+ L1_3_n (* (- 1) L1_1_n)) 0)))
      (a!12 (hypothesis (<= (+ L1_3_0 (* (- 1) L1_3_n)) 0)))
      (a!13 (not (<= (+ L1_3_0 (* (- 1) L1_3_n)) 0)))
      (a!14 (not (>= (+ L1_3_0 (* (- 1) L1_1_n)) 0)))
      (a!16 (or (not (= L1_3_0 L1_3_n)) (<= (+ L1_3_0 (* (- 1) L1_3_n)) 0)))
      (a!18 (symm (hypothesis (= (select aux!32_n L1_2_n)
                                 (select aux!30_n L1_2_n)))
                  (= (select aux!30_n L1_2_n) (select aux!32_n L1_2_n))))
      (a!20 (monotonicity (symm (hypothesis (= L1_2_0 L1_2_n))
                                (= L1_2_n L1_2_0))
                          (= (select aux!32_n L1_2_n) (select aux!32_n L1_2_0))))
      (a!21 (ite (= L1_0_n L1_2_0)
                 (select aux!32_n L1_2_0)
                 (select aux!31_n L1_0_n)))
      (a!24 (symm (hypothesis (= L1_1_n (select aux!29_n L1_0_n)))
                  (= (select aux!29_n L1_0_n) L1_1_n)))
      (a!28 (hypothesis (>= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!29 (hypothesis (<= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!31 (not (>= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!32 (not (<= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!33 (unit-resolution (asserted (or (not spacer_proxy!0) (<= L1_0_n 0)))
                             (asserted spacer_proxy!0)
                             (<= L1_0_n 0)))
      (a!34 (hypothesis (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!35 (asserted (or (not spacer_proxy!5) (not (<= L1_4_n 0)))))
      (a!36 (or (not spacer_proxy!6) (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!39 (not (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!41 (not (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!44 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               (select aux!29_n L1_0_n)))
      (a!48 (= (= L1_5_n (+ 1 L1_2_0)) (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!49 (= (<= L1_4_n L1_2_0) (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!50 (not (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!56 (and (= L1_5_n 0)
                 (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n))
                 (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n))
                 (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n))
                 (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n))
                 (= L1_1_n (select aux!23_n L1_0_n))
                 (= L1_3_n (select aux!24_n L1_2_n))))
      (a!57 (or (not (= L1_5_n 0))
                (not (= (select aux!26_n L1_2_n) (select aux!24_n L1_2_n)))
                (not (= (select aux!28_n L1_0_n) (select aux!25_n L1_0_n)))
                (not (= (select aux!27_n L1_2_n) (select aux!26_n L1_2_n)))
                (not (= (select aux!25_n L1_0_n) (select aux!23_n L1_0_n)))
                (not (= L1_1_n (select aux!23_n L1_0_n)))
                (not (= L1_3_n (select aux!24_n L1_2_n)))))
      (a!68 (unit-resolution (asserted (or (not spacer_proxy!1) (>= L1_0_n 0)))
                             (asserted spacer_proxy!1)
                             (>= L1_0_n 0)))
      (a!69 (hypothesis (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!70 (not (<= (+ L1_2_0 (* (- 1) L1_5_0)) 0)))
      (a!73 (asserted (or (=> L1_tr1 (<= L1_5_0 0)) |L1#level_1!112|)))
      (a!74 (rewrite (= (=> L1_tr1 (<= L1_5_0 0))
                        (or (not L1_tr1) (<= L1_5_0 0)))))
      (a!75 (= (or (=> L1_tr1 (<= L1_5_0 0)) |L1#level_1!112|)
               (or (or (not L1_tr1) (<= L1_5_0 0)) |L1#level_1!112|)))
      (a!76 (= (or (or (not L1_tr1) (<= L1_5_0 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_0 0) |L1#level_1!112|)))
      (a!77 (= (or (=> L1_tr1 (<= L1_5_0 0)) |L1#level_1!112|)
               (or (not L1_tr1) (<= L1_5_0 0) |L1#level_1!112|)))
      (a!81 (or (not L1_tr1) (<= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!85 (hypothesis (<= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!86 (hypothesis (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!88 (not (<= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!89 (not (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0)))
      (a!90 (unit-resolution (asserted (or (not spacer_proxy!3) (<= L1_2_n 0)))
                             (asserted spacer_proxy!3)
                             (<= L1_2_n 0)))
      (a!93 (unit-resolution (asserted (or (not spacer_proxy!4) (>= L1_2_n 0)))
                             (asserted spacer_proxy!4)
                             (>= L1_2_n 0))))
(let ((a!6 (monotonicity (monotonicity (monotonicity a!3 a!4) (= a!2 a!5))
                         (= (or (not spacer_proxy!24) a!2)
                            (or (not spacer_proxy!24) a!5))))
      (a!9 (monotonicity (monotonicity (rewrite a!7) (= a!5 a!8))
                         (= (or (not spacer_proxy!24) a!5)
                            (or (not spacer_proxy!24) a!8))))
      (a!17 (lemma (th-lemma (hypothesis a!13)
                             (hypothesis (= L1_3_0 L1_3_n))
                             false)
                   a!16))
      (a!19 (trans (hypothesis (= L1_3_n (select aux!30_n L1_2_n)))
                   a!18
                   (= L1_3_n (select aux!32_n L1_2_n))))
      (a!26 (or (not (= L1_2_0 L1_2_n))
                (= L1_3_n L1_1_n)
                (not (= L1_3_n (select aux!30_n L1_2_n)))
                (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
                (not (= (select aux!32_n L1_2_0) a!21))
                (not (= a!21 (select aux!29_n L1_0_n)))
                (not (= L1_1_n (select aux!29_n L1_0_n)))))
      (a!27 (def-axiom (or (not (= L1_0_n L1_2_0))
                           (= (select aux!32_n L1_2_0) a!21))))
      (a!30 (unit-resolution (hypothesis (not (= L1_0_n L1_2_0)))
                             (symm (th-lemma a!28 a!29 (= L1_2_0 L1_0_n))
                                   (= L1_0_n L1_2_0))
                             false))
      (a!37 (unit-resolution (asserted a!36)
                             (asserted spacer_proxy!6)
                             (<= (+ L1_4_n (* (- 1) L1_5_n)) 0)))
      (a!40 (or (>= (+ L1_2_0 (* (- 1) L1_0_n)) 0) a!39))
      (a!42 (or (not (= L1_0_0 L1_0_n))
                (not (= L1_4_0 L1_4_n))
                (not (= L1_5_0 L1_2_0))
                (not (= L1_0_1 L1_0_n))
                (not (= L1_2_1 L1_2_n))
                (not (= L1_4_1 L1_4_n))
                (not (= L1_5_1 L1_2_0))
                (not (= a!21 (select aux!29_n L1_0_n)))
                (not (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n)))
                (not (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n)))
                (not (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0)))
                (not (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n)))
                (not (= L1_3_1 (select aux!35_n L1_2_n)))
                (not (= L1_1_1 (select aux!36_n L1_0_n)))
                (not (= L1_3_0 (select aux!33_n L1_2_0)))
                a!41
                (not (= L1_1_n (select aux!29_n L1_0_n)))
                (not (= L1_1_0 (select aux!34_n L1_0_n)))
                (not (= L1_3_n (select aux!30_n L1_2_n)))
                (>= (+ L1_2_0 (* (- 1) L1_4_n)) 0)))
      (a!45 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 a!44
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= L1_5_n (+ 1 L1_2_0))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 (not (<= L1_4_n L1_2_0))))
      (a!46 (= (select (store aux!31_n L1_2_0 (select aux!32_n L1_2_0)) L1_0_n)
               a!21))
      (a!51 (monotonicity (rewrite a!49) (= (not (<= L1_4_n L1_2_0)) a!50)))
      (a!52 (and (= L1_0_0 L1_0_n)
                 (= L1_4_0 L1_4_n)
                 (= L1_5_0 L1_2_0)
                 (= L1_0_1 L1_0_n)
                 (= L1_2_1 L1_2_n)
                 (= L1_4_1 L1_4_n)
                 (= L1_5_1 L1_2_0)
                 (= a!21 (select aux!29_n L1_0_n))
                 (= (select aux!34_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!36_n L1_0_n) (select aux!31_n L1_0_n))
                 (= (select aux!35_n L1_2_n) (select aux!32_n L1_2_n))
                 (= (select aux!33_n L1_2_0) (select aux!32_n L1_2_0))
                 (= (select aux!32_n L1_2_n) (select aux!30_n L1_2_n))
                 (= L1_3_1 (select aux!35_n L1_2_n))
                 (= L1_1_1 (select aux!36_n L1_0_n))
                 (= L1_3_0 (select aux!33_n L1_2_0))
                 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))
                 (= L1_1_n (select aux!29_n L1_0_n))
                 (= L1_1_0 (select aux!34_n L1_0_n))
                 (= L1_3_n (select aux!30_n L1_2_n))
                 a!50))
      (a!58 (monotonicity (rewrite (= a!56 (not a!57)))
                          (= (or (not L1_tr0) a!56)
                             (or (not L1_tr0) (not a!57)))))
      (a!71 (or (<= (+ L1_2_0 (* (- 1) L1_0_n)) 0) (not (<= L1_5_0 0)) a!70))
      (a!78 (unit-resolution (mp a!73
                                 (trans (monotonicity a!74 a!75)
                                        (rewrite a!76)
                                        a!77)
                                 (or (not L1_tr1)
                                     (<= L1_5_0 0)
                                     |L1#level_1!112|))
                             (hypothesis L1_tr1)
                             (asserted (not |L1#level_1!112|))
                             (<= L1_5_0 0)))
      (a!87 (th-lemma (hypothesis (not (= L1_2_0 L1_2_n))) a!85 a!86 false))
      (a!91 (or (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0) a!31))
      (a!94 (or (<= (+ L1_2_0 (* (- 1) L1_2_n)) 0) a!32)))
(let ((a!10 (trans a!6
                   a!9
                   (= (or (not spacer_proxy!24) a!2)
                      (or (not spacer_proxy!24) a!8))))
      (a!22 (trans (trans a!19 a!20 (= L1_3_n (select aux!32_n L1_2_0)))
                   (hypothesis (= (select aux!32_n L1_2_0) a!21))
                   (= L1_3_n a!21)))
      (a!38 (th-lemma a!33
                      a!34
                      (unit-resolution a!35
                                       (asserted spacer_proxy!5)
                                       (not (<= L1_4_n 0)))
                      a!37
                      (hypothesis a!31)
                      false))
      (a!43 (or a!42 (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!47 (monotonicity (rewrite a!46)
                          (= a!44 (= a!21 (select aux!29_n L1_0_n)))))
      (a!55 (monotonicity (rewrite (= a!52 (not a!42)))
                          (= (or (not L1_tr1) a!52)
                             (or (not L1_tr1) (not a!42)))))
      (a!59 (mp (asserted (or (not L1_tr0) a!56))
                a!58
                (or (not L1_tr0) (not a!57))))
      (a!60 (th-lemma (unit-resolution a!35
                                       (asserted spacer_proxy!5)
                                       (not (<= L1_4_n 0)))
                      a!37
                      (hypothesis (<= L1_5_n 0))
                      false))
      (a!72 (lemma (th-lemma (hypothesis (<= L1_5_0 0))
                             a!68
                             (hypothesis a!32)
                             a!69
                             false)
                   a!71))
      (a!97 (def-axiom (or a!42 (= a!21 (select aux!29_n L1_0_n)))))
      (a!98 (def-axiom (or a!42 (= L1_3_n (select aux!30_n L1_2_n)))))
      (a!99 (def-axiom (or a!42 (= L1_1_n (select aux!29_n L1_0_n)))))
      (a!100 (def-axiom (or a!42
                            (= (select aux!32_n L1_2_n)
                               (select aux!30_n L1_2_n)))))
      (a!102 (def-axiom (or a!42 (= L1_3_0 (select aux!33_n L1_2_0)))))
      (a!103 (def-axiom (or a!42
                            (= (select aux!33_n L1_2_0)
                               (select aux!32_n L1_2_0))))))
(let ((a!11 (mp (asserted (or (not spacer_proxy!24) a!2))
                a!10
                (or (not spacer_proxy!24) a!8)))
      (a!23 (trans a!22
                   (hypothesis (= a!21 (select aux!29_n L1_0_n)))
                   (= L1_3_n (select aux!29_n L1_0_n))))
      (a!53 (monotonicity (monotonicity a!47 (rewrite a!48) a!51 (= a!45 a!52))
                          (= (or (not L1_tr1) a!45) (or (not L1_tr1) a!52))))
      (a!61 (th-lemma (hypothesis (= L1_5_n 0))
                      (lemma a!60 (not (<= L1_5_n 0)))
                      false)))
(let ((a!15 (lemma (th-lemma a!1
                             (unit-resolution a!11
                                              (asserted spacer_proxy!24)
                                              a!8)
                             a!12
                             false)
                   (or a!13 a!14)))
      (a!25 (unit-resolution (hypothesis (not (= L1_3_n L1_1_n)))
                             (trans a!23 a!24 (= L1_3_n L1_1_n))
                             false))
      (a!54 (mp (asserted (or (not L1_tr1) a!45)) a!53 (or (not L1_tr1) a!52)))
      (a!62 (unit-resolution (def-axiom (or a!57 (= L1_5_n 0)))
                             (lemma a!61 (not (= L1_5_n 0)))
                             a!57)))
(let ((a!63 (unit-resolution (asserted (or L1_ext0_n L1_tr0 L1_tr1))
                             (unit-resolution a!59 a!62 (not L1_tr0))
                             (asserted (not L1_ext0_n))
                             L1_tr1))
      (a!79 (unit-resolution (mp a!54 a!55 (or (not L1_tr1) (not a!42)))
                             (hypothesis L1_tr1)
                             (not a!42))))
(let ((a!64 (unit-resolution (mp a!54 a!55 (or (not L1_tr1) (not a!42)))
                             a!63
                             (not a!42)))
      (a!80 (unit-resolution (def-axiom (or a!42 (= L1_5_0 L1_2_0)))
                             a!79
                             (= L1_5_0 L1_2_0))))
(let ((a!65 (unit-resolution (def-axiom a!43)
                             a!64
                             (= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!82 (lemma (th-lemma (unit-resolution a!72 a!78 (hypothesis a!32) a!70)
                             (symm a!80 (= L1_2_0 L1_5_0))
                             false)
                   a!81))
      (a!104 (trans (unit-resolution a!102
                                     a!64
                                     (= L1_3_0 (select aux!33_n L1_2_0)))
                    (unit-resolution a!103
                                     a!64
                                     (= (select aux!33_n L1_2_0)
                                        (select aux!32_n L1_2_0)))
                    (= L1_3_0 (select aux!32_n L1_2_0))))
      (a!107 (symm (unit-resolution a!99
                                    a!64
                                    (= L1_1_n (select aux!29_n L1_0_n)))
                   (= (select aux!29_n L1_0_n) L1_1_n))))
(let ((a!66 (th-lemma a!65 (>= (+ L1_2_0 (* (- 1) L1_5_n)) (- 1))))
      (a!83 (unit-resolution a!82 a!63 (<= (+ L1_2_0 (* (- 1) L1_0_n)) 0))))
(let ((a!67 (unit-resolution (lemma a!38 a!40)
                             a!66
                             (>= (+ L1_2_0 (* (- 1) L1_0_n)) 0)))
      (a!95 (unit-resolution (lemma (th-lemma a!93
                                              a!33
                                              a!29
                                              (hypothesis a!88)
                                              false)
                                    a!94)
                             a!83
                             (<= (+ L1_2_0 (* (- 1) L1_2_n)) 0))))
(let ((a!84 (unit-resolution (lemma a!30 (or (= L1_0_n L1_2_0) a!31 a!32))
                             a!67
                             a!83
                             (= L1_0_n L1_2_0)))
      (a!92 (unit-resolution (lemma (th-lemma a!90
                                              a!68
                                              a!28
                                              (hypothesis a!89)
                                              false)
                                    a!91)
                             a!67
                             (>= (+ L1_2_0 (* (- 1) L1_2_n)) 0))))
(let ((a!96 (unit-resolution (lemma a!87 (or (= L1_2_0 L1_2_n) a!88 a!89))
                             a!92
                             a!95
                             (= L1_2_0 L1_2_n)))
      (a!105 (trans a!104
                    (unit-resolution a!27
                                     a!84
                                     (= (select aux!32_n L1_2_0) a!21))
                    (= L1_3_0 a!21))))
(let ((a!101 (unit-resolution (lemma a!25 a!26)
                              (unit-resolution a!27
                                               a!84
                                               (= (select aux!32_n L1_2_0) a!21))
                              a!96
                              (unit-resolution a!97
                                               a!64
                                               (= a!21 (select aux!29_n L1_0_n)))
                              (unit-resolution a!98
                                               a!64
                                               (= L1_3_n
                                                  (select aux!30_n L1_2_n)))
                              (unit-resolution a!99
                                               a!64
                                               (= L1_1_n
                                                  (select aux!29_n L1_0_n)))
                              (unit-resolution a!100
                                               a!64
                                               (= (select aux!32_n L1_2_n)
                                                  (select aux!30_n L1_2_n)))
                              (= L1_3_n L1_1_n)))
      (a!106 (trans a!105
                    (unit-resolution a!97
                                     a!64
                                     (= a!21 (select aux!29_n L1_0_n)))
                    (= L1_3_0 (select aux!29_n L1_0_n)))))
(let ((a!108 (trans (monotonicity (trans a!106 a!107 (= L1_3_0 L1_1_n))
                                  (= (= L1_3_0 L1_3_n) (= L1_1_n L1_3_n)))
                    (commutativity (= (= L1_1_n L1_3_n) (= L1_3_n L1_1_n)))
                    (= (= L1_3_0 L1_3_n) (= L1_3_n L1_1_n))))
      (a!111 (th-lemma (trans a!106 a!107 (= L1_3_0 L1_1_n))
                       (>= (+ L1_3_0 (* (- 1) L1_1_n)) 0))))
(let ((a!109 (mp a!101
                 (symm a!108 (= (= L1_3_n L1_1_n) (= L1_3_0 L1_3_n)))
                 (= L1_3_0 L1_3_n))))
(let ((a!110 (unit-resolution a!17 a!109 (<= (+ L1_3_0 (* (- 1) L1_3_n)) 0))))
  (unit-resolution a!15 a!110 a!111 false)))))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))
(not (<= L1_5_n 0))
(not (<= L1_0_n (- 1)))
(not (<= (+ L1_5_n (* (- 1) L1_0_n)) 0))
(not (<= (+ L1_2_n (* (- 1) L1_0_n)) (- 1)))
(not (<= (+ L1_0_n (* (- 1) L1_2_n)) (- 1)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))
(not (<= L1_5_n 0))
(not (<= L1_0_n (- 1)))
(not (<= (+ L1_5_n (* (- 1) L1_0_n)) 0))
(not (<= (+ L1_2_n (* (- 1) L1_0_n)) (- 1)))
(not (<= (+ L1_0_n (* (- 1) L1_2_n)) (- 1)))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))
(not (<= L1_5_n 0))
(not (<= L1_0_n (- 1)))
(not (<= (+ L1_5_n (* (- 1) L1_0_n)) 0))
(not (<= (+ L1_2_n (* (- 1) L1_0_n)) (- 1)))
(not (<= (+ L1_0_n (* (- 1) L1_2_n)) (- 1)))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
    (<= (+ L1_0_n (* (- 1) L1_2_n)) (- 1))
    (<= (+ L1_2_n (* (- 1) L1_0_n)) (- 1))
    (<= L1_0_n (- 1))
    (<= (+ L1_1_n (* (- 1) L1_3_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 1 L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)
      |L1#level_1!112|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0))
               (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (or (=> L2_tr0 a!3) |L2#level_2!63|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0))
               (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (or (=> L1_tr1 a!3) |L1#level_2!113|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_2_1 (* (- 1) L1_0_1)) 0))))
(let ((a!3 (or (<= (+ L1_5_1 (* (- 1) L1_0_1)) 0)
               a!1
               a!2
               (not (>= L1_0_1 0))
               (<= (+ L1_1_1 (* (- 1) L1_3_1)) 0))))
  (or (=> L1_tr1 a!3) |L1#level_2!113|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: L2 level: 2 depth: 0
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: L2 level: 2 depth: 3
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))))
  (and (= (+ L2_2_n (* (- 1) L2_5_n)) 0)
       (= (+ L2_0_n (* (- 1) L2_5_n)) 0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not |L1#reach_case_0_0|)
(not L2_tr1)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!4 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= L2_4_n L1_5_0)))
      (a!5 (= (<= L2_4_n L1_5_0) (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!6 (and (= L2_5_n 0)
                (= L1_0_0 L2_0_n)
                (= L1_2_0 L2_2_n)
                (= L1_4_0 L2_4_n)
                (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n))
                (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n))
                (= L1_1_0 (select aux!15_n L2_0_n))
                (= L1_3_0 (select aux!14_n L2_2_n))
                (= L2_1_n (select aux!12_n L2_0_n))
                (= L2_3_n (select aux!13_n L2_2_n))
                (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!10 (not (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!12 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= L2_5_n (+ 1 L2_5_0))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 (not (<= L2_4_n L2_5_0))))
      (a!13 (= (= L2_5_n (+ 1 L2_5_0)) (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))))
      (a!14 (= (<= L2_4_n L2_5_0) (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!15 (not (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!24 (=> L2_tr1 (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!25 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!26 (or (not L2_tr1) (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0) |L2#level_2!63|))
      (a!45 (not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
      (a!47 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!48 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0)))
      (a!50 (rewrite (= (+ L1_5_0 (* (- 1) L1_0_0)) (+ (* (- 1) L1_0_0) L1_5_0))))
      (a!51 (= (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               (<= (+ (* (- 1) L1_0_0) L1_5_0) 0)))
      (a!52 (rewrite (= (+ L1_2_0 (* (- 1) L1_0_0)) (+ (* (- 1) L1_0_0) L1_2_0))))
      (a!53 (= (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0)
               (>= (+ (* (- 1) L1_0_0) L1_2_0) 0)))
      (a!54 (not (>= (+ (* (- 1) L1_0_0) L1_2_0) 0)))
      (a!60 (= (<= (+ (* (- 1) L1_0_0) L1_5_0) 0)
               (>= (+ L1_0_0 (* (- 1) L1_5_0)) 0)))
      (a!61 (= (>= (+ (* (- 1) L1_0_0) L1_2_0) 0)
               (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!62 (not (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!71 (not (<= (+ L2_4_n (* (- 1) L2_5_n)) 0)))
      (a!73 (hypothesis (>= (+ L1_0_0 (* (- 1) L1_5_0)) 0)))
      (a!78 (or (not spacer_proxy!4) (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!80 (not (>= (+ L1_0_0 (* (- 1) L1_5_0)) 0)))
      (a!83 (or (not spacer_proxy!2) (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!87 (or (not spacer_proxy!5) (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!92 (or (not spacer_proxy!1) (<= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!2 (or (not (= L2_5_n 0))
               (not (= L1_0_0 L2_0_n))
               (not (= L1_2_0 L2_2_n))
               (not (= L1_4_0 L2_4_n))
               (not (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))
               (not (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))
               (not (= L1_1_0 (select aux!15_n L2_0_n)))
               (not (= L1_3_0 (select aux!14_n L2_2_n)))
               (not (= L2_1_n (select aux!12_n L2_0_n)))
               (not (= L2_3_n (select aux!13_n L2_2_n)))
               a!1))
      (a!7 (monotonicity (monotonicity (rewrite a!5) (= a!4 a!6))
                         (= (or (not L2_tr0) a!4) (or (not L2_tr0) a!6))))
      (a!11 (or (not (= L2_0_0 L2_0_n))
                (not (= L2_2_0 L2_2_n))
                (not (= L2_4_0 L2_4_n))
                (not (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n)))
                (not (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n)))
                (not (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n)))
                (not (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n)))
                (not (= L2_1_0 (select aux!21_n L2_0_n)))
                (not (= L2_3_0 (select aux!20_n L2_2_n)))
                a!10
                (not (= L2_1_n (select aux!16_n L2_0_n)))
                (not (= L2_3_n (select aux!17_n L2_2_n)))
                (>= (+ L2_5_0 (* (- 1) L2_4_n)) 0)))
      (a!16 (monotonicity (rewrite a!14) (= (not (<= L2_4_n L2_5_0)) a!15)))
      (a!17 (and (= L2_0_0 L2_0_n)
                 (= L2_2_0 L2_2_n)
                 (= L2_4_0 L2_4_n)
                 (= (select aux!18_n L2_0_n) (select aux!16_n L2_0_n))
                 (= (select aux!20_n L2_2_n) (select aux!19_n L2_2_n))
                 (= (select aux!21_n L2_0_n) (select aux!18_n L2_0_n))
                 (= (select aux!19_n L2_2_n) (select aux!17_n L2_2_n))
                 (= L2_1_0 (select aux!21_n L2_0_n))
                 (= L2_3_0 (select aux!20_n L2_2_n))
                 (= (+ L2_5_0 (* (- 1) L2_5_n)) (- 1))
                 (= L2_1_n (select aux!16_n L2_0_n))
                 (= L2_3_n (select aux!17_n L2_2_n))
                 a!15))
      (a!27 (trans (monotonicity (rewrite (= a!24 a!25))
                                 (= (or a!24 |L2#level_2!63|)
                                    (or a!25 |L2#level_2!63|)))
                   (rewrite (= (or a!25 |L2#level_2!63|) a!26))
                   (= (or a!24 |L2#level_2!63|) a!26)))
      (a!46 (unit-resolution (asserted (or (not spacer_proxy!18) a!45))
                             (asserted spacer_proxy!18)
                             a!45))
      (a!49 (or (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
                a!47
                a!48
                (not (>= L1_0_0 0))
                (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!55 (or (<= (+ (* (- 1) L1_0_0) L1_5_0) 0)
                a!47
                a!54
                (not (>= L1_0_0 0))
                (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!63 (or (>= (+ L1_0_0 (* (- 1) L1_5_0)) 0)
                a!47
                a!62
                (not (>= L1_0_0 0))
                (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)))
      (a!66 (or (not L2_tr0)
                (>= (+ L1_0_0 (* (- 1) L1_5_0)) 0)
                a!47
                a!62
                (not (>= L1_0_0 0))
                (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0)
                |L2#level_2!63|))
      (a!72 (unit-resolution (asserted (or (not spacer_proxy!3) a!71))
                             (asserted spacer_proxy!3)
                             a!71))
      (a!79 (unit-resolution (asserted a!78)
                             (asserted spacer_proxy!4)
                             (<= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!84 (unit-resolution (asserted a!83)
                             (asserted spacer_proxy!2)
                             (>= (+ L2_2_n (* (- 1) L2_5_n)) 0)))
      (a!88 (unit-resolution (asserted a!87)
                             (asserted spacer_proxy!5)
                             (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!93 (unit-resolution (asserted a!92)
                             (asserted spacer_proxy!1)
                             (<= (+ L2_2_n (* (- 1) L2_5_n)) 0))))
(let ((a!3 (def-axiom (or a!2 (= L2_1_n (select aux!12_n L2_0_n)))))
      (a!8 (mp (asserted (or (not L2_tr0) a!4)) a!7 (or (not L2_tr0) a!6)))
      (a!9 (monotonicity (rewrite (= a!6 (not a!2)))
                         (= (or (not L2_tr0) a!6) (or (not L2_tr0) (not a!2)))))
      (a!18 (monotonicity (monotonicity (rewrite a!13) a!16 (= a!12 a!17))
                          (= (or (not L2_tr1) a!12) (or (not L2_tr1) a!17))))
      (a!20 (monotonicity (rewrite (= a!17 (not a!11)))
                          (= (or (not L2_tr1) a!17)
                             (or (not L2_tr1) (not a!11)))))
      (a!28 (unit-resolution (mp (asserted (or a!24 |L2#level_2!63|)) a!27 a!26)
                             (hypothesis L2_tr1)
                             (asserted (not |L2#level_2!63|))
                             (<= (+ L2_4_0 (* (- 1) L2_5_0)) 0)))
      (a!32 (def-axiom (or a!2
                           (= (select aux!15_n L2_0_n) (select aux!12_n L2_0_n)))))
      (a!35 (def-axiom (or a!2 (= L1_1_0 (select aux!15_n L2_0_n)))))
      (a!38 (def-axiom (or a!2 (= L2_3_n (select aux!13_n L2_2_n)))))
      (a!39 (def-axiom (or a!2
                           (= (select aux!14_n L2_2_n) (select aux!13_n L2_2_n)))))
      (a!42 (def-axiom (or a!2 (= L1_3_0 (select aux!14_n L2_2_n)))))
      (a!56 (monotonicity (monotonicity (monotonicity a!50 a!51)
                                        (monotonicity (monotonicity a!52 a!53)
                                                      (= a!48 a!54))
                                        (= a!49 a!55))
                          (= (=> L2_tr0 a!49) (=> L2_tr0 a!55))))
      (a!57 (rewrite (= (=> L2_tr0 a!55) (or (not L2_tr0) a!55))))
      (a!59 (= (or (=> L2_tr0 a!49) |L2#level_2!63|)
               (or (or (not L2_tr0) a!55) |L2#level_2!63|)))
      (a!64 (monotonicity (monotonicity (rewrite a!60)
                                        (monotonicity (rewrite a!61)
                                                      (= a!54 a!62))
                                        (= a!55 a!63))
                          (= (or (not L2_tr0) a!55) (or (not L2_tr0) a!63))))
      (a!65 (= (or (or (not L2_tr0) a!55) |L2#level_2!63|)
               (or (or (not L2_tr0) a!63) |L2#level_2!63|)))
      (a!67 (= (or (or (not L2_tr0) a!63) |L2#level_2!63|) a!66))
      (a!68 (= (or (or (not L2_tr0) a!55) |L2#level_2!63|) a!66))
      (a!74 (or a!2 (<= (+ L2_4_n (* (- 1) L1_5_0)) 0))))
(let ((a!19 (mp (asserted (or (not L2_tr1) a!12)) a!18 (or (not L2_tr1) a!17)))
      (a!58 (trans a!56 a!57 (= (=> L2_tr0 a!49) (or (not L2_tr0) a!55)))))
(let ((a!21 (unit-resolution (mp a!19 a!20 (or (not L2_tr1) (not a!11)))
                             (hypothesis L2_tr1)
                             (not a!11)))
      (a!69 (trans (monotonicity a!58 a!59)
                   (trans (monotonicity a!64 a!65) (rewrite a!67) a!68)
                   (= (or (=> L2_tr0 a!49) |L2#level_2!63|) a!66))))
(let ((a!22 (unit-resolution (def-axiom (or a!11 (= L2_4_0 L2_4_n)))
                             a!21
                             (= L2_4_0 L2_4_n)))
      (a!70 (mp (asserted (or (=> L2_tr0 a!49) |L2#level_2!63|)) a!69 a!66)))
(let ((a!23 (th-lemma a!22 (>= (+ L2_4_0 (* (- 1) L2_4_n)) 0))))
(let ((a!29 (th-lemma a!23
                      a!28
                      (unit-resolution (def-axiom (or a!11 a!15)) a!21 a!15)
                      false)))
(let ((a!30 (unit-resolution (asserted (or L2_ext0_n L2_tr0 L2_tr1))
                             (lemma a!29 (not L2_tr1))
                             (asserted (not L2_ext0_n))
                             L2_tr0)))
(let ((a!31 (unit-resolution (mp a!8 a!9 (or (not L2_tr0) (not a!2)))
                             a!30
                             (not a!2))))
(let ((a!33 (symm (unit-resolution a!32
                                   a!31
                                   (= (select aux!15_n L2_0_n)
                                      (select aux!12_n L2_0_n)))
                  (= (select aux!12_n L2_0_n) (select aux!15_n L2_0_n))))
      (a!36 (symm (unit-resolution a!35
                                   a!31
                                   (= L1_1_0 (select aux!15_n L2_0_n)))
                  (= (select aux!15_n L2_0_n) L1_1_0)))
      (a!40 (symm (unit-resolution a!39
                                   a!31
                                   (= (select aux!14_n L2_2_n)
                                      (select aux!13_n L2_2_n)))
                  (= (select aux!13_n L2_2_n) (select aux!14_n L2_2_n))))
      (a!43 (symm (unit-resolution a!42
                                   a!31
                                   (= L1_3_0 (select aux!14_n L2_2_n)))
                  (= (select aux!14_n L2_2_n) L1_3_0)))
      (a!75 (unit-resolution (def-axiom a!74)
                             a!31
                             (<= (+ L2_4_n (* (- 1) L1_5_0)) 0)))
      (a!76 (unit-resolution (def-axiom (or a!2 (= L1_0_0 L2_0_n)))
                             a!31
                             (= L1_0_0 L2_0_n)))
      (a!81 (unit-resolution (def-axiom (or a!2 (= L1_2_0 L2_2_n)))
                             a!31
                             (= L1_2_0 L2_2_n)))
      (a!86 (unit-resolution (def-axiom (or a!2 (= L2_5_n 0)))
                             a!31
                             (= L2_5_n 0))))
(let ((a!34 (trans (unit-resolution a!3
                                    a!31
                                    (= L2_1_n (select aux!12_n L2_0_n)))
                   a!33
                   (= L2_1_n (select aux!15_n L2_0_n))))
      (a!41 (trans (unit-resolution a!38
                                    a!31
                                    (= L2_3_n (select aux!13_n L2_2_n)))
                   a!40
                   (= L2_3_n (select aux!14_n L2_2_n))))
      (a!77 (th-lemma (symm a!76 (= L2_0_n L1_0_0))
                      (>= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!82 (th-lemma (symm a!81 (= L2_2_n L1_2_0))
                      (<= (+ L2_2_n (* (- 1) L1_2_0)) 0)))
      (a!89 (th-lemma (symm a!76 (= L2_0_n L1_0_0))
                      (<= (+ L2_0_n (* (- 1) L1_0_0)) 0)))
      (a!91 (th-lemma (symm a!81 (= L2_2_n L1_2_0))
                      (>= (+ L2_2_n (* (- 1) L1_2_0)) 0))))
(let ((a!37 (th-lemma (trans a!34 a!36 (= L2_1_n L1_1_0))
                      (<= (+ L2_1_n (* (- 1) L1_1_0)) 0)))
      (a!44 (th-lemma (trans a!41 a!43 (= L2_3_n L1_3_0))
                      (>= (+ L2_3_n (* (- 1) L1_3_0)) 0)))
      (a!85 (lemma (th-lemma a!79 a!82 a!84 (hypothesis a!62) a!77 false)
                   (<= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!90 (th-lemma (hypothesis (not (>= L1_0_0 0)))
                      (th-lemma a!86 (>= L2_5_n 0))
                      a!88
                      a!89
                      false))
      (a!94 (lemma (th-lemma a!88 a!91 a!93 (hypothesis a!47) a!89 false)
                   (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0))))
(let ((a!95 (unit-resolution a!70
                             (lemma (th-lemma a!72 a!73 a!75 a!77 a!79 false)
                                    a!80)
                             (asserted (not |L2#level_2!63|))
                             a!30
                             a!85
                             (lemma a!90 (>= L1_0_0 0))
                             a!94
                             (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (th-lemma a!37 a!44 a!46 a!95 false)))))))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_0_n (* (- 1) L2_2_n)) (- 1)))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_2_n (* (- 1) L2_0_n)) (- 1)))
(not (<= (+ L2_4_n (* (- 1) L2_0_n)) 0))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_0_n (* (- 1) L2_2_n)) (- 1)))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_2_n (* (- 1) L2_0_n)) (- 1)))
(not (<= (+ L2_4_n (* (- 1) L2_0_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
(not (<= (+ L2_0_n (* (- 1) L2_2_n)) (- 1)))
(not (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1)))
(not (<= (+ L2_2_n (* (- 1) L2_0_n)) (- 1)))
(not (<= (+ L2_4_n (* (- 1) L2_0_n)) 0))
------------------------------------------------
-------- [spacer] operator() ../src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 5 new size: 5
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: (or (<= (+ L2_0_n (* (- 1) L2_5_n)) (- 1))
    (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
    (<= (+ L2_0_n (* (- 1) L2_2_n)) (- 1))
    (<= (+ L2_2_n (* (- 1) L2_0_n)) (- 1))
    (<= (+ L2_1_n (* (- 1) L2_3_n)) 0))
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 2 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_2!63|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_0_1)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_1 (* (- 1) L2_0_1)) 0)
               a!2
               a!3
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_0_2)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_2 (* (- 1) L2_0_2)) 0)
               a!2
               a!3
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_0_3)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_3 (* (- 1) L2_0_3)) 0)
               a!2
               a!3
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_3!68|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_3!79|)))
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:2876 ---------
expand-node: query!0 level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:747 ---------
is-reachable: query!0 level: 3 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:804 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions ../src/muz/spacer/spacer_prop_solver.cpp:246 ---------
theory core
------------------------------------------------
-------- [spacer_verbose] get_lemmas ../src/muz/spacer/spacer_farkas_learner.cpp:195 ---------
(let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!5 (rewrite (= (+ L2_0_0 (* (- 1) L2_5_0)) (+ (* (- 1) L2_5_0) L2_0_0))))
      (a!6 (= (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)
              (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!7 (not (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)))
      (a!8 (rewrite (= (+ L2_0_0 (* (- 1) L2_2_0)) (+ (* (- 1) L2_2_0) L2_0_0))))
      (a!9 (= (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)
              (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!10 (not (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)))
      (a!16 (= (>= (+ (* (- 1) L2_5_0) L2_0_0) 0)
               (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!17 (not (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!18 (= (>= (+ (* (- 1) L2_2_0) L2_0_0) 0)
               (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!19 (not (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!28 (or (not (= L2_0_0 query!0_0_n))
                (not (= L2_2_0 query!0_0_n))
                (not (= L2_4_0 query!0_1_n))
                (not (= L2_5_0 query!0_0_n))
                (not (= L2_0_1 query!0_4_n))
                (not (= L2_2_1 query!0_2_n))
                (not (= L2_4_1 query!0_1_n))
                (not (= L2_5_1 query!0_0_n))
                (not (= L2_0_2 query!0_4_n))
                (not (= L2_2_2 query!0_0_n))
                (not (= L2_4_2 query!0_1_n))
                (not (= L2_5_2 query!0_0_n))
                (not (= L2_0_3 query!0_0_n))
                (not (= L2_2_3 query!0_2_n))
                (not (= L2_4_3 query!0_1_n))
                (not (= L2_5_3 query!0_0_n))
                (not (= (select aux!10_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (not (= (select aux!4_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))
                (not (= (select aux!7_n query!0_0_n)
                        (select aux!2_n query!0_0_n)))
                (not (= (select aux!9_n query!0_2_n)
                        (select aux!2_n query!0_2_n)))
                (not (= (select aux!6_n query!0_4_n)
                        (select aux!1_n query!0_4_n)))
                (not (= (select aux!5_n query!0_2_n)
                        (select aux!2_n query!0_2_n)))
                (not (= (select aux!8_n query!0_4_n)
                        (select aux!1_n query!0_4_n)))
                (not (= (select aux!3_n query!0_0_n)
                        (select aux!2_n query!0_0_n)))
                (= (select aux!2_n query!0_0_n) (select aux!1_n query!0_0_n))
                (not (= L2_1_3 (select aux!10_n query!0_0_n)))
                (not (= L2_3_3 (select aux!9_n query!0_2_n)))
                (not (= L2_3_2 (select aux!7_n query!0_0_n)))
                (not (= L2_1_2 (select aux!8_n query!0_4_n)))
                (not (= L2_1_1 (select aux!6_n query!0_4_n)))
                (not (= L2_3_1 (select aux!5_n query!0_2_n)))
                (not (= query!0_3_n (select aux!2_n query!0_2_n)))
                (not (= query!0_5_n (select aux!1_n query!0_4_n)))
                (not (= L2_1_0 (select aux!4_n query!0_0_n)))
                (not (= L2_3_0 (select aux!3_n query!0_0_n)))
                (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!29 (not (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!30 (and (= L2_0_0 query!0_0_n)
                 (= L2_2_0 query!0_0_n)
                 (= L2_4_0 query!0_1_n)
                 (= L2_5_0 query!0_0_n)
                 (= L2_0_1 query!0_4_n)
                 (= L2_2_1 query!0_2_n)
                 (= L2_4_1 query!0_1_n)
                 (= L2_5_1 query!0_0_n)
                 (= L2_0_2 query!0_4_n)
                 (= L2_2_2 query!0_0_n)
                 (= L2_4_2 query!0_1_n)
                 (= L2_5_2 query!0_0_n)
                 (= L2_0_3 query!0_0_n)
                 (= L2_2_3 query!0_2_n)
                 (= L2_4_3 query!0_1_n)
                 (= L2_5_3 query!0_0_n)
                 (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (not (= (select aux!2_n query!0_0_n)
                         (select aux!1_n query!0_0_n)))
                 (= L2_1_3 (select aux!10_n query!0_0_n))
                 (= L2_3_3 (select aux!9_n query!0_2_n))
                 (= L2_3_2 (select aux!7_n query!0_0_n))
                 (= L2_1_2 (select aux!8_n query!0_4_n))
                 (= L2_1_1 (select aux!6_n query!0_4_n))
                 (= L2_3_1 (select aux!5_n query!0_2_n))
                 (= query!0_3_n (select aux!2_n query!0_2_n))
                 (= query!0_5_n (select aux!1_n query!0_4_n))
                 (= L2_1_0 (select aux!4_n query!0_0_n))
                 (= L2_3_0 (select aux!3_n query!0_0_n))
                 (not (<= query!0_1_n query!0_0_n))))
      (a!31 (= (<= query!0_1_n query!0_0_n)
               (<= (+ query!0_1_n (* (- 1) query!0_0_n)) 0)))
      (a!40 (hypothesis (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)))
      (a!44 (not (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)))
      (a!56 (rewrite (= (+ L2_3_0 (* (- 1) L2_1_0)) (+ (* (- 1) L2_1_0) L2_3_0))))
      (a!57 (= (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               (<= (+ (* (- 1) L2_1_0) L2_3_0) 0)))
      (a!63 (= (<= (+ (* (- 1) L2_1_0) L2_3_0) 0)
               (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!82 (commutativity (= (= (select aux!1_n query!0_0_n)
                                 (select aux!2_n query!0_0_n))
                              (= (select aux!2_n query!0_0_n)
                                 (select aux!1_n query!0_0_n)))))
      (a!85 (= (not (= (select aux!2_n query!0_0_n)
                       (select aux!1_n query!0_0_n)))
               (not (= L2_1_0 L2_3_0)))))
(let ((a!4 (or a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!11 (or a!7
                (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
                a!10
                a!3
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!20 (or a!17
                (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
                a!19
                a!3
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!23 (or (not query!0_dummy)
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
                a!19
                a!3
                (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                |query!0#level_3!68|))
      (a!32 (monotonicity (rewrite a!31)
                          (= (not (<= query!0_1_n query!0_0_n)) a!29)))
      (a!33 (and (= L2_0_0 query!0_0_n)
                 (= L2_2_0 query!0_0_n)
                 (= L2_4_0 query!0_1_n)
                 (= L2_5_0 query!0_0_n)
                 (= L2_0_1 query!0_4_n)
                 (= L2_2_1 query!0_2_n)
                 (= L2_4_1 query!0_1_n)
                 (= L2_5_1 query!0_0_n)
                 (= L2_0_2 query!0_4_n)
                 (= L2_2_2 query!0_0_n)
                 (= L2_4_2 query!0_1_n)
                 (= L2_5_2 query!0_0_n)
                 (= L2_0_3 query!0_0_n)
                 (= L2_2_3 query!0_2_n)
                 (= L2_4_3 query!0_1_n)
                 (= L2_5_3 query!0_0_n)
                 (= (select aux!10_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!4_n query!0_0_n) (select aux!1_n query!0_0_n))
                 (= (select aux!7_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (= (select aux!9_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!6_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!5_n query!0_2_n) (select aux!2_n query!0_2_n))
                 (= (select aux!8_n query!0_4_n) (select aux!1_n query!0_4_n))
                 (= (select aux!3_n query!0_0_n) (select aux!2_n query!0_0_n))
                 (not (= (select aux!2_n query!0_0_n)
                         (select aux!1_n query!0_0_n)))
                 (= L2_1_3 (select aux!10_n query!0_0_n))
                 (= L2_3_3 (select aux!9_n query!0_2_n))
                 (= L2_3_2 (select aux!7_n query!0_0_n))
                 (= L2_1_2 (select aux!8_n query!0_4_n))
                 (= L2_1_1 (select aux!6_n query!0_4_n))
                 (= L2_3_1 (select aux!5_n query!0_2_n))
                 (= query!0_3_n (select aux!2_n query!0_2_n))
                 (= query!0_5_n (select aux!1_n query!0_4_n))
                 (= L2_1_0 (select aux!4_n query!0_0_n))
                 (= L2_3_0 (select aux!3_n query!0_0_n))
                 a!29))
      (a!55 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
                a!1
                (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
                a!2
                a!3))
      (a!58 (or (<= (+ (* (- 1) L2_1_0) L2_3_0) 0)
                a!7
                (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
                a!10
                a!3))
      (a!64 (or (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
                a!19
                a!3))
      (a!67 (or (not query!0_dummy)
                (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)
                a!17
                (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
                a!19
                a!3
                |query!0#level_3!68|))
      (a!73 (or a!28
                (not (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n)))))
      (a!75 (def-axiom (or a!28 (= L2_1_0 (select aux!4_n query!0_0_n)))))
      (a!76 (def-axiom (or a!28
                           (= (select aux!4_n query!0_0_n)
                              (select aux!1_n query!0_0_n)))))
      (a!78 (def-axiom (or a!28 (= L2_3_0 (select aux!3_n query!0_0_n)))))
      (a!79 (def-axiom (or a!28
                           (= (select aux!3_n query!0_0_n)
                              (select aux!2_n query!0_0_n))))))
(let ((a!12 (monotonicity (monotonicity (monotonicity (monotonicity a!5 a!6)
                                                      (= a!1 a!7))
                                        (monotonicity (monotonicity a!8 a!9)
                                                      (= a!2 a!10))
                                        (= a!4 a!11))
                          (= (=> query!0_dummy a!4) (=> query!0_dummy a!11))))
      (a!13 (rewrite (= (=> query!0_dummy a!11) (or (not query!0_dummy) a!11))))
      (a!15 (= (or (=> query!0_dummy a!4) |query!0#level_3!68|)
               (or (or (not query!0_dummy) a!11) |query!0#level_3!68|)))
      (a!21 (monotonicity (monotonicity (monotonicity (rewrite a!16)
                                                      (= a!7 a!17))
                                        (monotonicity (rewrite a!18)
                                                      (= a!10 a!19))
                                        (= a!11 a!20))
                          (= (or (not query!0_dummy) a!11)
                             (or (not query!0_dummy) a!20))))
      (a!22 (= (or (or (not query!0_dummy) a!11) |query!0#level_3!68|)
               (or (or (not query!0_dummy) a!20) |query!0#level_3!68|)))
      (a!24 (= (or (or (not query!0_dummy) a!20) |query!0#level_3!68|) a!23))
      (a!25 (= (or (or (not query!0_dummy) a!11) |query!0#level_3!68|) a!23))
      (a!34 (monotonicity (monotonicity a!32 (= a!30 a!33))
                          (= (or (not query!0_dummy) a!30)
                             (or (not query!0_dummy) a!33))))
      (a!36 (monotonicity (rewrite (= a!33 (not a!28)))
                          (= (or (not query!0_dummy) a!33)
                             (or (not query!0_dummy) (not a!28)))))
      (a!59 (monotonicity (monotonicity (monotonicity a!56 a!57)
                                        (monotonicity (monotonicity a!5 a!6)
                                                      (= a!1 a!7))
                                        (monotonicity (monotonicity a!8 a!9)
                                                      (= a!2 a!10))
                                        (= a!55 a!58))
                          (= (=> query!0_dummy a!55) (=> query!0_dummy a!58))))
      (a!60 (rewrite (= (=> query!0_dummy a!58) (or (not query!0_dummy) a!58))))
      (a!62 (= (or (=> query!0_dummy a!55) |query!0#level_3!68|)
               (or (or (not query!0_dummy) a!58) |query!0#level_3!68|)))
      (a!65 (monotonicity (monotonicity (rewrite a!63)
                                        (monotonicity (rewrite a!16)
                                                      (= a!7 a!17))
                                        (monotonicity (rewrite a!18)
                                                      (= a!10 a!19))
                                        (= a!58 a!64))
                          (= (or (not query!0_dummy) a!58)
                             (or (not query!0_dummy) a!64))))
      (a!66 (= (or (or (not query!0_dummy) a!58) |query!0#level_3!68|)
               (or (or (not query!0_dummy) a!64) |query!0#level_3!68|)))
      (a!68 (= (or (or (not query!0_dummy) a!64) |query!0#level_3!68|) a!67))
      (a!69 (= (or (or (not query!0_dummy) a!58) |query!0#level_3!68|) a!67)))
(let ((a!14 (trans a!12
                   a!13
                   (= (=> query!0_dummy a!4) (or (not query!0_dummy) a!11))))
      (a!35 (mp (asserted (or (not query!0_dummy) a!30))
                a!34
                (or (not query!0_dummy) a!33)))
      (a!61 (trans a!59
                   a!60
                   (= (=> query!0_dummy a!55) (or (not query!0_dummy) a!58)))))
(let ((a!26 (trans (monotonicity a!14 a!15)
                   (trans (monotonicity a!21 a!22) (rewrite a!24) a!25)
                   (= (or (=> query!0_dummy a!4) |query!0#level_3!68|) a!23)))
      (a!37 (unit-resolution (mp a!35 a!36 (or (not query!0_dummy) (not a!28)))
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             (not a!28)))
      (a!70 (trans (monotonicity a!61 a!62)
                   (trans (monotonicity a!65 a!66) (rewrite a!68) a!69)
                   (= (or (=> query!0_dummy a!55) |query!0#level_3!68|) a!67))))
(let ((a!27 (mp (asserted (or (=> query!0_dummy a!4) |query!0#level_3!68|))
                a!26
                a!23))
      (a!38 (unit-resolution (def-axiom (or a!28 (= L2_4_0 query!0_1_n)))
                             a!37
                             (= L2_4_0 query!0_1_n)))
      (a!41 (unit-resolution (def-axiom (or a!28 (= L2_0_0 query!0_0_n)))
                             a!37
                             (= L2_0_0 query!0_0_n)))
      (a!45 (unit-resolution (def-axiom (or a!28 (= L2_2_0 query!0_0_n)))
                             a!37
                             (= L2_2_0 query!0_0_n)))
      (a!51 (unit-resolution (def-axiom (or a!28 (= L2_5_0 query!0_0_n)))
                             a!37
                             (= L2_5_0 query!0_0_n)))
      (a!71 (mp (asserted (or (=> query!0_dummy a!55) |query!0#level_3!68|))
                a!70
                a!67))
      (a!74 (unit-resolution (def-axiom a!73)
                             a!37
                             (not (= (select aux!2_n query!0_0_n)
                                     (select aux!1_n query!0_0_n)))))
      (a!77 (trans (unit-resolution a!75
                                    a!37
                                    (= L2_1_0 (select aux!4_n query!0_0_n)))
                   (unit-resolution a!76
                                    a!37
                                    (= (select aux!4_n query!0_0_n)
                                       (select aux!1_n query!0_0_n)))
                   (= L2_1_0 (select aux!1_n query!0_0_n))))
      (a!80 (trans (unit-resolution a!78
                                    a!37
                                    (= L2_3_0 (select aux!3_n query!0_0_n)))
                   (unit-resolution a!79
                                    a!37
                                    (= (select aux!3_n query!0_0_n)
                                       (select aux!2_n query!0_0_n)))
                   (= L2_3_0 (select aux!2_n query!0_0_n)))))
(let ((a!39 (th-lemma a!38 (>= (+ L2_4_0 (* (- 1) query!0_1_n)) 0)))
      (a!42 (th-lemma a!41 (<= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!46 (th-lemma a!45 (<= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!47 (th-lemma a!41 (>= (+ L2_0_0 (* (- 1) query!0_0_n)) 0)))
      (a!49 (th-lemma a!45 (>= (+ L2_2_0 (* (- 1) query!0_0_n)) 0)))
      (a!52 (th-lemma a!51 (<= (+ L2_5_0 (* (- 1) query!0_0_n)) 0)))
      (a!81 (monotonicity a!77
                          a!80
                          (= (= L2_1_0 L2_3_0)
                             (= (select aux!1_n query!0_0_n)
                                (select aux!2_n query!0_0_n))))))
(let ((a!43 (th-lemma (unit-resolution (def-axiom (or a!28 a!29)) a!37 a!29)
                      a!39
                      a!40
                      a!42
                      false))
      (a!48 (lemma (th-lemma a!46 a!47 (hypothesis a!19) false)
                   (<= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!50 (lemma (th-lemma a!49 a!42 (hypothesis a!3) false)
                   (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0)))
      (a!53 (lemma (th-lemma (hypothesis a!17) a!47 a!52 false)
                   (<= (+ L2_5_0 (* (- 1) L2_0_0)) 0)))
      (a!83 (trans a!81
                   a!82
                   (= (= L2_1_0 L2_3_0)
                      (= (select aux!2_n query!0_0_n)
                         (select aux!1_n query!0_0_n))))))
(let ((a!54 (unit-resolution a!27
                             (lemma a!43 a!44)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!48
                             a!50
                             (asserted (not |query!0#level_3!68|))
                             a!53
                             (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!72 (unit-resolution a!71
                             (lemma a!43 a!44)
                             (unit-resolution (asserted (or query!0_dummy
                                                            query!0_ext0_n))
                                              (asserted (not query!0_ext0_n))
                                              query!0_dummy)
                             a!53
                             a!48
                             a!50
                             (asserted (not |query!0#level_3!68|))
                             (>= (+ L2_1_0 (* (- 1) L2_3_0)) 0)))
      (a!84 (symm a!83
                  (= (= (select aux!2_n query!0_0_n)
                        (select aux!1_n query!0_0_n))
                     (= L2_1_0 L2_3_0)))))
  (th-lemma a!54
            a!72
            (mp a!74 (monotonicity a!84 a!85) (not (= L2_1_0 L2_3_0)))
            false))))))))))
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:819 ---------
------------------------------------------------
-------- [spacer] is_reachable ../src/muz/spacer/spacer_context.cpp:843 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3007 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node ../src/muz/spacer/spacer_context.cpp:3082 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma ../src/muz/spacer/spacer_context.cpp:1376 ---------
add-lemma: 3 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (or false |query!0#level_3!68|)
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)
      |L1#level_2!113|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0))
               (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (or (=> L2_tr0 a!3) |L2#level_3!79|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0))
               (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (or (=> L1_tr1 a!3) |L1#level_3!130|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_2_1 (* (- 1) L1_0_1)) 0))))
(let ((a!3 (or (<= (+ L1_5_1 (* (- 1) L1_0_1)) 0)
               a!1
               a!2
               (not (>= L1_0_1 0))
               (<= (+ L1_1_1 (* (- 1) L1_3_1)) 0))))
  (or (=> L1_tr1 a!3) |L1#level_3!130|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      |L1#level_2!113|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0)))))
  (or (=> L2_tr0 a!3) |L2#level_3!79|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0)))))
  (or (=> L1_tr1 a!3) |L1#level_3!130|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_2_1 (* (- 1) L1_0_1)) 0))))
(let ((a!3 (or (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= (+ L1_5_1 (* (- 1) L1_0_1)) 0)
               a!1
               a!2
               (not (>= L1_0_1 0)))))
  (or (=> L1_tr1 a!3) |L1#level_3!130|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3
      |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_0_1)) 0))))
(let ((a!4 (or (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_0_1)) 0)
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_0_2)) 0))))
(let ((a!4 (or (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_0_2)) 0)
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_0_3)) 0))))
(let ((a!4 (or (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_0_3)) 0)
               a!2
               a!3)))
  (or (=> query!0_dummy a!4) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3)))
  (or (=> L2_tr1 a!4) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)
      |L2#level_3!79|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_0_1)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_1 (* (- 1) L2_0_1)) 0)
               a!2
               a!3
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_0_2)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_2 (* (- 1) L2_0_2)) 0)
               a!2
               a!3
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_0_3)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_3 (* (- 1) L2_0_3)) 0)
               a!2
               a!3
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (or (=> query!0_dummy a!4) |query!0#level_4!80|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (or (=> L2_tr1 a!4) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)
      |L1#level_3!130|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0))
               (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (or (=> L2_tr0 a!3) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0))
               (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (or (=> L1_tr1 a!3) |L1#level_4!141|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_2_1 (* (- 1) L1_0_1)) 0))))
(let ((a!3 (or (<= (+ L1_5_1 (* (- 1) L1_0_1)) 0)
               a!1
               a!2
               (not (>= L1_0_1 0))
               (<= (+ L1_1_1 (* (- 1) L1_3_1)) 0))))
  (or (=> L1_tr1 a!3) |L1#level_4!141|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      |L1#level_3!130|))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0)))))
  (or (=> L2_tr0 a!3) |L2#level_4!81|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0)))))
  (or (=> L1_tr1 a!3) |L1#level_4!141|)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_2_1 (* (- 1) L1_0_1)) 0))))
(let ((a!3 (or (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= (+ L1_5_1 (* (- 1) L1_0_1)) 0)
               a!1
               a!2
               (not (>= L1_0_1 0)))))
  (or (=> L1_tr1 a!3) |L1#level_4!141|)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo query!0 false
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: false
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or (<= (+ L2_3_n (* (- 1) L2_1_n)) 0)
      a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_0_1)) 0))))
(let ((a!4 (or (<= (+ L2_3_1 (* (- 1) L2_1_1)) 0)
               a!1
               (<= (+ L2_4_1 (* (- 1) L2_0_1)) 0)
               a!2
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_0_2)) 0))))
(let ((a!4 (or (<= (+ L2_3_2 (* (- 1) L2_1_2)) 0)
               a!1
               (<= (+ L2_4_2 (* (- 1) L2_0_2)) 0)
               a!2
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_0_3)) 0))))
(let ((a!4 (or (<= (+ L2_3_3 (* (- 1) L2_1_3)) 0)
               a!1
               (<= (+ L2_4_3 (* (- 1) L2_0_3)) 0)
               a!2
               a!3)))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or (<= (+ L2_3_0 (* (- 1) L2_1_0)) 0)
               a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3)))
  (=> L2_tr1 a!4)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L2 (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_n (* (- 1) L2_5_n)) 0)))
      (a!2 (not (>= (+ L2_0_n (* (- 1) L2_2_n)) 0)))
      (a!3 (not (>= (+ L2_2_n (* (- 1) L2_0_n)) 0))))
  (or a!1
      (<= (+ L2_4_n (* (- 1) L2_0_n)) 0)
      a!2
      a!3
      (<= (+ L2_1_n (* (- 1) L2_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_1 (* (- 1) L2_5_1)) 0)))
      (a!2 (not (>= (+ L2_0_1 (* (- 1) L2_2_1)) 0)))
      (a!3 (not (>= (+ L2_2_1 (* (- 1) L2_0_1)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_1 (* (- 1) L2_0_1)) 0)
               a!2
               a!3
               (<= (+ L2_1_1 (* (- 1) L2_3_1)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_2 (* (- 1) L2_5_2)) 0)))
      (a!2 (not (>= (+ L2_0_2 (* (- 1) L2_2_2)) 0)))
      (a!3 (not (>= (+ L2_2_2 (* (- 1) L2_0_2)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_2 (* (- 1) L2_0_2)) 0)
               a!2
               a!3
               (<= (+ L2_1_2 (* (- 1) L2_3_2)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_3 (* (- 1) L2_5_3)) 0)))
      (a!2 (not (>= (+ L2_0_3 (* (- 1) L2_2_3)) 0)))
      (a!3 (not (>= (+ L2_2_3 (* (- 1) L2_0_3)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_3 (* (- 1) L2_0_3)) 0)
               a!2
               a!3
               (<= (+ L2_1_3 (* (- 1) L2_3_3)) 0))))
  (=> query!0_dummy a!4)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L2_0_0 (* (- 1) L2_5_0)) 0)))
      (a!2 (not (>= (+ L2_0_0 (* (- 1) L2_2_0)) 0)))
      (a!3 (not (>= (+ L2_2_0 (* (- 1) L2_0_0)) 0))))
(let ((a!4 (or a!1
               (<= (+ L2_4_0 (* (- 1) L2_0_0)) 0)
               a!2
               a!3
               (<= (+ L2_1_0 (* (- 1) L2_3_0)) 0))))
  (=> L2_tr1 a!4)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))
      (<= (+ L1_1_n (* (- 1) L1_3_n)) 0)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0))
               (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (=> L2_tr0 a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0))
               (<= (+ L1_1_0 (* (- 1) L1_3_0)) 0))))
  (=> L1_tr1 a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_2_1 (* (- 1) L1_0_1)) 0))))
(let ((a!3 (or (<= (+ L1_5_1 (* (- 1) L1_0_1)) 0)
               a!1
               a!2
               (not (>= L1_0_1 0))
               (<= (+ L1_1_1 (* (- 1) L1_3_1)) 0))))
  (=> L1_tr1 a!3)))
------------------------------------------------
-------- [spacer] add_lemma_core ../src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo L1 (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_n (* (- 1) L1_2_n)) 0)))
      (a!2 (not (>= (+ L1_2_n (* (- 1) L1_0_n)) 0))))
  (or (<= (+ L1_3_n (* (- 1) L1_1_n)) 0)
      (<= (+ L1_5_n (* (- 1) L1_0_n)) 0)
      a!1
      a!2
      (not (>= L1_0_n 0))))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0)))))
  (=> L2_tr0 a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_0 (* (- 1) L1_2_0)) 0)))
      (a!2 (not (>= (+ L1_2_0 (* (- 1) L1_0_0)) 0))))
(let ((a!3 (or (<= (+ L1_3_0 (* (- 1) L1_1_0)) 0)
               (<= (+ L1_5_0 (* (- 1) L1_0_0)) 0)
               a!1
               a!2
               (not (>= L1_0_0 0)))))
  (=> L1_tr1 a!3)))
------------------------------------------------
-------- [spacer] assert_expr ../src/muz/spacer/spacer_prop_solver.cpp:129 ---------
add_formula: (let ((a!1 (not (>= (+ L1_0_1 (* (- 1) L1_2_1)) 0)))
      (a!2 (not (>= (+ L1_2_1 (* (- 1) L1_0_1)) 0))))
(let ((a!3 (or (<= (+ L1_3_1 (* (- 1) L1_1_1)) 0)
               (<= (+ L1_5_1 (* (- 1) L1_0_1)) 0)
               a!1
               a!2
               (not (>= L1_0_1 0)))))
  (=> L1_tr1 a!3)))
------------------------------------------------
-------- [spacer] to_model ../src/muz/spacer/spacer_manager.cpp:109 ---------
(define-fun L2 ((x!0 Int) (x!1 Int) (x!2 Int) (x!3 Int) (x!4 Int) (x!5 Int)) Bool
  (let ((a!1 (not (>= (+ x!0 (* (- 1) x!5)) 0)))
        (a!2 (not (>= (+ x!0 (* (- 1) x!2)) 0)))
        (a!3 (not (>= (+ x!2 (* (- 1) x!0)) 0))))
  (let ((a!4 (or (<= (+ x!1 (* (- 1) x!3)) 0)
                 a!1
                 (<= (+ x!4 (* (- 1) x!0)) 0)
                 a!2
                 a!3))
        (a!5 (or a!3
                 (<= (+ x!3 (* (- 1) x!1)) 0)
                 a!1
                 (<= (+ x!4 (* (- 1) x!0)) 0)
                 a!2)))
    (and a!4 a!5))))
(define-fun L1 ((x!0 Int) (x!1 Int) (x!2 Int) (x!3 Int) (x!4 Int) (x!5 Int)) Bool
  (let ((a!1 (not (>= (+ x!0 (* (- 1) x!2)) 0)))
        (a!2 (not (>= (+ x!2 (* (- 1) x!0)) 0))))
  (let ((a!3 (or (not (>= x!0 0))
                 (<= (+ x!3 (* (- 1) x!1)) 0)
                 (<= (+ x!5 (* (- 1) x!0)) 0)
                 a!1
                 a!2))
        (a!4 (or (<= (+ x!1 (* (- 1) x!3)) 0)
                 (<= (+ x!5 (* (- 1) x!0)) 0)
                 a!1
                 a!2
                 (not (>= x!0 0)))))
    (and a!3 a!4))))
------------------------------------------------
-------- [spacer] to_model ../src/muz/spacer/spacer_manager.cpp:109 ---------
(define-fun L2 ((x!0 Int) (x!1 Int) (x!2 Int) (x!3 Int) (x!4 Int) (x!5 Int)) Bool
  (let ((a!1 (not (>= (+ x!0 (* (- 1) x!5)) 0)))
        (a!2 (not (>= (+ x!0 (* (- 1) x!2)) 0)))
        (a!3 (not (>= (+ x!2 (* (- 1) x!0)) 0))))
  (let ((a!4 (or (<= (+ x!1 (* (- 1) x!3)) 0)
                 a!1
                 (<= (+ x!4 (* (- 1) x!0)) 0)
                 a!2
                 a!3))
        (a!5 (or a!3
                 (<= (+ x!3 (* (- 1) x!1)) 0)
                 a!1
                 (<= (+ x!4 (* (- 1) x!0)) 0)
                 a!2)))
    (and a!4 a!5))))
(define-fun L1 ((x!0 Int) (x!1 Int) (x!2 Int) (x!3 Int) (x!4 Int) (x!5 Int)) Bool
  (let ((a!1 (not (>= (+ x!0 (* (- 1) x!2)) 0)))
        (a!2 (not (>= (+ x!2 (* (- 1) x!0)) 0))))
  (let ((a!3 (or (not (>= x!0 0))
                 (<= (+ x!3 (* (- 1) x!1)) 0)
                 (<= (+ x!5 (* (- 1) x!0)) 0)
                 a!1
                 a!2))
        (a!4 (or (<= (+ x!1 (* (- 1) x!3)) 0)
                 (<= (+ x!5 (* (- 1) x!0)) 0)
                 a!1
                 a!2
                 (not (>= x!0 0)))))
    (and a!3 a!4))))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2130 ---------
PT: query!0
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M Int)
         (N Int)
         (O (Array Int Int))
         (P (Array Int Int))
         (Q Int)
         (R Int)
         (S (Array Int Int))
         (T (Array Int Int))
         (U Int)
         (V Int)
         (W (Array Int Int))
         (X (Array Int Int)))
  (let ((a!1 (and (L2 D R D Q G D)
                  (L2 J N C M G D)
                  (L2 J I D H G D)
                  (L2 D B C A G D)
                  (= (select S D) (select X D))
                  (= (select L D) (select W D))
                  (= (select F C) (select W C))
                  (= (select O J) (select X J))
                  (= (select P C) (select W C))
                  (= (select K J) (select X J))
                  (= (select T D) (select W D))
                  (not (= (select W D) (select X D)))
                  (= B (select E D))
                  (= A (select F C))
                  (= H (select L D))
                  (= I (select K J))
                  (= N (select O J))
                  (= M (select P C))
                  (= V (select W C))
                  (= U (select X J))
                  (= R (select S D))
                  (= Q (select T D))
                  (not (<= G D))
                  (= (select E D) (select X D)))))
    (=> a!1 (query!0 D G C V J U))))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2130 ---------
PT: L2
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int)))
  (=> (and (L1 D B C A G H)
           (= (select F C) (select K C))
           (= B (select E D))
           (= A (select F C))
           (= J (select L D))
           (= I (select K C))
           (<= G H)
           (= (select E D) (select L D)))
      (L2 D J C I G 0)))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I (Array Int Int))
         (J (Array Int Int))
         (K Int)
         (L Int)
         (M Int)
         (N (Array Int Int))
         (O (Array Int Int)))
  (=> (and (L2 D B C A G H)
           (= (select F C) (select I C))
           (= (select E D) (select J D))
           (= (select I C) (select N C))
           (= B (select E D))
           (= A (select F C))
           (= M (+ 1 H))
           (= L (select O D))
           (= K (select N C))
           (not (<= G H))
           (= (select J D) (select O D)))
      (L2 D L C K G M)))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2130 ---------
PT: L1
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F (Array Int Int))
         (G (Array Int Int))
         (H Int)
         (I Int)
         (J (Array Int Int))
         (K (Array Int Int)))
  (=> (and (= (select C B) (select G B))
           (= (select D A) (select F A))
           (= (select G B) (select K B))
           (= I (select K B))
           (= H (select J A))
           (= (select F A) (select J A)))
      (L1 B I A H E 0)))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2137 ---------
(forall ((A Int)
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int)
         (I Int)
         (J Int)
         (K (Array Int Int))
         (L (Array Int Int))
         (M (Array Int Int))
         (N (Array Int Int))
         (O Int)
         (P Int)
         (Q Int)
         (R (Array Int Int))
         (S (Array Int Int)))
  (let ((a!1 (= (select (store N H (select M H)) D) (select S D))))
    (=> (and (L1 D J H I G H)
             (L1 D B C A G H)
             (= (select K D) (select N D))
             (= (select E D) (select N D))
             (= (select F C) (select M C))
             (= (select L H) (select M H))
             (= (select M C) (select R C))
             (= A (select F C))
             (= B (select E D))
             (= I (select L H))
             (= Q (+ 1 H))
             (= P (select S D))
             (= J (select K D))
             (= O (select R C))
             (not (<= G H))
             a!1)
        (L1 D P C O G Q))))
------------------------------------------------
-------- [spacer] validate ../src/muz/spacer/spacer_context.cpp:2176 ---------
Validation Succeeded
------------------------------------------------
-------- [spacer] reset ../src/muz/spacer/spacer_context.cpp:1871 ---------

------------------------------------------------
