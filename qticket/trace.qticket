-------- [spacer] reset /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1860 ---------

------------------------------------------------
-------- [spacer] query /ag/z3/quic/src/muz/spacer/spacer_dl_interface.cpp:103 ---------
query: Error
rules:
; rule count: 6
; predicate count: 3
; output: query!0
<null>:
Inv(#3,#2,#1,#0) :- 
 (= (:var 0) 0),
 (= (forall ((z1 Int)) (> (select (:var 3) z1) 0)) true),
 (= (forall ((z1 Int)) (= (select (:var 4) z1) 0)) true),
 (= (:var 1) 0).
<null>:
Inv(#3,#2,#1,#0) :- 
 Inv(#7,#6,#1,#4),
 (= (:var 2) (store (:var 6) (:var 5) (:var 4))),
 (= (:var 3) (store (:var 7) (:var 5) 1)),
 (= (select (:var 7) (:var 5)) 0),
 (= (:var 0) (+ (:var 4) 1)).
<null>:
Inv(#3,#2,#1,#0) :- 
 Inv(#5,#2,#1,#0),
 (= (select (:var 2) (:var 4)) (:var 1)),
 (= (select (:var 5) (:var 4)) 1),
 (= (:var 3) (store (:var 5) (:var 4) 2)).
<null>:
Inv(#3,#2,#1,#0) :- 
 Inv(#5,#2,#6,#0),
 (= (:var 3) (store (:var 5) (:var 4) 0)),
 (= (select (:var 5) (:var 4)) 2),
 (= (:var 1) (+ (select (:var 2) (:var 4)) 1)).
<null>:
Error() :- 
 Inv(#1,#5,#4,#3),
 (= (select (:var 1) (:var 2)) 2),
 (distinct (:var 2) (:var 0)),
 (= (select (:var 1) (:var 0)) 2).
<null>:
query!0() :- 
 Error().
------------------------------------------------
-------- [spacer] init_rules /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1880 ---------
(declare-fun Inv ((Array Int Int) (Array Int Int) Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1880 ---------
(declare-fun Error () Bool)
------------------------------------------------
-------- [spacer] init_rules /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1880 ---------
(declare-fun query!0 () Bool)
------------------------------------------------
-------- [spacer] init_rules /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1910 ---------
(declare-fun Inv ((Array Int Int) (Array Int Int) Int Int) Bool) (declare-fun Inv ((Array Int Int) (Array Int Int) Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1910 ---------
(declare-fun Error () Bool) (declare-fun Inv ((Array Int Int) (Array Int Int) Int Int) Bool)
------------------------------------------------
-------- [spacer] init_rules /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1910 ---------
(declare-fun query!0 () Bool) (declare-fun Error () Bool)
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1066 ---------
(let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_n z1) 0)))))
  (and (= Inv_serving_n 0)
       (= Inv_ticket_n 0)
       a!1
       (forall ((z1 Int)) (= (select Inv_pc_n z1) 0))))
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1085 ---------
Inv
Inv_ticket_n Inv_serving_n Inv_t_n Inv_pc_n 
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1066 ---------
(and (= Inv_serving_0 Inv_serving_n)
     (= Inv_pc_n (store Inv_pc_0 aux!1_n 1))
     (= Inv_t_n (store Inv_t_0 aux!1_n Inv_ticket_0))
     (= (select Inv_pc_0 aux!1_n) 0)
     (= Inv_ticket_n (+ 1 Inv_ticket_0)))
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1085 ---------
Inv
Inv_ticket_n Inv_serving_n Inv_t_n Inv_pc_n Inv_ticket_0 aux!1_n Inv_t_0 Inv_pc_0 
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1066 ---------
(and (= Inv_t_0 Inv_t_n)
     (= Inv_serving_0 Inv_serving_n)
     (= Inv_ticket_0 Inv_ticket_n)
     (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
     (= (select Inv_pc_0 aux!2_n) 1)
     (= (select Inv_t_n aux!2_n) Inv_serving_n))
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1085 ---------
Inv
Inv_ticket_n Inv_serving_n Inv_t_n Inv_pc_n aux!2_n Inv_pc_0 
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1066 ---------
(and (= Inv_t_0 Inv_t_n)
     (= Inv_ticket_0 Inv_ticket_n)
     (= Inv_pc_n (store Inv_pc_0 aux!3_n 0))
     (= (select Inv_pc_0 aux!3_n) 2)
     (= Inv_serving_n (+ 1 (select Inv_t_n aux!3_n))))
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1085 ---------
Inv
Inv_ticket_n Inv_serving_n Inv_t_n Inv_pc_n aux!3_n Inv_pc_0 Inv_serving_0 
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_n z1) 0))))
      (a!3 (or (not Inv_tr1)
               (and (= Inv_serving_0 Inv_serving_n)
                    (= Inv_pc_n (store Inv_pc_0 aux!1_n 1))
                    (= Inv_t_n (store Inv_t_0 aux!1_n Inv_ticket_0))
                    (= (select Inv_pc_0 aux!1_n) 0)
                    (= Inv_ticket_n (+ 1 Inv_ticket_0)))))
      (a!4 (or (not Inv_tr2)
               (and (= Inv_t_0 Inv_t_n)
                    (= Inv_serving_0 Inv_serving_n)
                    (= Inv_ticket_0 Inv_ticket_n)
                    (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
                    (= (select Inv_pc_0 aux!2_n) 1)
                    (= (select Inv_t_n aux!2_n) Inv_serving_n))))
      (a!5 (and (= Inv_t_0 Inv_t_n)
                (= Inv_ticket_0 Inv_ticket_n)
                (= Inv_pc_n (store Inv_pc_0 aux!3_n 0))
                (= (select Inv_pc_0 aux!3_n) 2)
                (= Inv_serving_n (+ 1 (select Inv_t_n aux!3_n))))))
(let ((a!2 (and (= Inv_serving_n 0)
                (= Inv_ticket_n 0)
                a!1
                (forall ((z1 Int)) (= (select Inv_pc_n z1) 0)))))
  (and (or (not Inv_tr0) a!2)
       a!3
       a!4
       (or (not Inv_tr3) a!5)
       (or Inv_ext0_n Inv_tr0 Inv_tr1 Inv_tr2 Inv_tr3))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (and (not Inv_tr1) (not Inv_tr2) (not Inv_tr3)) |Inv#level_0!4|)
------------------------------------------------
-------- [spacer] initialize /ag/z3/quic/src/muz/spacer/spacer_context.cpp:933 ---------
Initial state: (and (not Inv_tr1) (not Inv_tr2) (not Inv_tr3))
Transition:    (let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_n z1) 0))))
      (a!3 (or (not Inv_tr1)
               (and (= Inv_serving_0 Inv_serving_n)
                    (= Inv_pc_n (store Inv_pc_0 aux!1_n 1))
                    (= Inv_t_n (store Inv_t_0 aux!1_n Inv_ticket_0))
                    (= (select Inv_pc_0 aux!1_n) 0)
                    (= Inv_ticket_n (+ 1 Inv_ticket_0)))))
      (a!4 (or (not Inv_tr2)
               (and (= Inv_t_0 Inv_t_n)
                    (= Inv_serving_0 Inv_serving_n)
                    (= Inv_ticket_0 Inv_ticket_n)
                    (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
                    (= (select Inv_pc_0 aux!2_n) 1)
                    (= (select Inv_t_n aux!2_n) Inv_serving_n))))
      (a!5 (and (= Inv_t_0 Inv_t_n)
                (= Inv_ticket_0 Inv_ticket_n)
                (= Inv_pc_n (store Inv_pc_0 aux!3_n 0))
                (= (select Inv_pc_0 aux!3_n) 2)
                (= Inv_serving_n (+ 1 (select Inv_t_n aux!3_n))))))
(let ((a!2 (and (= Inv_serving_n 0)
                (= Inv_ticket_n 0)
                a!1
                (forall ((z1 Int)) (= (select Inv_pc_n z1) 0)))))
  (and (or (not Inv_tr0) a!2)
       a!3
       a!4
       (or (not Inv_tr3) a!5)
       (or Inv_ext0_n Inv_tr0 Inv_tr1 Inv_tr2 Inv_tr3))))
------------------------------------------------
-------- [spacer] init_rules /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1921 ---------
rules
(forall ((A (Array Int Int)) (B (Array Int Int)) (C Int) (D Int))
  (let ((a!1 (= (forall ((z1 Int)) (> (select B z1) 0)) true))
        (a!2 (= (forall ((z1 Int)) (= (select A z1) 0)) true)))
    (=> (and (= D 0) a!1 a!2 (= C 0)) (Inv A B C D))))
(forall ((A (Array Int Int))
         (B (Array Int Int))
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int))
  (=> (and (Inv A B G D)
           (= F (store B C D))
           (= (select A C) 0)
           (= H (+ 1 D))
           (= E (store A C 1)))
      (Inv E F G H)))
(forall ((A (Array Int Int))
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F Int))
  (=> (and (Inv A D E F)
           (= (select A B) 1)
           (= (select D B) E)
           (= C (store A B 2)))
      (Inv C D E F)))
(forall ((A Int)
         (B (Array Int Int))
         (C Int)
         (D (Array Int Int))
         (E (Array Int Int))
         (F Int)
         (G Int))
  (let ((a!1 (and (Inv B E A G)
                  (= (select B C) 2)
                  (= F (+ 1 (select E C)))
                  (= D (store B C 0)))))
    (=> a!1 (Inv D E F G))))
transition
(let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_n z1) 0))))
      (a!3 (or (not Inv_tr1)
               (and (= Inv_serving_0 Inv_serving_n)
                    (= Inv_pc_n (store Inv_pc_0 aux!1_n 1))
                    (= Inv_t_n (store Inv_t_0 aux!1_n Inv_ticket_0))
                    (= (select Inv_pc_0 aux!1_n) 0)
                    (= Inv_ticket_n (+ 1 Inv_ticket_0)))))
      (a!4 (or (not Inv_tr2)
               (and (= Inv_t_0 Inv_t_n)
                    (= Inv_serving_0 Inv_serving_n)
                    (= Inv_ticket_0 Inv_ticket_n)
                    (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
                    (= (select Inv_pc_0 aux!2_n) 1)
                    (= (select Inv_t_n aux!2_n) Inv_serving_n))))
      (a!5 (and (= Inv_t_0 Inv_t_n)
                (= Inv_ticket_0 Inv_ticket_n)
                (= Inv_pc_n (store Inv_pc_0 aux!3_n 0))
                (= (select Inv_pc_0 aux!3_n) 2)
                (= Inv_serving_n (+ 1 (select Inv_t_n aux!3_n))))))
(let ((a!2 (and (= Inv_serving_n 0)
                (= Inv_ticket_n 0)
                a!1
                (forall ((z1 Int)) (= (select Inv_pc_n z1) 0)))))
  (and (or (not Inv_tr0) a!2)
       a!3
       a!4
       (or (not Inv_tr3) a!5)
       (or Inv_ext0_n Inv_tr0 Inv_tr1 Inv_tr2 Inv_tr3))))
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1066 ---------
(and (= (select Inv_pc_0 aux!6_n) 2)
     (= (select Inv_pc_0 aux!5_n) 2)
     (not (= aux!6_n aux!5_n)))
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1085 ---------
Error
aux!5_n Inv_pc_0 aux!6_n Inv_ticket_0 Inv_serving_0 Inv_t_0 
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not Error_dummy)
               (and (= (select Inv_pc_0 aux!6_n) 2)
                    (= (select Inv_pc_0 aux!5_n) 2)
                    (not (= aux!6_n aux!5_n))))))
  (and a!1 (or Error_dummy Error_ext0_n)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (not Error_dummy) |Error#level_0!7|)
------------------------------------------------
-------- [spacer] initialize /ag/z3/quic/src/muz/spacer/spacer_context.cpp:933 ---------
Initial state: (not Error_dummy)
Transition:    (let ((a!1 (or (not Error_dummy)
               (and (= (select Inv_pc_0 aux!6_n) 2)
                    (= (select Inv_pc_0 aux!5_n) 2)
                    (not (= aux!6_n aux!5_n))))))
  (and a!1 (or Error_dummy Error_ext0_n)))
------------------------------------------------
-------- [spacer] init_rules /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1921 ---------
rules
(forall ((A (Array Int Int))
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F Int))
  (=> (and (Inv E A B C) (= (select E F) 2) (not (= D F)) (= (select E D) 2))
      Error))
transition
(let ((a!1 (or (not Error_dummy)
               (and (= (select Inv_pc_0 aux!6_n) 2)
                    (= (select Inv_pc_0 aux!5_n) 2)
                    (not (= aux!6_n aux!5_n))))))
  (and a!1 (or Error_dummy Error_ext0_n)))
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1066 ---------
true
------------------------------------------------
-------- [spacer] init_rule /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1085 ---------
query!0

------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or query!0_dummy query!0_ext0_n)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (not query!0_dummy) |query!0#level_0!8|)
------------------------------------------------
-------- [spacer] initialize /ag/z3/quic/src/muz/spacer/spacer_context.cpp:933 ---------
Initial state: (not query!0_dummy)
Transition:    (or query!0_dummy query!0_ext0_n)
------------------------------------------------
-------- [spacer] init_rules /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1921 ---------
rules
(=> Error query!0)
transition
(or query!0_dummy query!0_ext0_n)
------------------------------------------------
-------- [spacer] add_reach_fact /ag/z3/quic/src/muz/spacer/spacer_context.cpp:493 ---------
add_reach_fact: Inv INIT (let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_n z1) 0)))))
  (and (= Inv_serving_n 0)
       (= Inv_ticket_n 0)
       a!1
       (forall ((z1 Int)) (= (select Inv_pc_n z1) 0))))
------------------------------------------------
-------- [spacer] add_reach_fact /ag/z3/quic/src/muz/spacer/spacer_context.cpp:529 ---------
updating reach ctx: (let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_n z1) 0)))))
(let ((a!2 (and (= Inv_serving_n 0)
                (= Inv_ticket_n 0)
                a!1
                (forall ((z1 Int)) (= (select Inv_pc_n z1) 0)))))
  (or a!2 |Inv#reach_case_0_n|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_0 z1) 0)))))
(let ((a!2 (and (= Inv_serving_0 0)
                (= Inv_ticket_0 0)
                a!1
                (forall ((z1 Int)) (= (select Inv_pc_0 z1) 0)))))
  (=> Inv_tr1 (or a!2 |Inv#reach_case_0_0|))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_0 z1) 0)))))
(let ((a!2 (and (= Inv_serving_0 0)
                (= Inv_ticket_0 0)
                a!1
                (forall ((z1 Int)) (= (select Inv_pc_0 z1) 0)))))
  (=> Inv_tr2 (or a!2 |Inv#reach_case_0_0|))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_0 z1) 0)))))
(let ((a!2 (and (= Inv_serving_0 0)
                (= Inv_ticket_0 0)
                a!1
                (forall ((z1 Int)) (= (select Inv_pc_0 z1) 0)))))
  (=> Inv_tr3 (or a!2 |Inv#reach_case_0_0|))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((z1 Int)) (not (<= (select Inv_t_0 z1) 0)))))
(let ((a!2 (and (= Inv_serving_0 0)
                (= Inv_ticket_0 0)
                a!1
                (forall ((z1 Int)) (= (select Inv_pc_0 z1) 0)))))
  (=> Error_dummy (or a!2 |Inv#reach_case_0_0|))))
------------------------------------------------
-------- [spacer] reset /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1860 ---------

------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 0 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 0 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 0 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 0 query!0 false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |query!0#level_0!8|)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 1 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 1 depth: 1
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun query!0_dummy () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun |query!0#level_1!9| () Bool
  false)
(define-fun |query!0#level_0!8| () Bool
  true)
(define-fun |query!0#level_2!10| () Bool
  false)

Transition:
true
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
true
Projected Implicant
(and true)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 0 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 0 depth: 1
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 0 Error false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 0 Error false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |Error#level_0!7|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_1!9|)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 1 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 1 depth: 1
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 1 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 query!0 false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |query!0#level_1!9|)
------------------------------------------------
-------- [spacer] propagate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3142 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 2 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 2 depth: 2
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun query!0_ext0_n () Bool
  false)
(define-fun query!0_dummy () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |query!0#level_2!10| () Bool
  false)
(define-fun |query!0#level_1!9| () Bool
  true)
(define-fun |query!0#level_0!8| () Bool
  true)
(define-fun |query!0#level_3!14| () Bool
  false)
(define-fun |query!0#level_4!16| () Bool
  false)

Transition:
true
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
true
Projected Implicant
(and true)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 1 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 1 depth: 2
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Error#level_1!11| () Bool
  false)
(define-fun aux!5_n () Int
  1)
(define-fun Error_ext0_n () Bool
  false)
(define-fun |Error#level_3!13| () Bool
  false)
(define-fun Error_dummy () Bool
  true)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |Error#level_2!12| () Bool
  false)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!17))
(define-fun |Error#level_4!15| () Bool
  false)
(define-fun |Error#level_0!7| () Bool
  true)
(define-fun aux!6_n () Int
  0)
(define-fun k!17 ((x!0 Int)) Int
  (ite (= x!0 1) 2
  (ite (= x!0 0) 2
    2)))

Transition:
(and (= (select Inv_pc_0 aux!6_n) 2)
     (= (select Inv_pc_0 aux!5_n) 2)
     (not (= aux!6_n aux!5_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(and (< aux!6_n aux!5_n)
     (= (select Inv_pc_0 aux!5_n) 2)
     (= (select Inv_pc_0 aux!6_n) 2))
Projected Implicant
(and (= (select Inv_pc_0 aux!6_n) 2)
     (not (<= aux!5_n aux!6_n))
     (= (select Inv_pc_0 aux!5_n) 2))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 0 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 (= (select Inv_pc_n zk!0) 2) a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 0 depth: 2
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 (= (select Inv_pc_n zk!0) 2) a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (select Inv_pc_n zk!0) 0))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (select Inv_pc_n zk!0) 0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (select Inv_pc_n zk!0) 0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 2 new size: 1
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!0 Int)) (<= (select Inv_pc_n zk!0) 0))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 0 Inv (forall ((zk!0 Int)) (<= (select Inv_pc_n zk!0) 0))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 0 Inv (forall ((zk!0 Int)) (<= (select Inv_pc_n zk!0) 0))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> Inv_tr1 (<= (select Inv_pc_0 aux!6_n) 0)) |Inv#level_1!18|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (=> Inv_tr1 (forall ((zk!0 Int)) (<= (select Inv_pc_0 zk!0) 0)))))
  (or a!1 |Inv#level_1!18|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> Inv_tr2 (<= (select Inv_pc_0 aux!6_n) 0)) |Inv#level_1!18|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (=> Inv_tr2 (forall ((zk!0 Int)) (<= (select Inv_pc_0 zk!0) 0)))))
  (or a!1 |Inv#level_1!18|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> Inv_tr3 (<= (select Inv_pc_0 aux!6_n) 0)) |Inv#level_1!18|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (=> Inv_tr3 (forall ((zk!0 Int)) (<= (select Inv_pc_0 zk!0) 0)))))
  (or a!1 |Inv#level_1!18|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> Error_dummy (<= (select Inv_pc_0 aux!6_n) 0)) |Error#level_1!11|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (=> Error_dummy (forall ((zk!0 Int)) (<= (select Inv_pc_0 zk!0) 0)))))
  (or a!1 |Error#level_1!11|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 1 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 1 depth: 2
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 1 Error false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 Error false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |Error#level_1!11|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_2!10|)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 2 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 2 depth: 2
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 2 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 query!0 false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |query!0#level_2!10|)
------------------------------------------------
-------- [spacer] propagate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3142 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 3 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |query!0#level_5!25| () Bool
  false)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun query!0_dummy () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |query!0#level_2!10| () Bool
  true)
(define-fun |query!0#level_1!9| () Bool
  true)
(define-fun |query!0#level_0!8| () Bool
  true)
(define-fun |query!0#level_3!14| () Bool
  false)
(define-fun |query!0#level_4!16| () Bool
  false)

Transition:
true
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
true
Projected Implicant
(and true)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 2 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 2 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Error#level_1!11| () Bool
  true)
(define-fun aux!6_n () Int
  0)
(define-fun Error_ext0_n () Bool
  false)
(define-fun |Error#level_3!13| () Bool
  false)
(define-fun aux!5_n () Int
  1)
(define-fun Error_dummy () Bool
  true)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |Error#level_2!12| () Bool
  false)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!26))
(define-fun |Error#level_4!15| () Bool
  false)
(define-fun |Error#level_0!7| () Bool
  true)
(define-fun |Error#level_5!24| () Bool
  false)
(define-fun k!26 ((x!0 Int)) Int
  (ite (= x!0 1) 2
  (ite (= x!0 0) 2
    2)))

Transition:
(and (= (select Inv_pc_0 aux!6_n) 2)
     (= (select Inv_pc_0 aux!5_n) 2)
     (not (= aux!6_n aux!5_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(and (< aux!6_n aux!5_n)
     (= (select Inv_pc_0 aux!5_n) 2)
     (= (select Inv_pc_0 aux!6_n) 2))
Projected Implicant
(and (= (select Inv_pc_0 aux!6_n) 2)
     (not (<= aux!5_n aux!6_n))
     (= (select Inv_pc_0 aux!5_n) 2))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 1 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 1 depth: 3
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(>= (select Inv_pc_n zk!0) 2)
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!0) 2)
(<= (select Inv_pc_n zk!0) 2)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(>= (select Inv_pc_n zk!0) 2)
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!0) 2)
(<= (select Inv_pc_n zk!0) 2)
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(>= (select Inv_pc_n zk!0) 2)
(not (= (select Inv_pc_n zk!0) 0))
(<= (select Inv_pc_n zk!0) 2)
(= 2 (select Inv_pc_n zk!0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 4 new size: 1
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!0 Int)) (not (<= 2 (select Inv_pc_n zk!0))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 1 Inv (forall ((zk!0 Int)) (not (>= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 Inv (forall ((zk!0 Int)) (not (>= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (=> Inv_tr1 (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or a!1 |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int)) (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr1 a!1) |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (=> Inv_tr2 (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or a!1 |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int)) (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr2 a!1) |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (=> Inv_tr3 (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or a!1 |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int)) (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr3 a!1) |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (=> Error_dummy (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or a!1 |Error#level_2!12|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int)) (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Error_dummy a!1) |Error#level_2!12|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 2 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 2 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 2 Error false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 Error false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |Error#level_2!12|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_3!14|)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 3 depth: 3
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 3 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 query!0 false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |query!0#level_3!14|)
------------------------------------------------
-------- [spacer] propagate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3142 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 4 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 4 depth: 4
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |query!0#level_5!25| () Bool
  false)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun |query!0#level_6!30| () Bool
  false)
(define-fun query!0_dummy () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |query!0#level_2!10| () Bool
  true)
(define-fun |query!0#level_1!9| () Bool
  true)
(define-fun |query!0#level_0!8| () Bool
  true)
(define-fun |query!0#level_3!14| () Bool
  true)
(define-fun |query!0#level_4!16| () Bool
  false)

Transition:
true
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
true
Projected Implicant
(and true)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 3 depth: 4
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Error#level_1!11| () Bool
  true)
(define-fun Error_dummy () Bool
  true)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!31))
(define-fun |Error#level_5!24| () Bool
  false)
(define-fun |Error#level_6!29| () Bool
  false)
(define-fun aux!6_n () Int
  0)
(define-fun Error_ext0_n () Bool
  false)
(define-fun |Error#level_3!13| () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |Error#level_2!12| () Bool
  true)
(define-fun aux!5_n () Int
  1)
(define-fun |Error#level_4!15| () Bool
  false)
(define-fun |Error#level_0!7| () Bool
  true)
(define-fun k!31 ((x!0 Int)) Int
  (ite (= x!0 1) 2
  (ite (= x!0 0) 2
    2)))

Transition:
(and (= (select Inv_pc_0 aux!6_n) 2)
     (= (select Inv_pc_0 aux!5_n) 2)
     (not (= aux!6_n aux!5_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(and (< aux!6_n aux!5_n)
     (= (select Inv_pc_0 aux!5_n) 2)
     (= (select Inv_pc_0 aux!6_n) 2))
Projected Implicant
(and (= (select Inv_pc_0 aux!6_n) 2)
     (not (<= aux!5_n aux!6_n))
     (= (select Inv_pc_0 aux!5_n) 2))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 2 depth: 0
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 2 depth: 4
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(= (select Inv_pc_n zk!0) 2)
(= (select Inv_pc_n zk!1) 2)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(>= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (= zk!0 zk!1))
(not (= (select Inv_pc_n zk!0) 0))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(= (select Inv_pc_n zk!0) 2)
(= (select Inv_pc_n zk!1) 2)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(>= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (= zk!0 zk!1))
(not (= (select Inv_pc_n zk!0) 0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(>= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (= zk!0 zk!1))
(not (= (select Inv_pc_n zk!0) 0))
(= 2 (select Inv_pc_n zk!1))
(= 2 (select Inv_pc_n zk!0))
(= (select Inv_pc_n zk!1) (select Inv_pc_n zk!0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 9 new size: 3
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (= zk!0 zk!1)
      (not (<= 2 (select Inv_pc_n zk!1)))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 2 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (= (+ (* (- 1) zk!1) zk!0) 0)
      (not (>= (select Inv_pc_n zk!1) 2))))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (= (+ (* (- 1) zk!1) zk!0) 0)
      (not (>= (select Inv_pc_n zk!1) 2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Inv_tr1 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Inv_tr1 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Inv_tr2 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Inv_tr2 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Inv_tr3 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Inv_tr3 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Error_dummy a!1) |Error#level_3!13|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Error_dummy a!1) |Error#level_3!13|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 3 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 3 depth: 4
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 3 Error false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 Error false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |Error#level_3!13|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_4!16|)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 4 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 4 depth: 4
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 4 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 query!0 false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |query!0#level_4!16|)
------------------------------------------------
-------- [spacer] propagate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3142 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 5 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 5 depth: 5
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |query!0#level_5!25| () Bool
  false)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun |query!0#level_7!36| () Bool
  false)
(define-fun |query!0#level_6!30| () Bool
  false)
(define-fun query!0_dummy () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |query!0#level_2!10| () Bool
  true)
(define-fun |query!0#level_1!9| () Bool
  true)
(define-fun |query!0#level_0!8| () Bool
  true)
(define-fun |query!0#level_3!14| () Bool
  true)
(define-fun |query!0#level_4!16| () Bool
  true)

Transition:
true
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
true
Projected Implicant
(and true)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 4 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 4 depth: 5
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Error#level_1!11| () Bool
  true)
(define-fun Error_dummy () Bool
  true)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!37))
(define-fun |Error#level_5!24| () Bool
  false)
(define-fun |Error#level_6!29| () Bool
  false)
(define-fun aux!6_n () Int
  0)
(define-fun Error_ext0_n () Bool
  false)
(define-fun |Error#level_3!13| () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |Error#level_2!12| () Bool
  true)
(define-fun |Error#level_7!35| () Bool
  false)
(define-fun |Error#level_4!15| () Bool
  false)
(define-fun |Error#level_0!7| () Bool
  true)
(define-fun aux!5_n () Int
  1)
(define-fun k!37 ((x!0 Int)) Int
  (ite (= x!0 1) 2
  (ite (= x!0 0) 2
    2)))

Transition:
(and (= (select Inv_pc_0 aux!6_n) 2)
     (= (select Inv_pc_0 aux!5_n) 2)
     (not (= aux!6_n aux!5_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(and (< aux!6_n aux!5_n)
     (= (select Inv_pc_0 aux!5_n) 2)
     (= (select Inv_pc_0 aux!6_n) 2))
Projected Implicant
(and (= (select Inv_pc_0 aux!6_n) 2)
     (not (<= aux!5_n aux!6_n))
     (= (select Inv_pc_0 aux!5_n) 2))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 3 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 3 depth: 5
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun aux!1_n () Int
  4)
(define-fun Inv_ticket_n () Int
  (- 1))
(define-fun |Inv#level_2!19| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun |Inv#level_6!28| () Bool
  false)
(define-fun Inv_serving_n () Int
  2455)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun zk!1 () Int
  6878)
(define-fun Inv_serving_0 () Int
  2455)
(define-fun Inv_t_0 () (Array Int Int)
  (_ as-array k!40))
(define-fun zk!0 () Int
  6877)
(define-fun |Inv#level_3!21| () Bool
  false)
(define-fun |Inv#level_7!34| () Bool
  false)
(define-fun |Inv#level_1!18| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun Inv_tr1 () Bool
  false)
(define-fun |Inv#level_4!22| () Bool
  false)
(define-fun Inv_pc_n () (Array Int Int)
  (_ as-array k!42))
(define-fun Inv_tr2 () Bool
  true)
(define-fun |Inv#level_5!23| () Bool
  false)
(define-fun Inv_t_n () (Array Int Int)
  (_ as-array k!40))
(define-fun Inv_ext0_n () Bool
  false)
(define-fun Inv_tr3 () Bool
  false)
(define-fun |Inv#level_0!4| () Bool
  true)
(define-fun aux!2_n () Int
  6877)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!38))
(define-fun aux!3_n () Int
  7)
(define-fun aux!6_n () Int
  3608)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun Inv_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun Inv_ticket_0 () Int
  (- 1))
(define-fun k!39 ((x!0 Int)) Int
  (ite (= x!0 6878) 2
  (ite (= x!0 3608) 1
  (ite (= x!0 6877) 1
  (ite (= x!0 4) 1
    3)))))
(define-fun k!43 ((x!0 Int)) Int
  (ite (= x!0 6878) 2
  (ite (= x!0 3608) 1
  (ite (= x!0 7) 0
  (ite (= x!0 6877) 1
    3)))))
(define-fun k!40 ((x!0 Int)) Int
  (ite (= x!0 6877) 2455
    5))
(define-fun k!41 ((x!0 Int)) Int
  (ite (= x!0 6877) 2455
  (ite (= x!0 4) (- 1)
    5)))
(define-fun k!38 ((x!0 Int)) Int
  (ite (= x!0 6878) 2
  (ite (= x!0 3608) 1
  (ite (= x!0 6877) 1
    3))))
(define-fun k!42 ((x!0 Int)) Int
  (ite (= x!0 6878) 2
  (ite (= x!0 3608) 1
  (ite (= x!0 6877) 2
    3))))

Transition:
(and (= Inv_t_0 Inv_t_n)
     (= Inv_serving_0 Inv_serving_n)
     (= Inv_ticket_0 Inv_ticket_n)
     (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
     (= (select Inv_pc_0 aux!2_n) 1)
     (= (select Inv_t_n aux!2_n) Inv_serving_n))
Phi:
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and (= (select Inv_t_n aux!2_n) Inv_serving_n)
       (= (select Inv_pc_n zk!0) 2)
       (= Inv_t_0 Inv_t_n)
       (= Inv_serving_0 Inv_serving_n)
       (= Inv_ticket_0 Inv_ticket_n)
       (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
       (= (select Inv_pc_0 aux!2_n) 1)
       a!1
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) zk!1) aux!2_n)))))
  (and (not (= aux!2_n zk!1))
       (= (select Inv_pc_0 zk!1) 2)
       (= (select Inv_t_0 aux!2_n) Inv_serving_0)
       (= (select Inv_pc_0 aux!2_n) 1)
       a!1))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 2 depth: 0
(let ((a!1 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1
       a!2
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 2 depth: 5
(let ((a!1 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1
       a!2
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun aux!1_n () Int
  4)
(define-fun Inv_ticket_n () Int
  (- 1))
(define-fun |Inv#level_2!19| () Bool
  false)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun |Inv#level_6!28| () Bool
  false)
(define-fun Inv_serving_n () Int
  582)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun zk!1 () Int
  7578)
(define-fun Inv_serving_0 () Int
  582)
(define-fun spacer_proxy!6 () Bool
  true)
(define-fun Inv_t_0 () (Array Int Int)
  (_ as-array k!46))
(define-fun zk!0 () Int
  7579)
(define-fun |Inv#level_3!21| () Bool
  false)
(define-fun |Inv#level_7!34| () Bool
  false)
(define-fun |Inv#level_1!18| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun Inv_tr1 () Bool
  false)
(define-fun |Inv#level_4!22| () Bool
  false)
(define-fun Inv_pc_n () (Array Int Int)
  (_ as-array k!48))
(define-fun Inv_tr2 () Bool
  true)
(define-fun |Inv#level_5!23| () Bool
  false)
(define-fun Inv_t_n () (Array Int Int)
  (_ as-array k!46))
(define-fun Inv_ext0_n () Bool
  false)
(define-fun Inv_tr3 () Bool
  false)
(define-fun |Inv#level_0!4| () Bool
  true)
(define-fun spacer_proxy!7 () Bool
  true)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun aux!2_n () Int
  7579)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!44))
(define-fun aux!3_n () Int
  7)
(define-fun aux!6_n () Int
  3608)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun Inv_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun Inv_ticket_0 () Int
  (- 1))
(define-fun k!47 ((x!0 Int)) Int
  (ite (= x!0 7578) 582
  (ite (= x!0 7579) 582
  (ite (= x!0 4) (- 1)
    5))))
(define-fun k!44 ((x!0 Int)) Int
  (ite (= x!0 7578) 1
  (ite (= x!0 3608) (- 1593)
  (ite (= x!0 7579) 1
    3))))
(define-fun k!48 ((x!0 Int)) Int
  (ite (= x!0 7578) 1
  (ite (= x!0 3608) (- 1593)
  (ite (= x!0 7579) 2
    3))))
(define-fun k!45 ((x!0 Int)) Int
  (ite (= x!0 7578) 1
  (ite (= x!0 3608) (- 1593)
  (ite (= x!0 7579) 1
  (ite (= x!0 4) 1
    3)))))
(define-fun k!49 ((x!0 Int)) Int
  (ite (= x!0 7578) 1
  (ite (= x!0 3608) (- 1593)
  (ite (= x!0 7) 0
  (ite (= x!0 7579) 1
    3)))))
(define-fun k!46 ((x!0 Int)) Int
  (ite (= x!0 7578) 582
  (ite (= x!0 7579) 582
    5)))

Transition:
(and (= Inv_t_0 Inv_t_n)
     (= Inv_serving_0 Inv_serving_n)
     (= Inv_ticket_0 Inv_ticket_n)
     (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
     (= (select Inv_pc_0 aux!2_n) 1)
     (= (select Inv_t_n aux!2_n) Inv_serving_n))
Phi:
(let ((a!1 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1
       a!2
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(let ((a!1 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and (= (select Inv_t_n aux!2_n) Inv_serving_n)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       (= Inv_t_0 Inv_t_n)
       (= Inv_serving_0 Inv_serving_n)
       (= Inv_ticket_0 Inv_ticket_n)
       (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
       (= (select Inv_pc_0 aux!2_n) 1)
       (< (+ zk!1 (* (- 1) zk!0)) 0)
       a!1
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ zk!1 (* (- 1) aux!2_n))))))
  (and (not (= aux!2_n zk!1))
       (= (select Inv_pc_0 zk!1) 1)
       (= (select Inv_t_0 aux!2_n) Inv_serving_0)
       (= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0)
       (= (select Inv_pc_0 aux!2_n) 1)
       a!1))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 1 depth: 0
(let ((a!1 (= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0))
      (a!2 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!3 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!4 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0)))
  (and a!1
       a!2
       a!3
       a!4
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 1 depth: 5
(let ((a!1 (= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0))
      (a!2 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!3 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!4 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0)))
  (and a!1
       a!2
       a!3
       a!4
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(= (select Inv_pc_n zk!1) 1)
(not (= (select Inv_pc_n zk!1) 0))
(>= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)
(>= (select Inv_pc_n zk!1) 1)
(not (<= (+ zk!1 (* (- 1) zk!0)) 0))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(= (select Inv_pc_n zk!1) 1)
(not (= (select Inv_pc_n zk!1) 0))
(>= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)
(>= (select Inv_pc_n zk!1) 1)
(not (<= (+ zk!1 (* (- 1) zk!0)) 0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= (select Inv_pc_n zk!1) 0))
(>= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)
(>= (select Inv_pc_n zk!1) 1)
(not (<= (+ zk!1 (* (- 1) zk!0)) 0))
(= 1 (select Inv_pc_n zk!1))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 5 new size: 3
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)))
    (or (<= (+ zk!1 (* (- 1) zk!0)) 0)
        (not (<= 1 (select Inv_pc_n zk!1)))
        (not a!1))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 1 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)))
    (or (<= (+ (* (- 1) zk!0) zk!1) 0) (<= (select Inv_pc_n zk!1) 0) (not a!1))))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)))
    (or (<= (+ (* (- 1) zk!0) zk!1) 0) (<= (select Inv_pc_n zk!1) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_pc_0 zk!1) (* (- 1) (select Inv_pc_0 aux!2_n))) 0)))
(let ((a!2 (or (<= (+ (* (- 1) zk!1) aux!2_n) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1))))
  (or (=> Inv_tr1 a!2) |Inv#level_2!19|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_pc_0 zk!0)
                               (* (- 1) (select Inv_pc_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1))))))
  (or (=> Inv_tr1 a!1) |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_pc_0 zk!1) (* (- 1) (select Inv_pc_0 aux!2_n))) 0)))
(let ((a!2 (or (<= (+ (* (- 1) zk!1) aux!2_n) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1))))
  (or (=> Inv_tr2 a!2) |Inv#level_2!19|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_pc_0 zk!0)
                               (* (- 1) (select Inv_pc_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1))))))
  (or (=> Inv_tr2 a!1) |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_pc_0 zk!1) (* (- 1) (select Inv_pc_0 aux!2_n))) 0)))
(let ((a!2 (or (<= (+ (* (- 1) zk!1) aux!2_n) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1))))
  (or (=> Inv_tr3 a!2) |Inv#level_2!19|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_pc_0 zk!0)
                               (* (- 1) (select Inv_pc_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1))))))
  (or (=> Inv_tr3 a!1) |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_pc_0 zk!1) (* (- 1) (select Inv_pc_0 aux!2_n))) 0)))
(let ((a!2 (or (<= (+ (* (- 1) zk!1) aux!2_n) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1))))
  (or (=> Error_dummy a!2) |Error#level_2!12|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_pc_0 zk!0)
                               (* (- 1) (select Inv_pc_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1))))))
  (or (=> Error_dummy a!1) |Error#level_2!12|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 2 depth: 0
(let ((a!1 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1
       a!2
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 2 depth: 5
(let ((a!1 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1
       a!2
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(= (select Inv_pc_n zk!0) 2)
(not (<= (select Inv_pc_n zk!0) 0))
(not (= (select Inv_pc_n zk!0) 0))
(= 1 (select Inv_pc_n zk!1))
(<= (select Inv_pc_n zk!1) 1)
(>= (select Inv_pc_n zk!1) 1)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(= (select Inv_pc_n zk!0) 2)
(not (<= (select Inv_pc_n zk!0) 0))
(not (= (select Inv_pc_n zk!0) 0))
(= 1 (select Inv_pc_n zk!1))
(<= (select Inv_pc_n zk!1) 1)
(>= (select Inv_pc_n zk!1) 1)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (select Inv_pc_n zk!0) 0))
(not (= (select Inv_pc_n zk!0) 0))
(<= (select Inv_pc_n zk!1) 1)
(>= (select Inv_pc_n zk!1) 1)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(= 2 (select Inv_pc_n zk!0))
(= (select Inv_pc_n zk!1) 1)
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 7 new size: 3
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!1 Int) (zk!0 Int))
  (or (not (<= 2 (select Inv_pc_n zk!0)))
      (<= (+ zk!0 (* (- 1) zk!1)) 0)
      (not (>= (select Inv_pc_n zk!1) 1))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 2 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (<= (+ (* (- 1) zk!1) zk!0) 0)
      (<= (select Inv_pc_n zk!1) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (<= (+ (* (- 1) zk!1) zk!0) 0)
      (<= (select Inv_pc_n zk!1) 0)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 zk!1) 2))
               (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0))))
  (or (=> Inv_tr1 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (<= (+ (* (- 1) zk!1) zk!0) 0)
                 (<= (select Inv_pc_0 zk!1) 0)))))
  (or (=> Inv_tr1 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 zk!1) 2))
               (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0))))
  (or (=> Inv_tr2 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (<= (+ (* (- 1) zk!1) zk!0) 0)
                 (<= (select Inv_pc_0 zk!1) 0)))))
  (or (=> Inv_tr2 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 zk!1) 2))
               (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0))))
  (or (=> Inv_tr3 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (<= (+ (* (- 1) zk!1) zk!0) 0)
                 (<= (select Inv_pc_0 zk!1) 0)))))
  (or (=> Inv_tr3 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 zk!1) 2))
               (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0))))
  (or (=> Error_dummy a!1) |Error#level_3!13|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (<= (+ (* (- 1) zk!1) zk!0) 0)
                 (<= (select Inv_pc_0 zk!1) 0)))))
  (or (=> Error_dummy a!1) |Error#level_3!13|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 3 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 3 depth: 5
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun aux!1_n () Int
  4)
(define-fun Inv_ticket_n () Int
  (- 1))
(define-fun |Inv#level_2!19| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun |Inv#level_6!28| () Bool
  false)
(define-fun Inv_serving_n () Int
  3502)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun zk!1 () Int
  4186)
(define-fun Inv_serving_0 () Int
  3502)
(define-fun Inv_t_0 () (Array Int Int)
  (_ as-array k!52))
(define-fun zk!0 () Int
  4185)
(define-fun |Inv#level_3!21| () Bool
  false)
(define-fun |Inv#level_7!34| () Bool
  false)
(define-fun |Inv#level_1!18| () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun Inv_tr1 () Bool
  false)
(define-fun |Inv#level_4!22| () Bool
  false)
(define-fun Inv_pc_n () (Array Int Int)
  (_ as-array k!54))
(define-fun Inv_tr2 () Bool
  true)
(define-fun |Inv#level_5!23| () Bool
  false)
(define-fun Inv_t_n () (Array Int Int)
  (_ as-array k!52))
(define-fun Inv_ext0_n () Bool
  false)
(define-fun Inv_tr3 () Bool
  false)
(define-fun |Inv#level_0!4| () Bool
  true)
(define-fun aux!2_n () Int
  4186)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!50))
(define-fun aux!3_n () Int
  7)
(define-fun aux!6_n () Int
  4186)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun Inv_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun Inv_ticket_0 () Int
  (- 1))
(define-fun k!51 ((x!0 Int)) Int
  (ite (= x!0 4186) 1
  (ite (= x!0 4185) 2
  (ite (= x!0 4) 1
    3))))
(define-fun k!55 ((x!0 Int)) Int
  (ite (= x!0 4186) 1
  (ite (= x!0 7) 0
  (ite (= x!0 4185) 2
    3))))
(define-fun k!52 ((x!0 Int)) Int
  (ite (= x!0 4186) 3502
    5))
(define-fun k!53 ((x!0 Int)) Int
  (ite (= x!0 4186) 3502
  (ite (= x!0 4) (- 1)
    5)))
(define-fun k!50 ((x!0 Int)) Int
  (ite (= x!0 4186) 1
  (ite (= x!0 4185) 2
    3)))
(define-fun k!54 ((x!0 Int)) Int
  (ite (= x!0 4186) 2
  (ite (= x!0 4185) 2
    3)))

Transition:
(and (= Inv_t_0 Inv_t_n)
     (= Inv_serving_0 Inv_serving_n)
     (= Inv_ticket_0 Inv_ticket_n)
     (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
     (= (select Inv_pc_0 aux!2_n) 1)
     (= (select Inv_t_n aux!2_n) Inv_serving_n))
Phi:
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and (= (select Inv_t_n aux!2_n) Inv_serving_n)
       (= (select Inv_pc_n zk!0) 2)
       (= Inv_t_0 Inv_t_n)
       (= Inv_serving_0 Inv_serving_n)
       (= Inv_ticket_0 Inv_ticket_n)
       (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
       (= (select Inv_pc_0 aux!2_n) 1)
       a!1
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ zk!0 (* (- 1) aux!2_n))))))
  (and (not (= aux!2_n zk!0))
       (= (select Inv_pc_0 zk!0) 2)
       (= (select Inv_t_0 aux!2_n) Inv_serving_0)
       (= (select Inv_pc_0 aux!2_n) 1)
       a!1))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 2 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and a!1
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 2 depth: 5
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and a!1
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(>= (select Inv_pc_n zk!1) 1)
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!0) 2)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(= (select Inv_pc_n zk!1) 1)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(>= (select Inv_pc_n zk!1) 1)
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!0) 2)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(= (select Inv_pc_n zk!1) 1)
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(>= (select Inv_pc_n zk!1) 1)
(not (= (select Inv_pc_n zk!0) 0))
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(= 2 (select Inv_pc_n zk!0))
(= 1 (select Inv_pc_n zk!1))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 6 new size: 3
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (not (>= 1 (select Inv_pc_n zk!1)))
      (not (<= 1 (select Inv_pc_n zk!1)))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 2 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (not (<= (select Inv_pc_n zk!1) 1))
      (<= (select Inv_pc_n zk!1) 0)))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (not (<= (select Inv_pc_n zk!1) 1))
      (<= (select Inv_pc_n zk!1) 0)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 zk!0) 2))
               (not (<= (select Inv_pc_0 aux!2_n) 1))
               (<= (select Inv_pc_0 aux!2_n) 0))))
  (or (=> Inv_tr1 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (not (<= (select Inv_pc_0 zk!1) 1))
                 (<= (select Inv_pc_0 zk!1) 0)))))
  (or (=> Inv_tr1 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 zk!0) 2))
               (not (<= (select Inv_pc_0 aux!2_n) 1))
               (<= (select Inv_pc_0 aux!2_n) 0))))
  (or (=> Inv_tr2 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (not (<= (select Inv_pc_0 zk!1) 1))
                 (<= (select Inv_pc_0 zk!1) 0)))))
  (or (=> Inv_tr2 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 zk!0) 2))
               (not (<= (select Inv_pc_0 aux!2_n) 1))
               (<= (select Inv_pc_0 aux!2_n) 0))))
  (or (=> Inv_tr3 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (not (<= (select Inv_pc_0 zk!1) 1))
                 (<= (select Inv_pc_0 zk!1) 0)))))
  (or (=> Inv_tr3 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 zk!0) 2))
               (not (<= (select Inv_pc_0 aux!2_n) 1))
               (<= (select Inv_pc_0 aux!2_n) 0))))
  (or (=> Error_dummy a!1) |Error#level_3!13|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (not (<= (select Inv_pc_0 zk!1) 1))
                 (<= (select Inv_pc_0 zk!1) 0)))))
  (or (=> Error_dummy a!1) |Error#level_3!13|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 3 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 3 depth: 5
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(not (>= (+ zk!0 (* (- 1) zk!1)) 0))
(= 2 (select Inv_pc_n zk!1))
(>= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (<= (select Inv_pc_n zk!1) 1))
(= (select Inv_pc_n zk!1) 2)
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (+ zk!1 (* (- 1) zk!0)) 0))
(= (select Inv_pc_n zk!0) 2)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(not (>= (+ zk!0 (* (- 1) zk!1)) 0))
(= 2 (select Inv_pc_n zk!1))
(>= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (<= (select Inv_pc_n zk!1) 1))
(= (select Inv_pc_n zk!1) 2)
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (+ zk!1 (* (- 1) zk!0)) 0))
(= (select Inv_pc_n zk!0) 2)
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (>= (+ zk!0 (* (- 1) zk!1)) 0))
(>= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (<= (select Inv_pc_n zk!1) 1))
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (+ zk!1 (* (- 1) zk!0)) 0))
(= (select Inv_pc_n zk!1) (select Inv_pc_n zk!0))
(= (select Inv_pc_n zk!1) 2)
(= (select Inv_pc_n zk!0) 2)
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 11 new size: 3
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!1 Int) (zk!0 Int))
  (or (<= (+ zk!1 (* (- 1) zk!0)) 0)
      (not (>= (select Inv_pc_n zk!1) 2))
      (not (>= (select Inv_pc_n zk!0) 2))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 3 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (<= (+ (* (- 1) zk!0) zk!1) 0)
      (not (>= (select Inv_pc_n zk!1) 2))
      (not (>= (select Inv_pc_n zk!0) 2))))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (<= (+ (* (- 1) zk!0) zk!1) 0)
      (not (>= (select Inv_pc_n zk!1) 2))
      (not (>= (select Inv_pc_n zk!0) 2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Inv_tr1 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Inv_tr1 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Inv_tr2 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Inv_tr2 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Inv_tr3 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Inv_tr3 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Error_dummy a!1) |Error#level_4!15|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Error_dummy a!1) |Error#level_4!15|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 4 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 4 depth: 5
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 4 Error false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 Error false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |Error#level_4!15|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_5!25|)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 5 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 5 depth: 5
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 5 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 query!0 false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |query!0#level_5!25|)
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (= (+ (* (- 1) zk!1) zk!0) 0)
      (not (>= (select Inv_pc_n zk!1) 2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Inv_tr1 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Inv_tr1 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Inv_tr2 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Inv_tr2 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Inv_tr3 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Inv_tr3 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Error_dummy a!1) |Error#level_4!15|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Error_dummy a!1) |Error#level_4!15|))
------------------------------------------------
-------- [spacer] propagate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3142 ---------
In full propagation
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 6 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 6 depth: 6
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |query!0#level_5!25| () Bool
  true)
(define-fun query!0_ext0_n () Bool
  false)
(define-fun |query!0#level_7!36| () Bool
  false)
(define-fun |query!0#level_6!30| () Bool
  false)
(define-fun |query!0#level_8!71| () Bool
  false)
(define-fun query!0_dummy () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |query!0#level_2!10| () Bool
  true)
(define-fun |query!0#level_1!9| () Bool
  true)
(define-fun |query!0#level_0!8| () Bool
  true)
(define-fun |query!0#level_3!14| () Bool
  true)
(define-fun |query!0#level_4!16| () Bool
  true)

Transition:
true
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
true
Projected Implicant
(and true)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 5 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 5 depth: 6
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Error#level_1!11| () Bool
  true)
(define-fun aux!5_n () Int
  (- 1))
(define-fun Error_dummy () Bool
  true)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!72))
(define-fun |Error#level_5!24| () Bool
  false)
(define-fun |Error#level_6!29| () Bool
  false)
(define-fun aux!6_n () Int
  0)
(define-fun Error_ext0_n () Bool
  false)
(define-fun |Error#level_3!13| () Bool
  true)
(define-fun |vsolver#0| () Bool
  true)
(define-fun |Error#level_2!12| () Bool
  true)
(define-fun |Error#level_7!35| () Bool
  false)
(define-fun |Error#level_4!15| () Bool
  true)
(define-fun |Error#level_8!70| () Bool
  false)
(define-fun |Error#level_0!7| () Bool
  true)
(define-fun k!72 ((x!0 Int)) Int
  (ite (= x!0 (- 1)) 2
  (ite (= x!0 0) 2
    2)))

Transition:
(and (= (select Inv_pc_0 aux!6_n) 2)
     (= (select Inv_pc_0 aux!5_n) 2)
     (not (= aux!6_n aux!5_n)))
Phi:
true
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(and (< aux!5_n aux!6_n)
     (= (select Inv_pc_0 aux!5_n) 2)
     (= (select Inv_pc_0 aux!6_n) 2))
Projected Implicant
(and (= (select Inv_pc_0 aux!6_n) 2)
     (not (<= aux!6_n aux!5_n))
     (= (select Inv_pc_0 aux!5_n) 2))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 4 depth: 0
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 4 depth: 6
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Inv#level_8!69| () Bool
  false)
(define-fun aux!1_n () Int
  4)
(define-fun Inv_ticket_n () Int
  (- 1))
(define-fun |Inv#level_2!19| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun |Inv#level_6!28| () Bool
  false)
(define-fun Inv_serving_n () Int
  3447)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun zk!1 () Int
  606)
(define-fun Inv_serving_0 () Int
  3447)
(define-fun Inv_t_0 () (Array Int Int)
  (_ as-array k!75))
(define-fun zk!0 () Int
  718)
(define-fun |Inv#level_3!21| () Bool
  true)
(define-fun |Inv#level_7!34| () Bool
  false)
(define-fun |Inv#level_1!18| () Bool
  true)
(define-fun |Inv#level_4!22| () Bool
  false)
(define-fun Inv_tr1 () Bool
  false)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun Inv_pc_n () (Array Int Int)
  (_ as-array k!77))
(define-fun Inv_tr2 () Bool
  true)
(define-fun |Inv#level_5!23| () Bool
  false)
(define-fun Inv_t_n () (Array Int Int)
  (_ as-array k!75))
(define-fun Inv_ext0_n () Bool
  false)
(define-fun Inv_tr3 () Bool
  false)
(define-fun |Inv#level_0!4| () Bool
  true)
(define-fun aux!2_n () Int
  718)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!73))
(define-fun aux!3_n () Int
  7)
(define-fun aux!6_n () Int
  244)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun Inv_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun Inv_ticket_0 () Int
  (- 1))
(define-fun k!75 ((x!0 Int)) Int
  (ite (= x!0 718) 3447
    5))
(define-fun k!76 ((x!0 Int)) Int
  (ite (= x!0 718) 3447
  (ite (= x!0 4) (- 1)
    5)))
(define-fun k!73 ((x!0 Int)) Int
  (ite (= x!0 606) 2
  (ite (= x!0 244) 1
  (ite (= x!0 718) 1
    3))))
(define-fun k!77 ((x!0 Int)) Int
  (ite (= x!0 606) 2
  (ite (= x!0 244) 1
  (ite (= x!0 718) 2
    3))))
(define-fun k!74 ((x!0 Int)) Int
  (ite (= x!0 606) 2
  (ite (= x!0 244) 1
  (ite (= x!0 718) 1
  (ite (= x!0 4) 1
    3)))))
(define-fun k!78 ((x!0 Int)) Int
  (ite (= x!0 606) 2
  (ite (= x!0 244) 1
  (ite (= x!0 7) 0
  (ite (= x!0 718) 1
    3)))))

Transition:
(and (= Inv_t_0 Inv_t_n)
     (= Inv_serving_0 Inv_serving_n)
     (= Inv_ticket_0 Inv_ticket_n)
     (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
     (= (select Inv_pc_0 aux!2_n) 1)
     (= (select Inv_t_n aux!2_n) Inv_serving_n))
Phi:
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and (= (select Inv_t_n aux!2_n) Inv_serving_n)
       (= (select Inv_pc_n zk!0) 2)
       (= Inv_t_0 Inv_t_n)
       (= Inv_serving_0 Inv_serving_n)
       (= Inv_ticket_0 Inv_ticket_n)
       (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
       (= (select Inv_pc_0 aux!2_n) 1)
       a!1
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ zk!1 (* (- 1) aux!2_n))))))
  (and (not (= aux!2_n zk!1))
       a!1
       (= (select Inv_t_0 aux!2_n) Inv_serving_0)
       (= (select Inv_pc_0 aux!2_n) 1)
       (= (select Inv_pc_0 zk!1) 2)))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 3 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 3 depth: 6
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Inv#level_8!69| () Bool
  false)
(define-fun aux!1_n () Int
  4)
(define-fun Inv_ticket_n () Int
  (- 1))
(define-fun |Inv#level_2!19| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun |Inv#level_6!28| () Bool
  false)
(define-fun Inv_serving_n () Int
  8854)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun zk!1 () Int
  719)
(define-fun Inv_serving_0 () Int
  8854)
(define-fun spacer_proxy!6 () Bool
  true)
(define-fun Inv_t_0 () (Array Int Int)
  (_ as-array k!81))
(define-fun zk!0 () Int
  718)
(define-fun |Inv#level_3!21| () Bool
  false)
(define-fun |Inv#level_7!34| () Bool
  false)
(define-fun |Inv#level_1!18| () Bool
  true)
(define-fun |Inv#level_4!22| () Bool
  false)
(define-fun Inv_tr1 () Bool
  false)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun Inv_pc_n () (Array Int Int)
  (_ as-array k!83))
(define-fun Inv_tr2 () Bool
  true)
(define-fun |Inv#level_5!23| () Bool
  false)
(define-fun Inv_t_n () (Array Int Int)
  (_ as-array k!81))
(define-fun Inv_ext0_n () Bool
  false)
(define-fun Inv_tr3 () Bool
  false)
(define-fun |Inv#level_0!4| () Bool
  true)
(define-fun spacer_proxy!7 () Bool
  true)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun aux!2_n () Int
  718)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!79))
(define-fun aux!3_n () Int
  7)
(define-fun aux!6_n () Int
  244)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun Inv_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun Inv_ticket_0 () Int
  (- 1))
(define-fun k!79 ((x!0 Int)) Int
  (ite (= x!0 719) 1
  (ite (= x!0 244) 1
  (ite (= x!0 718) 1
    3))))
(define-fun k!83 ((x!0 Int)) Int
  (ite (= x!0 719) 1
  (ite (= x!0 244) 1
  (ite (= x!0 718) 2
    3))))
(define-fun k!80 ((x!0 Int)) Int
  (ite (= x!0 719) 1
  (ite (= x!0 244) 1
  (ite (= x!0 718) 1
  (ite (= x!0 4) 1
    3)))))
(define-fun k!84 ((x!0 Int)) Int
  (ite (= x!0 719) 1
  (ite (= x!0 244) 1
  (ite (= x!0 7) 0
  (ite (= x!0 718) 1
    3)))))
(define-fun k!81 ((x!0 Int)) Int
  (ite (= x!0 719) 8854
  (ite (= x!0 718) 8854
    5)))
(define-fun k!82 ((x!0 Int)) Int
  (ite (= x!0 719) 8854
  (ite (= x!0 718) 8854
  (ite (= x!0 4) (- 1)
    5))))

Transition:
(and (= Inv_t_0 Inv_t_n)
     (= Inv_serving_0 Inv_serving_n)
     (= Inv_ticket_0 Inv_ticket_n)
     (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
     (= (select Inv_pc_0 aux!2_n) 1)
     (= (select Inv_t_n aux!2_n) Inv_serving_n))
Phi:
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_t_n aux!2_n) Inv_serving_n)
       (< 0 (+ zk!1 (* (- 1) zk!0)))
       (= Inv_t_0 Inv_t_n)
       (= Inv_serving_0 Inv_serving_n)
       (= Inv_ticket_0 Inv_ticket_n)
       (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
       (= (select Inv_pc_0 aux!2_n) 1)
       (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) zk!1) aux!2_n)))))
  (and (not (= aux!2_n zk!1))
       (= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0)
       (= (select Inv_t_0 aux!2_n) Inv_serving_0)
       a!1
       (= (select Inv_pc_0 aux!2_n) 1)
       (= (select Inv_pc_0 zk!1) 1)))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 2 depth: 0
(let ((a!1 (not (<= (+ zk!0 (* (- 1) zk!1)) 0)))
      (a!2 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0))
      (a!3 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!4 (= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)))
  (and (= (select Inv_pc_n zk!1) 1)
       a!1
       a!2
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!3
       a!4))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 2 depth: 6
(let ((a!1 (not (<= (+ zk!0 (* (- 1) zk!1)) 0)))
      (a!2 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0))
      (a!3 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!4 (= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)))
  (and (= (select Inv_pc_n zk!1) 1)
       a!1
       a!2
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!3
       a!4))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Inv#level_8!69| () Bool
  false)
(define-fun aux!1_n () Int
  717)
(define-fun Inv_ticket_n () Int
  0)
(define-fun |Inv#level_2!19| () Bool
  false)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun |Inv#level_6!28| () Bool
  false)
(define-fun Inv_serving_n () Int
  (- 1))
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun zk!1 () Int
  717)
(define-fun Inv_serving_0 () Int
  (- 1))
(define-fun spacer_proxy!6 () Bool
  true)
(define-fun Inv_t_0 () (Array Int Int)
  (_ as-array k!87))
(define-fun zk!0 () Int
  718)
(define-fun |Inv#level_3!21| () Bool
  false)
(define-fun |Inv#level_7!34| () Bool
  false)
(define-fun |Inv#level_1!18| () Bool
  true)
(define-fun |Inv#level_4!22| () Bool
  false)
(define-fun Inv_tr1 () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun Inv_pc_n () (Array Int Int)
  (_ as-array k!86))
(define-fun Inv_tr2 () Bool
  false)
(define-fun spacer_proxy!9 () Bool
  true)
(define-fun |Inv#level_5!23| () Bool
  false)
(define-fun Inv_t_n () (Array Int Int)
  (_ as-array k!88))
(define-fun Inv_ext0_n () Bool
  false)
(define-fun Inv_tr3 () Bool
  false)
(define-fun |Inv#level_0!4| () Bool
  true)
(define-fun spacer_proxy!7 () Bool
  true)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun aux!2_n () Int
  718)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!85))
(define-fun aux!3_n () Int
  6)
(define-fun aux!6_n () Int
  718)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun Inv_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun spacer_proxy!8 () Bool
  true)
(define-fun Inv_ticket_0 () Int
  (- 1))
(define-fun k!87 ((x!0 Int)) Int
  (ite (= x!0 718) (- 1)
    4))
(define-fun k!88 ((x!0 Int)) Int
  (ite (= x!0 717) (- 1)
  (ite (= x!0 718) (- 1)
    4)))
(define-fun k!85 ((x!0 Int)) Int
  (ite (= x!0 717) 0
  (ite (= x!0 718) 1
    3)))
(define-fun k!89 ((x!0 Int)) Int
  (ite (= x!0 717) 0
  (ite (= x!0 718) 2
    3)))
(define-fun k!86 ((x!0 Int)) Int
  (ite (= x!0 717) 1
  (ite (= x!0 718) 1
    3)))
(define-fun k!90 ((x!0 Int)) Int
  (ite (= x!0 717) 0
  (ite (= x!0 718) 1
  (ite (= x!0 6) 0
    3))))

Transition:
(and (= Inv_serving_0 Inv_serving_n)
     (= Inv_pc_n (store Inv_pc_0 aux!1_n 1))
     (= Inv_t_n (store Inv_t_0 aux!1_n Inv_ticket_0))
     (= (select Inv_pc_0 aux!1_n) 0)
     (= Inv_ticket_n (+ 1 Inv_ticket_0)))
Phi:
(let ((a!1 (not (<= (+ zk!0 (* (- 1) zk!1)) 0)))
      (a!2 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0))
      (a!3 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!4 (= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)))
  (and (= (select Inv_pc_n zk!1) 1)
       a!1
       a!2
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!3
       a!4))
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(let ((a!1 (= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0)))
      (a!3 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0)))
  (and (= Inv_ticket_n (+ 1 Inv_ticket_0))
       a!1
       (= Inv_serving_0 Inv_serving_n)
       (= Inv_pc_n (store Inv_pc_0 aux!1_n 1))
       (= Inv_t_n (store Inv_t_0 aux!1_n Inv_ticket_0))
       (= (select Inv_pc_0 aux!1_n) 0)
       (= (select Inv_pc_n zk!1) 1)
       a!2
       a!3
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       (< (+ zk!1 (* (- 1) zk!0)) 0)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) zk!0) aux!1_n))))
      (a!2 (= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
  (and (not (= aux!1_n zk!0))
       a!1
       (= (select Inv_pc_0 zk!0) 1)
       (= (select Inv_pc_0 aux!1_n) 0)
       a!2
       (= (+ (* (- 1) Inv_serving_0) Inv_ticket_0) 0)))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 1 depth: 0
(let ((a!1 (= (+ Inv_ticket_n (* (- 1) Inv_serving_n) (* (- 1) (select Inv_pc_n zk!1))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0)))
      (a!3 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0))
      (a!4 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!1) 0) a!3 (= (select Inv_pc_n zk!0) 1) a!4))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 1 depth: 6
(let ((a!1 (= (+ Inv_ticket_n (* (- 1) Inv_serving_n) (* (- 1) (select Inv_pc_n zk!1))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0)))
      (a!3 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0))
      (a!4 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!1) 0) a!3 (= (select Inv_pc_n zk!0) 1) a!4))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (select Inv_pc_n zk!0) 0))
(= (select Inv_t_n zk!0) Inv_ticket_n)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (select Inv_pc_n zk!0) 0))
(= (select Inv_t_n zk!0) Inv_ticket_n)
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (select Inv_pc_n zk!0) 0))
(= Inv_ticket_n (select Inv_t_n zk!0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 3 new size: 2
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!0 Int))
  (or (<= (select Inv_pc_n zk!0) 0) (not (<= Inv_ticket_n (select Inv_t_n zk!0)))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 1 Inv (forall ((zk!0 Int))
  (let ((a!1 (<= (+ Inv_ticket_n (* (- 1) (select Inv_t_n zk!0))) 0)))
    (or (<= (select Inv_pc_n zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 1 Inv (forall ((zk!0 Int))
  (let ((a!1 (<= (+ Inv_ticket_n (* (- 1) (select Inv_t_n zk!0))) 0)))
    (or (<= (select Inv_pc_n zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr1 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_2!19|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr1 a!1) |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr2 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_2!19|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr2 a!1) |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr3 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_2!19|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr3 a!1) |Inv#level_2!19|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Error_dummy (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Error#level_2!12|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Error_dummy a!1) |Error#level_2!12|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 2 depth: 0
(let ((a!1 (not (<= (+ zk!0 (* (- 1) zk!1)) 0)))
      (a!2 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0))
      (a!3 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!4 (= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)))
  (and (= (select Inv_pc_n zk!1) 1)
       a!1
       a!2
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!3
       a!4))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 2 depth: 6
(let ((a!1 (not (<= (+ zk!0 (* (- 1) zk!1)) 0)))
      (a!2 (= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0))
      (a!3 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!4 (= (+ (select Inv_pc_n zk!0) (* (- 1) (select Inv_pc_n zk!1))) 0)))
  (and (= (select Inv_pc_n zk!1) 1)
       a!1
       a!2
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!3
       a!4))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(= (select Inv_pc_n zk!0) 1)
(not (= (select Inv_pc_n zk!1) 0))
(>= (select Inv_pc_n zk!1) 1)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(let ((a!1 (<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) (- 1))))
  (not a!1))
(= (select Inv_t_n zk!1) Inv_serving_n)
(= Inv_serving_n (select Inv_t_n zk!0))
(<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0)
(>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0)
(>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
(<= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
(let ((a!1 (<= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) (- 1))))
  (not a!1))
(= 1 (select Inv_pc_n zk!0))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(= (select Inv_pc_n zk!0) 1)
(not (= (select Inv_pc_n zk!1) 0))
(>= (select Inv_pc_n zk!1) 1)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(let ((a!1 (<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) (- 1))))
  (not a!1))
(= (select Inv_t_n zk!1) Inv_serving_n)
(= Inv_serving_n (select Inv_t_n zk!0))
(<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0)
(>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0)
(>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
(<= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
(let ((a!1 (<= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) (- 1))))
  (not a!1))
(= 1 (select Inv_pc_n zk!0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= (select Inv_pc_n zk!1) 0))
(>= (select Inv_pc_n zk!1) 1)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(let ((a!1 (<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) (- 1))))
  (not a!1))
(<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0)
(>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!0))) 0)
(>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
(<= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
(let ((a!1 (<= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) (- 1))))
  (not a!1))
(= 1 (select Inv_pc_n zk!0))
(= Inv_serving_n (select Inv_t_n zk!0))
(= Inv_serving_n (select Inv_t_n zk!1))
(= (select Inv_t_n zk!0) (select Inv_t_n zk!1))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 14 new size: 5
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!1 Int) (zk!0 Int))
  (or (<= (+ zk!0 (* (- 1) zk!1)) 0)
      (not (>= (select Inv_pc_n zk!1) 1))
      (not (<= 1 (select Inv_pc_n zk!0)))
      (not (>= (select Inv_t_n zk!0) (select Inv_t_n zk!1)))
      (not (<= (select Inv_t_n zk!0) (select Inv_t_n zk!1)))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 2 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (<= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0)))
    (or (<= (+ (* (- 1) zk!1) zk!0) 0)
        (<= (select Inv_pc_n zk!1) 0)
        (<= (select Inv_pc_n zk!0) 0)
        (not a!1)
        (not a!2))))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (<= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0)))
    (or (<= (+ (* (- 1) zk!1) zk!0) 0)
        (<= (select Inv_pc_n zk!1) 0)
        (<= (select Inv_pc_n zk!0) 0)
        (not a!1)
        (not a!2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Inv_tr1 a!3) |Inv#level_3!21|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Inv_tr1 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Inv_tr2 a!3) |Inv#level_3!21|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Inv_tr2 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Inv_tr3 a!3) |Inv#level_3!21|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Inv_tr3 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Error_dummy a!3) |Error#level_3!13|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Error_dummy a!1) |Error#level_3!13|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 3 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 3 depth: 6
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Inv#level_8!69| () Bool
  false)
(define-fun aux!1_n () Int
  9432)
(define-fun Inv_ticket_n () Int
  476)
(define-fun |Inv#level_2!19| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun |Inv#level_6!28| () Bool
  false)
(define-fun Inv_serving_n () Int
  475)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun zk!1 () Int
  9432)
(define-fun Inv_serving_0 () Int
  475)
(define-fun spacer_proxy!6 () Bool
  true)
(define-fun Inv_t_0 () (Array Int Int)
  (_ as-array k!100))
(define-fun zk!0 () Int
  1312)
(define-fun |Inv#level_3!21| () Bool
  false)
(define-fun |Inv#level_7!34| () Bool
  false)
(define-fun |Inv#level_1!18| () Bool
  true)
(define-fun |Inv#level_4!22| () Bool
  false)
(define-fun Inv_tr1 () Bool
  true)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun Inv_pc_n () (Array Int Int)
  (_ as-array k!99))
(define-fun Inv_tr2 () Bool
  false)
(define-fun |Inv#level_5!23| () Bool
  false)
(define-fun Inv_t_n () (Array Int Int)
  (_ as-array k!101))
(define-fun Inv_ext0_n () Bool
  false)
(define-fun Inv_tr3 () Bool
  false)
(define-fun |Inv#level_0!4| () Bool
  true)
(define-fun spacer_proxy!7 () Bool
  true)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun aux!2_n () Int
  9433)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!98))
(define-fun aux!3_n () Int
  6)
(define-fun aux!6_n () Int
  1313)
(define-fun spacer_proxy!5 () Bool
  true)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun Inv_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun Inv_ticket_0 () Int
  475)
(define-fun k!99 ((x!0 Int)) Int
  (ite (= x!0 9432) 1
  (ite (= x!0 9433) (- 1)
  (ite (= x!0 1313) (- 4495)
  (ite (= x!0 1312) 2
    3)))))
(define-fun k!103 ((x!0 Int)) Int
  (ite (= x!0 9432) 0
  (ite (= x!0 9433) (- 1)
  (ite (= x!0 6) 0
  (ite (= x!0 1313) (- 4495)
  (ite (= x!0 1312) 2
    3))))))
(define-fun k!100 ((x!0 Int)) Int
  4)
(define-fun k!101 ((x!0 Int)) Int
  (ite (= x!0 9432) 475
    4))
(define-fun k!98 ((x!0 Int)) Int
  (ite (= x!0 9432) 0
  (ite (= x!0 9433) (- 1)
  (ite (= x!0 1313) (- 4495)
  (ite (= x!0 1312) 2
    3)))))
(define-fun k!102 ((x!0 Int)) Int
  (ite (= x!0 9432) 0
  (ite (= x!0 9433) 2
  (ite (= x!0 1313) (- 4495)
  (ite (= x!0 1312) 2
    3)))))

Transition:
(and (= Inv_serving_0 Inv_serving_n)
     (= Inv_pc_n (store Inv_pc_0 aux!1_n 1))
     (= Inv_t_n (store Inv_t_0 aux!1_n Inv_ticket_0))
     (= (select Inv_pc_0 aux!1_n) 0)
     (= Inv_ticket_n (+ 1 Inv_ticket_0)))
Phi:
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= Inv_ticket_n (+ 1 Inv_ticket_0))
       (< 0 (+ zk!1 (* (- 1) zk!0)))
       (= Inv_serving_0 Inv_serving_n)
       (= Inv_pc_n (store Inv_pc_0 aux!1_n 1))
       (= Inv_t_n (store Inv_t_0 aux!1_n Inv_ticket_0))
       (= (select Inv_pc_0 aux!1_n) 0)
       (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
Projected Implicant
(let ((a!1 (not (<= 0 (+ zk!0 (* (- 1) aux!1_n))))))
  (and (not (= aux!1_n zk!0))
       (= (+ (* (- 1) Inv_serving_0) Inv_ticket_0) 0)
       a!1
       (= (select Inv_pc_0 aux!1_n) 0)
       (= (select Inv_pc_0 zk!0) 2)))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 2 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ Inv_ticket_n (* (- 1) Inv_serving_n) (* (- 1) (select Inv_pc_n zk!1))) 0))
      (a!3 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!0) 2) a!1 a!2 (= (select Inv_pc_n zk!1) 0) a!3))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 2 depth: 6
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (= (+ Inv_ticket_n (* (- 1) Inv_serving_n) (* (- 1) (select Inv_pc_n zk!1))) 0))
      (a!3 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!0) 2) a!1 a!2 (= (select Inv_pc_n zk!1) 0) a!3))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(not (<= (+ Inv_serving_n (* (- 1) Inv_ticket_n)) (- 1)))
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!0) 2)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(not (<= (+ Inv_serving_n (* (- 1) Inv_ticket_n)) (- 1)))
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!0) 2)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ Inv_serving_n (* (- 1) Inv_ticket_n)) (- 1)))
(not (= (select Inv_pc_n zk!0) 0))
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(= 2 (select Inv_pc_n zk!0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 5 new size: 2
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!0 Int))
  (or (<= (+ Inv_serving_n (* (- 1) Inv_ticket_n)) (- 1))
      (not (<= 2 (select Inv_pc_n zk!0)))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 2 Inv (forall ((zk!0 Int))
  (let ((a!1 (not (>= (+ Inv_serving_n (* (- 1) Inv_ticket_n)) 0))))
    (or a!1 (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 Inv (forall ((zk!0 Int))
  (let ((a!1 (not (>= (+ Inv_serving_n (* (- 1) Inv_ticket_n)) 0))))
    (or a!1 (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr1 a!2) |Inv#level_3!21|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr1 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr2 a!2) |Inv#level_3!21|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr2 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr3 a!2) |Inv#level_3!21|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr3 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Error_dummy a!2) |Error#level_3!13|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Error_dummy a!1) |Error#level_3!13|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 3 depth: 0
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 3 depth: 6
(let ((a!1 (not (<= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (= (+ zk!1 (* (- 1) zk!0)) 0))))
  (and (= (select Inv_pc_n zk!1) 1)
       (= (select Inv_pc_n zk!0) 2)
       a!1
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)
       a!2))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(not (<= (+ (select Inv_t_n zk!1) (* (- 1) Inv_serving_n)) (- 1)))
(= (select Inv_pc_n zk!1) 1)
(<= (select Inv_pc_n zk!1) 1)
(>= (select Inv_pc_n zk!1) 1)
(not (= (select Inv_pc_n zk!1) 0))
(= (select Inv_pc_n zk!0) 2)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (>= (+ zk!0 (* (- 1) zk!1)) 0))
(not (<= (+ zk!1 (* (- 1) zk!0)) 0))
(let ((a!1 (<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) (- 1))))
  (not a!1))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(not (<= (+ (select Inv_t_n zk!1) (* (- 1) Inv_serving_n)) (- 1)))
(= (select Inv_pc_n zk!1) 1)
(<= (select Inv_pc_n zk!1) 1)
(>= (select Inv_pc_n zk!1) 1)
(not (= (select Inv_pc_n zk!1) 0))
(= (select Inv_pc_n zk!0) 2)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (>= (+ zk!0 (* (- 1) zk!1)) 0))
(not (<= (+ zk!1 (* (- 1) zk!0)) 0))
(let ((a!1 (<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) (- 1))))
  (not a!1))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (<= (+ (select Inv_t_n zk!1) (* (- 1) Inv_serving_n)) (- 1)))
(<= (select Inv_pc_n zk!1) 1)
(>= (select Inv_pc_n zk!1) 1)
(not (= (select Inv_pc_n zk!1) 0))
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (>= (+ zk!0 (* (- 1) zk!1)) 0))
(not (<= (+ zk!1 (* (- 1) zk!0)) 0))
(let ((a!1 (<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) (- 1))))
  (not a!1))
(= 1 (select Inv_pc_n zk!1))
(= 2 (select Inv_pc_n zk!0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 11 new size: 5
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) (- 1))))
    (or (not (<= 1 (select Inv_pc_n zk!1)))
        a!1
        (>= (+ zk!0 (* (- 1) zk!1)) 0)
        (not (<= 2 (select Inv_pc_n zk!0)))
        (<= (+ (select Inv_t_n zk!1) (* (- 1) Inv_serving_n)) (- 1)))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 3 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (not (>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0))))
    (or (<= (select Inv_pc_n zk!1) 0)
        (not a!1)
        (>= (+ (* (- 1) zk!1) zk!0) 0)
        (not (>= (select Inv_pc_n zk!0) 2))
        a!2)))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (not (>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0))))
    (or (<= (select Inv_pc_n zk!1) 0)
        (not a!1)
        (>= (+ (* (- 1) zk!1) zk!0) 0)
        (not (>= (select Inv_pc_n zk!0) 2))
        a!2)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (or (=> Inv_tr1 a!3) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (or (=> Inv_tr1 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (or (=> Inv_tr2 a!3) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (or (=> Inv_tr2 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (or (=> Inv_tr3 a!3) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (or (=> Inv_tr3 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (or (=> Error_dummy a!3) |Error#level_4!15|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (or (=> Error_dummy a!1) |Error#level_4!15|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 4 depth: 0
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 4 depth: 6
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:818 ---------
reachable is_concrete 0 rused: 0
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3289 ---------
Model:
(define-fun |Inv#level_8!69| () Bool
  false)
(define-fun aux!1_n () Int
  4)
(define-fun Inv_ticket_n () Int
  724)
(define-fun |Inv#level_2!19| () Bool
  true)
(define-fun spacer_proxy!2 () Bool
  true)
(define-fun |Inv#level_6!28| () Bool
  false)
(define-fun Inv_serving_n () Int
  6266)
(define-fun spacer_proxy!0 () Bool
  true)
(define-fun zk!1 () Int
  9515)
(define-fun Inv_serving_0 () Int
  6266)
(define-fun Inv_t_0 () (Array Int Int)
  (_ as-array k!111))
(define-fun zk!0 () Int
  9516)
(define-fun |Inv#level_3!21| () Bool
  true)
(define-fun |Inv#level_7!34| () Bool
  false)
(define-fun |Inv#level_1!18| () Bool
  true)
(define-fun |Inv#level_4!22| () Bool
  false)
(define-fun Inv_tr1 () Bool
  false)
(define-fun spacer_proxy!3 () Bool
  true)
(define-fun Inv_pc_n () (Array Int Int)
  (_ as-array k!113))
(define-fun Inv_tr2 () Bool
  true)
(define-fun |Inv#level_5!23| () Bool
  false)
(define-fun Inv_t_n () (Array Int Int)
  (_ as-array k!111))
(define-fun Inv_ext0_n () Bool
  false)
(define-fun Inv_tr3 () Bool
  false)
(define-fun |Inv#level_0!4| () Bool
  true)
(define-fun aux!2_n () Int
  9515)
(define-fun |Inv#reach_case_0_0| () Bool
  true)
(define-fun Inv_pc_0 () (Array Int Int)
  (_ as-array k!109))
(define-fun aux!3_n () Int
  7)
(define-fun aux!6_n () Int
  9517)
(define-fun spacer_proxy!1 () Bool
  true)
(define-fun Inv_tr0 () Bool
  false)
(define-fun |vsolver#0| () Bool
  true)
(define-fun spacer_proxy!4 () Bool
  true)
(define-fun Inv_ticket_0 () Int
  724)
(define-fun k!111 ((x!0 Int)) Int
  (ite (= x!0 9515) 6266
  (ite (= x!0 9517) 6267
    5)))
(define-fun k!112 ((x!0 Int)) Int
  (ite (= x!0 9515) 6266
  (ite (= x!0 9517) 6267
  (ite (= x!0 4) 724
    5))))
(define-fun k!109 ((x!0 Int)) Int
  (ite (= x!0 9515) 1
  (ite (= x!0 9517) (- 4190)
  (ite (= x!0 9516) 2
    3))))
(define-fun k!113 ((x!0 Int)) Int
  (ite (= x!0 9515) 2
  (ite (= x!0 9517) (- 4190)
  (ite (= x!0 9516) 2
    3))))
(define-fun k!110 ((x!0 Int)) Int
  (ite (= x!0 9515) 1
  (ite (= x!0 9517) (- 4190)
  (ite (= x!0 9516) 2
  (ite (= x!0 4) 1
    3)))))
(define-fun k!114 ((x!0 Int)) Int
  (ite (= x!0 9515) 1
  (ite (= x!0 9517) (- 4190)
  (ite (= x!0 7) 0
  (ite (= x!0 9516) 2
    3)))))

Transition:
(and (= Inv_t_0 Inv_t_n)
     (= Inv_serving_0 Inv_serving_n)
     (= Inv_ticket_0 Inv_ticket_n)
     (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
     (= (select Inv_pc_0 aux!2_n) 1)
     (= (select Inv_t_n aux!2_n) Inv_serving_n))
Phi:
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] create_children /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3339 ---------
Implicant
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and (= (select Inv_t_n aux!2_n) Inv_serving_n)
       (= (select Inv_pc_n zk!0) 2)
       (= Inv_t_0 Inv_t_n)
       (= Inv_serving_0 Inv_serving_n)
       (= Inv_ticket_0 Inv_ticket_n)
       (= Inv_pc_n (store Inv_pc_0 aux!2_n 2))
       (= (select Inv_pc_0 aux!2_n) 1)
       a!1
       a!2))
Projected Implicant
(let ((a!1 (not (<= 0 (+ (* (- 1) zk!0) aux!2_n)))))
  (and (not (= aux!2_n zk!0))
       a!1
       (= (select Inv_t_0 aux!2_n) Inv_serving_0)
       (= (select Inv_pc_0 zk!0) 2)
       (= (select Inv_pc_0 aux!2_n) 1)))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 3 depth: 0
(let ((a!1 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1
       a!2
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 3 depth: 6
(let ((a!1 (not (= (+ zk!1 (* (- 1) zk!0)) 0)))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1
       a!2
       (= (select Inv_pc_n zk!0) 2)
       (= (select Inv_pc_n zk!1) 1)
       (= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(>= (select Inv_pc_n zk!1) 1)
(= 2 (select Inv_pc_n zk!0))
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!0) 2)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(let ((a!1 (<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) (- 1))))
  (not a!1))
(not (<= (+ (select Inv_t_n zk!1) (* (- 1) Inv_serving_n)) (- 1)))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(>= (select Inv_pc_n zk!1) 1)
(= 2 (select Inv_pc_n zk!0))
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!0) 2)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(let ((a!1 (<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) (- 1))))
  (not a!1))
(not (<= (+ (select Inv_t_n zk!1) (* (- 1) Inv_serving_n)) (- 1)))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(>= (select Inv_pc_n zk!1) 1)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (= (select Inv_pc_n zk!0) 0))
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(let ((a!1 (<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) (- 1))))
  (not a!1))
(not (<= (+ (select Inv_t_n zk!1) (* (- 1) Inv_serving_n)) (- 1)))
(= (select Inv_pc_n zk!0) 2)
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 8 new size: 5
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (<= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) (- 1))))
    (or (not (>= (select Inv_pc_n zk!1) 1))
        (<= (+ zk!0 (* (- 1) zk!1)) 0)
        a!1
        (<= (+ (select Inv_t_n zk!1) (* (- 1) Inv_serving_n)) (- 1))
        (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 3 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (not (>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0))))
    (or (<= (select Inv_pc_n zk!1) 0)
        (<= (+ (* (- 1) zk!1) zk!0) 0)
        (not a!1)
        a!2
        (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (not (>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0))))
    (or (<= (select Inv_pc_n zk!1) 0)
        (<= (+ (* (- 1) zk!1) zk!0) 0)
        (not a!1)
        a!2
        (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr1 a!3) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr1 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr2 a!3) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr2 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr3 a!3) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr3 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Error_dummy a!3) |Error#level_4!15|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Error_dummy a!1) |Error#level_4!15|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Inv level: 4 depth: 0
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Inv level: 4 depth: 6
(let ((a!1 (= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0))
      (a!2 (not (<= (+ zk!0 (* (- 1) zk!1)) 0))))
  (and a!1 a!2 (= (select Inv_pc_n zk!0) 2)))
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
(= 2 (select Inv_pc_n zk!1))
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!1) 2)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(>= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(= 2 (select Inv_pc_n zk!0))
(= (select Inv_pc_n zk!0) 2)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(not (<= (select Inv_pc_n zk!1) 1))
(not (= (+ zk!0 (* (- 1) zk!1)) 0))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
(= 2 (select Inv_pc_n zk!1))
(not (= (select Inv_pc_n zk!0) 0))
(= (select Inv_pc_n zk!1) 2)
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(>= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(= 2 (select Inv_pc_n zk!0))
(= (select Inv_pc_n zk!0) 2)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(not (<= (select Inv_pc_n zk!1) 1))
(not (= (+ zk!0 (* (- 1) zk!1)) 0))
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:85 ---------
(not (= (select Inv_pc_n zk!0) 0))
(<= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(>= (+ (select Inv_pc_n zk!1) (* (- 1) (select Inv_pc_n zk!0))) 0)
(<= (select Inv_pc_n zk!0) 2)
(>= (select Inv_pc_n zk!0) 2)
(not (<= (+ zk!0 (* (- 1) zk!1)) 0))
(not (<= (select Inv_pc_n zk!1) 1))
(not (= (+ zk!0 (* (- 1) zk!1)) 0))
(= (select Inv_pc_n zk!1) (select Inv_pc_n zk!0))
(= (select Inv_pc_n zk!1) 2)
(= (select Inv_pc_n zk!0) 2)
------------------------------------------------
-------- [spacer] operator() /ag/z3/quic/src/muz/spacer/spacer_generalizers.cpp:106 ---------
old size: 11 new size: 3
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!1) 2))
      (= (+ zk!0 (* (- 1) zk!1)) 0)
      (not (>= (select Inv_pc_n zk!0) 2))))
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 4 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!1) 2))
      (= (+ (* (- 1) zk!1) zk!0) 0)
      (not (>= (select Inv_pc_n zk!0) 2))))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!1) 2))
      (= (+ (* (- 1) zk!1) zk!0) 0)
      (not (>= (select Inv_pc_n zk!0) 2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!5_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!1) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!5_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!1) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!5_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!1) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!5_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!1) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: Error level: 5 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: Error level: 5 depth: 6
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not |Inv#reach_case_0_0|)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 5 Error false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 5 Error false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |Error#level_5!24|)
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or (=> query!0_dummy false) |query!0#level_6!30|)
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2862 ---------
expand-node: query!0 level: 6 depth: 0
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:736 ---------
is-reachable: query!0 level: 6 depth: 6
true
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:793 ---------
reach assumptions
(not query!0_dummy)
------------------------------------------------
-------- [spacer] internal_check_assumptions /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:248 ---------
theory core
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:808 ---------
------------------------------------------------
-------- [spacer] is_reachable /ag/z3/quic/src/muz/spacer/spacer_context.cpp:832 ---------
unreachable with lemmas
Core:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2981 ---------
cube:
------------------------------------------------
-------- [spacer] expand_node /ag/z3/quic/src/muz/spacer/spacer_context.cpp:3056 ---------
invariant state: false
------------------------------------------------
-------- [spacer] add_lemma /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1365 ---------
add-lemma: 6 query!0 false
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 6 query!0 false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (or false |query!0#level_6!30|)
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 2 Inv (forall ((zk!0 Int))
  (let ((a!1 (<= (+ Inv_ticket_n (* (- 1) (select Inv_t_n zk!0))) 0)))
    (or (<= (select Inv_pc_n zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr1 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_3!21|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr1 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr2 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_3!21|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr2 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr3 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_3!21|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr3 a!1) |Inv#level_3!21|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Error_dummy (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Error#level_3!13|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Error_dummy a!1) |Error#level_3!13|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 Inv (forall ((zk!0 Int))
  (let ((a!1 (not (>= (+ Inv_serving_n (* (- 1) Inv_ticket_n)) 0))))
    (or a!1 (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr1 a!2) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr1 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr2 a!2) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr2 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr3 a!2) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr3 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Error_dummy a!2) |Error#level_4!15|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Error_dummy a!1) |Error#level_4!15|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 Inv (forall ((zk!0 Int))
  (let ((a!1 (<= (+ Inv_ticket_n (* (- 1) (select Inv_t_n zk!0))) 0)))
    (or (<= (select Inv_pc_n zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr1 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr1 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr2 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr2 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr3 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr3 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Error_dummy (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Error#level_4!15|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Error_dummy a!1) |Error#level_4!15|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 3 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (<= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0)))
    (or (<= (+ (* (- 1) zk!1) zk!0) 0)
        (<= (select Inv_pc_n zk!1) 0)
        (<= (select Inv_pc_n zk!0) 0)
        (not a!1)
        (not a!2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Inv_tr1 a!3) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Inv_tr1 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Inv_tr2 a!3) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Inv_tr2 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Inv_tr3 a!3) |Inv#level_4!22|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Inv_tr3 a!1) |Inv#level_4!22|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Error_dummy a!3) |Error#level_4!15|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Error_dummy a!1) |Error#level_4!15|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (= (+ (* (- 1) zk!1) zk!0) 0)
      (not (>= (select Inv_pc_n zk!1) 2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 Inv (forall ((zk!0 Int))
  (let ((a!1 (not (>= (+ Inv_serving_n (* (- 1) Inv_ticket_n)) 0))))
    (or a!1 (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr1 a!2) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr2 a!2) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr3 a!2) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Error_dummy a!2) |Error#level_5!24|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (not (>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0))))
    (or (<= (select Inv_pc_n zk!1) 0)
        (not a!1)
        (>= (+ (* (- 1) zk!1) zk!0) 0)
        (not (>= (select Inv_pc_n zk!0) 2))
        a!2)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (or (=> Inv_tr1 a!3) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (or (=> Inv_tr2 a!3) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (or (=> Inv_tr3 a!3) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (or (=> Error_dummy a!3) |Error#level_5!24|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (<= (+ (* (- 1) zk!0) zk!1) 0)
      (not (>= (select Inv_pc_n zk!1) 2))
      (not (>= (select Inv_pc_n zk!0) 2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (not (>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0))))
    (or (<= (select Inv_pc_n zk!1) 0)
        (<= (+ (* (- 1) zk!1) zk!0) 0)
        (not a!1)
        a!2
        (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr1 a!3) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr2 a!3) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Inv_tr3 a!3) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (or (=> Error_dummy a!3) |Error#level_5!24|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 Inv (forall ((zk!0 Int))
  (let ((a!1 (<= (+ Inv_ticket_n (* (- 1) (select Inv_t_n zk!0))) 0)))
    (or (<= (select Inv_pc_n zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr1 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr2 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Inv_tr3 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
(let ((a!2 (=> Error_dummy (or (<= (select Inv_pc_0 zk!0) 0) (not a!1)))))
  (or a!2 |Error#level_5!24|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: 4 Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (<= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0)))
    (or (<= (+ (* (- 1) zk!1) zk!0) 0)
        (<= (select Inv_pc_n zk!1) 0)
        (<= (select Inv_pc_n zk!0) 0)
        (not a!1)
        (not a!2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Inv_tr1 a!3) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Inv_tr1 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Inv_tr2 a!3) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Inv_tr2 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Inv_tr3 a!3) |Inv#level_5!23|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Inv_tr3 a!1) |Inv#level_5!23|))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (or (=> Error_dummy a!3) |Error#level_5!24|)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (or (=> Error_dummy a!1) |Error#level_5!24|))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!0) 2))
      (= (+ (* (- 1) zk!1) zk!0) 0)
      (not (>= (select Inv_pc_n zk!1) 2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!6_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2)))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!0) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo Inv (forall ((zk!0 Int))
  (let ((a!1 (not (>= (+ Inv_serving_n (* (- 1) Inv_ticket_n)) 0))))
    (or a!1 (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (=> Inv_tr1 a!2)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (=> Inv_tr2 a!2)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (=> Inv_tr3 a!2)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
(let ((a!2 (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))
  (=> Error_dummy a!2)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (not (>= (+ Inv_serving_0 (* (- 1) Inv_ticket_0)) 0))))
               (or a!1 (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (not (>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0))))
    (or (<= (select Inv_pc_n zk!1) 0)
        (not a!1)
        (>= (+ (* (- 1) zk!1) zk!0) 0)
        (not (>= (select Inv_pc_n zk!0) 2))
        a!2)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (=> Inv_tr1 a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (=> Inv_tr2 a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (=> Inv_tr3 a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (not a!1)
               (>= (+ (* (- 1) aux!2_n) zk!1) 0)
               (not (>= (select Inv_pc_0 zk!1) 2))
               a!2)))
  (=> Error_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (not a!1)
                   (>= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select Inv_pc_0 zk!0) 2))
                   a!2)))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (<= (+ (* (- 1) zk!0) zk!1) 0)
      (not (>= (select Inv_pc_n zk!1) 2))
      (not (>= (select Inv_pc_n zk!0) 2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (<= (+ (* (- 1) aux!6_n) aux!5_n) 0)
               (not (>= (select Inv_pc_0 aux!5_n) 2))
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (<= (+ (* (- 1) zk!0) zk!1) 0)
                 (not (>= (select Inv_pc_0 zk!1) 2))
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo Inv (forall ((zk!1 Int) (zk!0 Int))
  (or (not (>= (select Inv_pc_n zk!1) 2))
      (= (+ (* (- 1) zk!1) zk!0) 0)
      (not (>= (select Inv_pc_n zk!0) 2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!5_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!1) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!5_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!1) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!5_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!1) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (or (not (>= (select Inv_pc_0 aux!5_n) 2))
               (= (+ (* (- 1) aux!5_n) aux!6_n) 0)
               (not (>= (select Inv_pc_0 aux!6_n) 2)))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (or (not (>= (select Inv_pc_0 zk!1) 2))
                 (= (+ (* (- 1) zk!1) zk!0) 0)
                 (not (>= (select Inv_pc_0 zk!0) 2))))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ Inv_serving_n (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (not (>= (+ (* (- 1) Inv_serving_n) (select Inv_t_n zk!1)) 0))))
    (or (<= (select Inv_pc_n zk!1) 0)
        (<= (+ (* (- 1) zk!1) zk!0) 0)
        (not a!1)
        a!2
        (not (>= (select Inv_pc_n zk!0) 2)))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (=> Inv_tr1 a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (=> Inv_tr2 a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (=> Inv_tr3 a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 aux!2_n)) 0))))
(let ((a!3 (or (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (+ (* (- 1) aux!2_n) zk!0) 0)
               (not a!1)
               a!2
               (not (>= (select Inv_pc_0 zk!0) 2)))))
  (=> Error_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ Inv_serving_0 (* (- 1) (select Inv_t_0 zk!1))) 0))
                   (a!2 (not (>= (+ (* (- 1) Inv_serving_0) (select Inv_t_0 zk!1)) 0))))
               (or (<= (select Inv_pc_0 zk!1) 0)
                   (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (not a!1)
                   a!2
                   (not (>= (select Inv_pc_0 zk!0) 2)))))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo Inv (forall ((zk!0 Int))
  (let ((a!1 (<= (+ Inv_ticket_n (* (- 1) (select Inv_t_n zk!0))) 0)))
    (or (<= (select Inv_pc_n zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
  (=> Inv_tr1 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
  (=> Inv_tr2 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
  (=> Inv_tr3 (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
  (=> Error_dummy (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!0 Int))
             (let ((a!1 (<= (+ Inv_ticket_0 (* (- 1) (select Inv_t_0 zk!0))) 0)))
               (or (<= (select Inv_pc_0 zk!0) 0) (not a!1))))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo Inv (forall ((zk!1 Int) (zk!0 Int))
  (let ((a!1 (>= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0))
        (a!2 (<= (+ (select Inv_t_n zk!0) (* (- 1) (select Inv_t_n zk!1))) 0)))
    (or (<= (+ (* (- 1) zk!1) zk!0) 0)
        (<= (select Inv_pc_n zk!1) 0)
        (<= (select Inv_pc_n zk!0) 0)
        (not a!1)
        (not a!2))))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (=> Inv_tr1 a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (=> Inv_tr1 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (=> Inv_tr2 a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (=> Inv_tr2 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (=> Inv_tr3 a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (=> Inv_tr3 a!1))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (>= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0))
      (a!2 (<= (+ (select Inv_t_0 zk!1) (* (- 1) (select Inv_t_0 aux!2_n))) 0)))
(let ((a!3 (or (<= (+ (* (- 1) aux!2_n) zk!1) 0)
               (<= (select Inv_pc_0 aux!2_n) 0)
               (<= (select Inv_pc_0 zk!1) 0)
               (not a!1)
               (not a!2))))
  (=> Error_dummy a!3)))
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
             (let ((a!1 (>= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0))
                   (a!2 (<= (+ (select Inv_t_0 zk!0)
                               (* (- 1) (select Inv_t_0 zk!1)))
                            0)))
               (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                   (<= (select Inv_pc_0 zk!1) 0)
                   (<= (select Inv_pc_0 zk!0) 0)
                   (not a!1)
                   (not a!2))))))
  (=> Error_dummy a!1))
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo Error false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: (=> query!0_dummy false)
------------------------------------------------
-------- [spacer] add_lemma_core /ag/z3/quic/src/muz/spacer/spacer_context.cpp:400 ---------
add-lemma-core: oo query!0 false
------------------------------------------------
-------- [spacer] assert_expr /ag/z3/quic/src/muz/spacer/spacer_prop_solver.cpp:131 ---------
add_formula: false
------------------------------------------------
-------- [spacer] to_model /ag/z3/quic/src/muz/spacer/spacer_manager.cpp:109 ---------
(define-fun Error () Bool
  false)
(define-fun Inv ((x!0 (Array Int Int))
 (x!1 (Array Int Int))
 (x!2 Int)
 (x!3 Int)) Bool
  (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
               (let ((a!1 (>= (+ (select x!1 zk!0) (* (- 1) (select x!1 zk!1)))
                              0))
                     (a!2 (<= (+ (select x!1 zk!0) (* (- 1) (select x!1 zk!1)))
                              0)))
                 (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                     (<= (select x!0 zk!1) 0)
                     (<= (select x!0 zk!0) 0)
                     (not a!1)
                     (not a!2)))))
        (a!2 (forall ((zk!0 Int))
               (let ((a!1 (not (>= (+ x!2 (* (- 1) x!3)) 0))))
                 (or a!1 (not (>= (select x!0 zk!0) 2))))))
        (a!3 (forall ((zk!1 Int) (zk!0 Int))
               (let ((a!1 (>= (+ x!2 (* (- 1) (select x!1 zk!1))) 0))
                     (a!2 (not (>= (+ (* (- 1) x!2) (select x!1 zk!1)) 0))))
                 (or (<= (select x!0 zk!1) 0)
                     (not a!1)
                     (>= (+ (* (- 1) zk!1) zk!0) 0)
                     (not (>= (select x!0 zk!0) 2))
                     a!2))))
        (a!4 (forall ((zk!1 Int) (zk!0 Int))
               (or (not (>= (select x!0 zk!1) 2))
                   (= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select x!0 zk!0) 2)))))
        (a!5 (forall ((zk!1 Int) (zk!0 Int))
               (let ((a!1 (>= (+ x!2 (* (- 1) (select x!1 zk!1))) 0))
                     (a!2 (not (>= (+ (* (- 1) x!2) (select x!1 zk!1)) 0))))
                 (or (<= (select x!0 zk!1) 0)
                     (<= (+ (* (- 1) zk!1) zk!0) 0)
                     (not a!1)
                     a!2
                     (not (>= (select x!0 zk!0) 2))))))
        (a!6 (forall ((zk!0 Int))
               (let ((a!1 (<= (+ x!3 (* (- 1) (select x!1 zk!0))) 0)))
                 (or (<= (select x!0 zk!0) 0) (not a!1))))))
    (and a!1 a!2 a!3 a!4 a!5 a!6)))
------------------------------------------------
-------- [spacer] to_model /ag/z3/quic/src/muz/spacer/spacer_manager.cpp:109 ---------
(define-fun Error () Bool
  false)
(define-fun Inv ((x!0 (Array Int Int))
 (x!1 (Array Int Int))
 (x!2 Int)
 (x!3 Int)) Bool
  (let ((a!1 (forall ((zk!1 Int) (zk!0 Int))
               (let ((a!1 (>= (+ (select x!1 zk!0) (* (- 1) (select x!1 zk!1)))
                              0))
                     (a!2 (<= (+ (select x!1 zk!0) (* (- 1) (select x!1 zk!1)))
                              0)))
                 (or (<= (+ (* (- 1) zk!1) zk!0) 0)
                     (<= (select x!0 zk!1) 0)
                     (<= (select x!0 zk!0) 0)
                     (not a!1)
                     (not a!2)))))
        (a!2 (forall ((zk!0 Int))
               (let ((a!1 (not (>= (+ x!2 (* (- 1) x!3)) 0))))
                 (or a!1 (not (>= (select x!0 zk!0) 2))))))
        (a!3 (forall ((zk!1 Int) (zk!0 Int))
               (let ((a!1 (>= (+ x!2 (* (- 1) (select x!1 zk!1))) 0))
                     (a!2 (not (>= (+ (* (- 1) x!2) (select x!1 zk!1)) 0))))
                 (or (<= (select x!0 zk!1) 0)
                     (not a!1)
                     (>= (+ (* (- 1) zk!1) zk!0) 0)
                     (not (>= (select x!0 zk!0) 2))
                     a!2))))
        (a!4 (forall ((zk!1 Int) (zk!0 Int))
               (or (not (>= (select x!0 zk!1) 2))
                   (= (+ (* (- 1) zk!1) zk!0) 0)
                   (not (>= (select x!0 zk!0) 2)))))
        (a!5 (forall ((zk!1 Int) (zk!0 Int))
               (let ((a!1 (>= (+ x!2 (* (- 1) (select x!1 zk!1))) 0))
                     (a!2 (not (>= (+ (* (- 1) x!2) (select x!1 zk!1)) 0))))
                 (or (<= (select x!0 zk!1) 0)
                     (<= (+ (* (- 1) zk!1) zk!0) 0)
                     (not a!1)
                     a!2
                     (not (>= (select x!0 zk!0) 2))))))
        (a!6 (forall ((zk!0 Int))
               (let ((a!1 (<= (+ x!3 (* (- 1) (select x!1 zk!0))) 0)))
                 (or (<= (select x!0 zk!0) 0) (not a!1))))))
    (and a!1 a!2 a!3 a!4 a!5 a!6)))
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2119 ---------
PT: Inv
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2126 ---------
(forall ((A (Array Int Int)) (B (Array Int Int)) (C Int) (D Int))
  (let ((a!1 (= (forall ((z1 Int)) (> (select B z1) 0)) true))
        (a!2 (= (forall ((z1 Int)) (= (select A z1) 0)) true)))
    (=> (and (= D 0) a!1 a!2 (= C 0)) (Inv A B C D))))
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2126 ---------
(forall ((A (Array Int Int))
         (B (Array Int Int))
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F (Array Int Int))
         (G Int)
         (H Int))
  (=> (and (Inv A B G D)
           (= F (store B C D))
           (= (select A C) 0)
           (= H (+ 1 D))
           (= E (store A C 1)))
      (Inv E F G H)))
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2126 ---------
(forall ((A (Array Int Int))
         (B Int)
         (C (Array Int Int))
         (D (Array Int Int))
         (E Int)
         (F Int))
  (=> (and (Inv A D E F)
           (= (select A B) 1)
           (= (select D B) E)
           (= C (store A B 2)))
      (Inv C D E F)))
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2126 ---------
(forall ((A Int)
         (B (Array Int Int))
         (C Int)
         (D (Array Int Int))
         (E (Array Int Int))
         (F Int)
         (G Int))
  (let ((a!1 (and (Inv B E A G)
                  (= (select B C) 2)
                  (= F (+ 1 (select E C)))
                  (= D (store B C 0)))))
    (=> a!1 (Inv D E F G))))
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2119 ---------
PT: Error
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2126 ---------
(forall ((A (Array Int Int))
         (B Int)
         (C Int)
         (D Int)
         (E (Array Int Int))
         (F Int))
  (=> (and (Inv E A B C) (= (select E F) 2) (not (= D F)) (= (select E D) 2))
      Error))
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2119 ---------
PT: query!0
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2126 ---------
(=> Error query!0)
------------------------------------------------
-------- [spacer] validate /ag/z3/quic/src/muz/spacer/spacer_context.cpp:2165 ---------
Validation Succeeded
------------------------------------------------
-------- [spacer] reset /ag/z3/quic/src/muz/spacer/spacer_context.cpp:1860 ---------

------------------------------------------------
